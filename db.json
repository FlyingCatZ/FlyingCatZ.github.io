{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/dist/APlayer.min.css","path":"dist/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/dist/APlayer.min.css.map","path":"dist/APlayer.min.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/dist/music.js","path":"dist/music.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/dist/APlayer.min.js","path":"dist/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/dist/APlayer.min.js.map","path":"dist/APlayer.min.js.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/muse.js","path":"js/src/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"08c9e33511ba79e16e58b8f4ce341123868240b4","modified":1555430188029},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1551346080000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1551346080000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1551346080000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1551346080000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1551346080000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1551346080000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1551346080000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1551346080000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1551346080000},{"_id":"themes/next/README.md","hash":"b4f780a96b0e5d3737eb93bc00da6de91f042c4b","modified":1551346080000},{"_id":"themes/next/_config.yml","hash":"cafd1a5fe0e322525821912964747e2b574ad86d","modified":1618416749158},{"_id":"themes/next/bower.json","hash":"a5ffaa8d88f0f66d15158917b3798e5e38363262","modified":1551346080000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1551346080000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1551346080000},{"_id":"themes/next/package.json","hash":"f3b4ef65214cec9c37acd10ef080526fb1ea14bb","modified":1551346080000},{"_id":"source/_posts/cma.md","hash":"704d9d1f5e01e2e45ac286d948103050d14deb51","modified":1613201005040},{"_id":"source/_posts/display.md","hash":"af859e5fe158128f381bc9fe4d56cc612fdd498e","modified":1614877750043},{"_id":"source/_posts/dma.md","hash":"3f0eb0bdc2ef07e2384b511253d66d5d21d90f39","modified":1614876123822},{"_id":"source/_posts/hexo将Blog转到Linux.md","hash":"cc453551883206f9bc05c7f0eaf703621fbe82c4","modified":1618421399456},{"_id":"source/_posts/hexo-Github搭建个人博客.md","hash":"9a00ab96f2dc029652fcec485a5731cdba301e36","modified":1611240656867},{"_id":"source/_posts/tools.md","hash":"1e36cdbdae3c3459d14e276210a2032ed78bb1ec","modified":1613184511496},{"_id":"source/_posts/从学校到职场.md","hash":"476dd73760e6c59db322e7d55f9d51224017a95c","modified":1578317026462},{"_id":"source/_posts/博客注意事项.md","hash":"68a008da6017877f1e1630f87f955499260304a0","modified":1562913716644},{"_id":"source/_posts/大学总结.md","hash":"497b81ce5b7cbbbd910026decee5270531800e9a","modified":1613199202684},{"_id":"source/_posts/嵌入式Linux-存储管理器基础.md","hash":"317399b5965f36a9cc71f65606f466299d939910","modified":1613199485456},{"_id":"source/_posts/我的第一篇博客.md","hash":"73221bbb2d3344e1cc41e9d4243e313eb90167b1","modified":1555419808530},{"_id":"source/_posts/科学上网.md","hash":"a146b864bb588d4df514fc88080fd4b885c836a6","modified":1562912869696},{"_id":"source/categories/index.md","hash":"9e64572993d136d5a62e42fc7c40115beadb112b","modified":1618418347567},{"_id":"source/about/index.md","hash":"f56e068a8dab86c3b1d88ede385f6fe5363fa625","modified":1618418557246},{"_id":"source/tags/index.md","hash":"4a78c8ae6a2fb99f8cfe94ea79c0d3b5429e0bb8","modified":1618418367255},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1551346080000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1551346080000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1551346080000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1cb29a0e54ef390f73cb85f254000d4b57460dae","modified":1551346080000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1551346080000},{"_id":"themes/next/.github/stale.yml","hash":"a782ac925201a8fe07959bba0d7696c7b2b5fd2d","modified":1551346080000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1551346080000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1551346080000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1551346080000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1551346080000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1551346080000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1551346080000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1551346080000},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1551346080000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1551346080000},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1551346080000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1551346080000},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1618415751434},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1551346080000},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1551346080000},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1551346080000},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1551346080000},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1551346080000},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1551346080000},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1551346080000},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1551346080000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1551346080000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1551346080000},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1551346080000},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1551346080000},{"_id":"themes/next/languages/zh-CN.yml","hash":"198a8c02148489c1f109e02f76e34a6bb9378cb7","modified":1618417049737},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1551346080000},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1551346080000},{"_id":"themes/next/layout/_layout.swig","hash":"908ead2c375ce925735bf962e18dc5da1297661e","modified":1562944330971},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1551346080000},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1551346080000},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1551346080000},{"_id":"themes/next/layout/page.swig","hash":"2d0e80e8a4dcba665704882b9dc5858c187acc31","modified":1562950268769},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1551346080000},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1551346080000},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1551346080000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1551346080000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1551346080000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1551346080000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1551346080000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1551346080000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551346080000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1551346080000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1551346080000},{"_id":"themes/next/docs/ru/README.md","hash":"953deb732e0b3b22c423122a189d6847d908c4b8","modified":1551346080000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1551346080000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1551346080000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1551346080000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1551346080000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1551346080000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1551346080000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1551346080000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1551346080000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"15e55eb77616500fa4c64982d6bad9ac17a46e2a","modified":1551346080000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1551346080000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1551346080000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551346080000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551346080000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1551346080000},{"_id":"themes/next/layout/_macro/post.swig","hash":"58a65052655053e26c6e070aac6207a175edc523","modified":1562936975812},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"4d808d1b187eea5aac8a123bb0e91e34a388f00d","modified":1555481374324},{"_id":"themes/next/layout/_partials/comments.swig","hash":"07340f3a4c8d8a9dd491d1eba18d985ecc0855a2","modified":1551346080000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7b14f2646ddb3321ab9b95c7af5744eab19037d2","modified":1555694484213},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"a6ed0b4d6140bdfc5ea4995bb13d969cce50e74a","modified":1551346080000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1551346080000},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1551346080000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"d01881f8056203c4b6920328db8c2ae8fa662a08","modified":1551346080000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"d66bc7ec3cc03f60fcc7d555368a5b9b010f7f11","modified":1551346080000},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"f517ac649de4d64a69f01b84df1a400390fe4e3c","modified":1562928180310},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1551346080000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c4c58ea2bd4cf10372a5e46dbec1b9a2e0e69f0f","modified":1551346080000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1551346080000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1551346080000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"7c306e3296d90c3765fb681d24c6fe4cb5e274a0","modified":1551346080000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"d359e638a86bd9664101c48e9344f21ec96e6a15","modified":1551346080000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1551346080000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1551346080000},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"5453d76e00bfcd1d732fc5f41828a90eb681f645","modified":1551346080000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"87b91b8812fcb7963525625796fd02217dc7ed60","modified":1551346080000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1551346080000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1551346080000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1b250c1b7945cb1029b9e855edb09854f7c8250a","modified":1551346080000},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1551346080000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1551346080000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1551346080000},{"_id":"themes/next/scripts/tags/button.js","hash":"08d5dfe05335f57d3e8392a74315766dafa52538","modified":1551346080000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1551346080000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"7ded3e7a78380b32de3e12f156e0978ef5c2890a","modified":1551346080000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"22de989163c4678278c8a112160be6977f570234","modified":1551346080000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"4775fffa526f1f7b40aa1f1c0a171dbcf5963df7","modified":1551346080000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1551346080000},{"_id":"themes/next/scripts/tags/label.js","hash":"76735c88cfba2e53649387a7fa5176706c2d3c0c","modified":1551346080000},{"_id":"themes/next/scripts/tags/note.js","hash":"84ce2d2c0646baafc82083e261b093b1c515f63c","modified":1551346080000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"8b1e9043db8f19ea4a12c473b3f729bd3b5bcb0e","modified":1551346080000},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1551346080000},{"_id":"themes/next/source/dist/APlayer.min.css","hash":"77d95233f4d831b987b9fb243aef2d051163909c","modified":1563103716401},{"_id":"themes/next/source/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1548960912000},{"_id":"themes/next/source/dist/music.js","hash":"d3e00528dbfc55709a41dfc97cdbfa608701761c","modified":1611239304786},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1551346080000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1551346080000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1551346080000},{"_id":"themes/next/source/images/avatar.jpg","hash":"6c4763b09f6a5e45fa04d1823e2909fb86047425","modified":1496892299000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1551346080000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1551346080000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1551346080000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1551346080000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1551346080000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1551346080000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1551346080000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1551346080000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1551346080000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551346080000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1551346080000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551346080000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1551346080000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1551346080000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551346080000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551346080000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551346080000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551346080000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551346080000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551346080000},{"_id":"themes/next/source/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1548960912000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1551346080000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1551346080000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1551346080000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"dc53a41196b675268bfd2a944f6258c57ed44e91","modified":1551346080000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"6a825ce9412339ec4a128d9714804994cb85522c","modified":1551346080000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"58e2e153e8b67e643b24453a1e1cceaae3323647","modified":1551346080000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1551346080000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1551346080000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1551346080000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"69722be16ce5eae5c027168f9b2fded4776e1b53","modified":1551346080000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1551346080000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1551346080000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1551346080000},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"c33691d9b4ff3a69603ad04c9ab264eb68ea43a9","modified":1551346080000},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1551346080000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1551346080000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1551346080000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1551346080000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1551346080000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1551346080000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1551346080000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"c7f2855f19dfdf18aba8c58d55b7489e631ed035","modified":1551346080000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1551346080000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1551346080000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"be24f204a515d5211bf3ba98a030e3bf61d4cc16","modified":1551346080000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"94e106755c5fb6f40431b621beeba0bd33877e57","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"c9172b9498bac4a4551dc0191855abee3bb192fc","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1551346080000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"cbf620cf2a78e3ac736cdd7e768513cfd6946e83","modified":1551346080000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1551346080000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1551346080000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"197207078ff0f4d46417b4413493e02cda0b85f4","modified":1551346080000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"dbe94dd94678ee8e4002b06bb1e9ead2e59e44bf","modified":1551346080000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"a4ab8095bf60def5823bf6b7b91a92a356a4c098","modified":1551346080000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1551346080000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"210f0c152bc4a9375ed364398ce309f09ebafd10","modified":1551346080000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1551346080000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1551346080000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"e47d928451c6d31a29f7da30ad37bc2dbc531e11","modified":1551346080000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"cd86bed852fec6e6933898067122a03755bc17f0","modified":1551346080000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1551346080000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1551346080000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"ca7da28533b6247560ebe2c207daf86b6fa47de8","modified":1563098550227},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1551346080000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1551346080000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"086f5979b3de091c3378512e6c5c2f8fcb4f6298","modified":1551346080000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1551346080000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1551346080000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1551346080000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d0e97b205d3320421c380f2eee445457430c8152","modified":1551346080000},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1551346080000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1551346080000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1551346080000},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1551346080000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1551346080000},{"_id":"themes/next/source/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1551346080000},{"_id":"themes/next/source/js/src/particle.js","hash":"aca6cdacf6f4e9975f775fecd711d483c650b429","modified":1563101480784},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1551346080000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1551346080000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1551346080000},{"_id":"themes/next/source/js/src/utils.js","hash":"da28f07763faa35b1f84f22e5c7f0c02a7d5a575","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1551346080000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1551346080000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1551346080000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1551346080000},{"_id":"themes/next/source/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1548960912000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"837ff3718cb5a63eb01a451e35989fd1dfe4218c","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1551346080000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1551346080000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"8c68d36d1c74628be58cb61e66948868a8c7588d","modified":1551346080000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"e3ad313825d7ad03e24bb76d036deeb50587022b","modified":1551346080000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"4fd38490b01af4f977b53aefc433cd2f981cde14","modified":1551346080000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1551346080000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1551346080000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"6f1a0fe6b45eb8849114b8b60ba600767d08b6df","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a5e3c6da76f6d5bed70c38fdf5796faa759d473","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"fe03041c387347e0bcf8efd1b4cf205ece66c339","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fe2dc74726a515549956d233becda188da64f948","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"7f6ddfeae752e2146d92d6c6850c4a0d9c946bd2","modified":1555697847103},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"936132428a0d35b3947ccedd4c379940abcf223a","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"09b5054ae34ba83c0d614821e574da265af55a14","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9b076c92abdadcf9acee75da64592ff3badd69b8","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"74c7dccf0a3ee9fc2ca25ad8e998243191813a0e","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"fd54eb599d5003bbb1aabc08596bc24a3fa3294f","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1551346080000},{"_id":"themes/next/source/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1551346080000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551346080000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1551346080000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1551346080000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"9e0f215868df17cb27a4a522fd31156c66428c2d","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"05e68adae13f4d99a6ac6493daab39c92e39a6bd","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c59dbc1a6f2b4f15d8ae499f7aa227d9b0e3058","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"61af2f656f6e916f9920277bd048c5d58ff32a60","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3b5a37ba5e70f92c1ee707c8053524e38adbb710","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"300491cf0e80c34faf5f83a2846c177759ac653f","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"2bbdf4b59117b54482dda6ea82a5286c8a3fe267","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"42a0769311856a7ea3ede1c8656fb5646994a238","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"1cf64afd4b49143972f7617869539be3adb91a5e","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"0e8294d042d7d28c680ead48baa9e3c777d407c5","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b5e5aa7074a965e396229c5bd263fb406770ce5f","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"3039df53b94b0847b0c451d2d227270b479cc184","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"cee0e70d1a6ea963bfd707bf9cedb8a4637f64c2","modified":1562995034440},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"b34bb2ea4d16e47e6fdc06cd4feb32d93ccbd779","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"f9837075189e37c100675211076b5053788e7ba5","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"b964782056658ac785ec6070e747c97a5e234ddb","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"671a7f8aa138259172e7c6268d82d7a62a1e036a","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"9ab4e05e7b78af755ebdcbb71731fd723ed2d7f5","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"e7e064bfe8ff9b9f172a9662662380b4c6699d6e","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"c11ef42781111d061ed5b6c14dd4359e2cba88be","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"070251836b57027c8240c51e41cb8e8c999c4525","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"0e760758221d4919902bda7c4d3bb96c94a678db","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"75f7876136fe1cae9b42d2c220e7f8b37b8d2f55","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"7d2222f66a1c1a0a3cc90bfd5d817d9b859f4a68","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"c415729e0f0d2439e63b93cec7ae32df54db87b4","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2d4f318644bf37c50e5b1fab8d62b2673fbab9e8","modified":1551346080000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"190ad18f45b8a69cef13b2fdd2254893d06ec2c3","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1551346080000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"3a8e0c9c2479c018e851b817cac30b5376d4e07e","modified":1563088407295},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551346080000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551346080000},{"_id":"public/atom.xml","hash":"eae6571765b65a1813baa4d0057cf3ed82425d6e","modified":1618423872448},{"_id":"public/search.xml","hash":"87d31e78231fe32907dc754b41a3ea263f493eae","modified":1618423872456},{"_id":"public/sitemap.xml","hash":"9aff348ea96726eae597f8e101663e6bc0da9a71","modified":1618423872457},{"_id":"public/categories/index.html","hash":"fb7bcb9a4c2b275836d488bf5091276da329ddc7","modified":1618423872477},{"_id":"public/about/index.html","hash":"9cf61d2512df6cbfeb4e1e6d10c83f20f75a05c5","modified":1618423872477},{"_id":"public/tags/index.html","hash":"7239aed6bb88459551840134955590cb005ee6c5","modified":1618423872477},{"_id":"public/2021/04/15/hexo将Blog转到Linux/index.html","hash":"f8dbaa51e47cfa0aa434832e9fbaaa665b7b82c9","modified":1618423872477},{"_id":"public/2021/03/05/display/index.html","hash":"f532af7b0763bfe769a5c825d1d671d0e6c99933","modified":1618423872477},{"_id":"public/2021/03/04/dma/index.html","hash":"80f17376081ee5adbb65b72977758b512ece7ed6","modified":1618423872478},{"_id":"public/2021/02/13/cma/index.html","hash":"d1e72cb45c9d67e1b145adb9d4b316ecc2748fa7","modified":1618423872478},{"_id":"public/2021/02/13/tools/index.html","hash":"85057859abaf4d0531f557da836355a565eed25e","modified":1618423872478},{"_id":"public/2020/01/06/从学校到职场/index.html","hash":"e0420242b948f74b7a9e32cbfc605a27917421a4","modified":1618423872478},{"_id":"public/2019/06/26/嵌入式Linux-存储管理器基础/index.html","hash":"73633eeb01044b92959217073d69f66ec00115e1","modified":1618423872478},{"_id":"public/2019/06/20/科学上网/index.html","hash":"7003ea0a8d15842df0b1bfd0bbc756f5866eaac1","modified":1618423872478},{"_id":"public/2019/06/20/大学总结/index.html","hash":"fca2d9a07b76fb359e33d3a312913cc65b0243ff","modified":1618423872478},{"_id":"public/2019/06/20/博客注意事项/index.html","hash":"16f615b8ee5773ce3ef3b43919a5603e6195b555","modified":1618423872478},{"_id":"public/2019/04/16/hexo-Github搭建个人博客/index.html","hash":"263f40d1a64a9a02f80bf9294df11b50dbe4afce","modified":1618423872478},{"_id":"public/2019/04/14/我的第一篇博客/index.html","hash":"35c95ba1c97970b29af0a39096662227b5800987","modified":1618423872478},{"_id":"public/archives/index.html","hash":"8edd4eca1897c66a32521efa865650984fdd7578","modified":1618423872479},{"_id":"public/archives/page/2/index.html","hash":"9de80df98d1f2983569410b6fe93a93f83d7326e","modified":1618423872479},{"_id":"public/archives/2019/index.html","hash":"f974dc46843bc65e1bde0cb81161954ec46a37b8","modified":1618423872479},{"_id":"public/archives/2019/04/index.html","hash":"2851cedb6f94f757920a6dd9de436e6c1ffe0046","modified":1618423872479},{"_id":"public/archives/2019/06/index.html","hash":"8abdacf7bc2d8fb42bbcbe40e2946a6602b8a266","modified":1618423872479},{"_id":"public/archives/2020/index.html","hash":"2c865482e72d0bca87c9f8b1e9756ac78d2f0f4a","modified":1618423872480},{"_id":"public/archives/2020/01/index.html","hash":"7c46ca316c13cd530589188d404c6d230392e31b","modified":1618423872480},{"_id":"public/archives/2021/index.html","hash":"86faa308c6c0c5f8a9ea64702af5d1ce2e8b8f2d","modified":1618423872480},{"_id":"public/archives/2021/02/index.html","hash":"a637838df24a4af62b8100daabab1e107cbf0db9","modified":1618423872480},{"_id":"public/archives/2021/03/index.html","hash":"94b359045addb733e1912a6f0a580d3ccd77c5f2","modified":1618423872480},{"_id":"public/archives/2021/04/index.html","hash":"648aba267a42eab6ede3429d570dd383124d1f0c","modified":1618423872480},{"_id":"public/categories/Linux/index.html","hash":"af59fa92fcc6bb27c6abc835c7fbdac5b8de6ab9","modified":1618423872480},{"_id":"public/categories/博客/index.html","hash":"cfb59709c2238a45e3fad643d0d1373ca9aaf95d","modified":1618423872480},{"_id":"public/categories/tools/index.html","hash":"aec2681f94c7461b73262e428c05960b29f5501d","modified":1618423872481},{"_id":"public/categories/总结/index.html","hash":"a4ed0f9d2f2018c8b594389cd3b4edd35dc7723a","modified":1618423872481},{"_id":"public/categories/科学上网/index.html","hash":"f0d3986c7e1aa0bdf693e5888b8d5fba9cfa150d","modified":1618423872481},{"_id":"public/index.html","hash":"704d96e577e86a9978c6ed72f15469b37f8868a5","modified":1618423872481},{"_id":"public/page/2/index.html","hash":"9f34689ecc6a5701a396deda3a177325b35766b6","modified":1618423872481},{"_id":"public/tags/Linux/index.html","hash":"26165828c2998d25bcd6b3aeb0e3f19baa19601a","modified":1618423872481},{"_id":"public/tags/内存/index.html","hash":"7e62f85254a9421f208080d4d586152f597a59d4","modified":1618423872481},{"_id":"public/tags/显示驱动/index.html","hash":"6992dbd7dd47a06c83ddf3d6a798df2185475284","modified":1618423872481},{"_id":"public/tags/display/index.html","hash":"efec44bf78e9ce1619fa6db2479570562617cedd","modified":1618423872481},{"_id":"public/tags/LCD/index.html","hash":"f143d08168e6e9c7b5cd349c95a529a7756bedf7","modified":1618423872481},{"_id":"public/tags/驱动/index.html","hash":"8817aab0ac7de5ff535a041627f8a4d2d8233d1c","modified":1618423872481},{"_id":"public/tags/hexo/index.html","hash":"ef98ba28fcbe0c86e59d14cbdf95e2c74217d45e","modified":1618423872482},{"_id":"public/tags/博客/index.html","hash":"60cb640624f381f909ecd8ecd647014779434b55","modified":1618423872482},{"_id":"public/tags/dma/index.html","hash":"781cbed72e3d2fd0aa1b514492c5daa907954ab8","modified":1618423872482},{"_id":"public/tags/Github/index.html","hash":"760521aca9ac0e23f313124435852f2c2c00fe39","modified":1618423872482},{"_id":"public/tags/vim/index.html","hash":"51c92bebd441b8599e19d90f04c3f6d9fc7648b3","modified":1618423872482},{"_id":"public/tags/terminator/index.html","hash":"4ca56de7c968f94ae5297859bea54dcbe90ad197","modified":1618423872482},{"_id":"public/tags/工作/index.html","hash":"ff91b5ed6c8e60e0d65db8fb6d0ddaf901562e5f","modified":1618423872482},{"_id":"public/tags/技能/index.html","hash":"5c5b0ce93440bb739bc70676e6a7d2c885ec883a","modified":1618423872482},{"_id":"public/tags/程序员/index.html","hash":"c38fb8092ae77382c9849145925389967a5aa954","modified":1618423872482},{"_id":"public/tags/总结/index.html","hash":"d6c6e6c711a5aa0b4ff8ce86693ff75a21744fd6","modified":1618423872482},{"_id":"public/tags/Arm/index.html","hash":"102e8384895bb6caaa211dba6a98cdbab116c80a","modified":1618423872482},{"_id":"public/tags/markdown/index.html","hash":"0ecc92bcc9d1ca4f3b84f12859907ba060fde85d","modified":1618423872482},{"_id":"public/tags/科学上网/index.html","hash":"0c41f9006babbea39de2c4475b869873187b8a45","modified":1618423872482},{"_id":"public/tags/翻墙/index.html","hash":"3d68547ab1d59be5405df2af2e1c91660a0dbb3c","modified":1618423872483},{"_id":"public/CNAME","hash":"08c9e33511ba79e16e58b8f4ce341123868240b4","modified":1618423872488},{"_id":"public/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1618423872488},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1618423872488},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1618423872488},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1618423872488},{"_id":"public/images/avatar.jpg","hash":"6c4763b09f6a5e45fa04d1823e2909fb86047425","modified":1618423872488},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1618423872488},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1618423872488},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1618423872488},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1618423872489},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1618423872489},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1618423872489},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1618423872489},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1618423872489},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1618423872489},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1618423872489},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1618423872489},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1618423872489},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1618423872489},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1618423872489},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1618423872489},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1618423872489},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1618423872489},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1618423872975},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1618423872979},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1618423872979},{"_id":"public/dist/APlayer.min.css","hash":"77d95233f4d831b987b9fb243aef2d051163909c","modified":1618423872985},{"_id":"public/dist/music.js","hash":"0e4b5c63a236c8709ea3f2a6cc6f50de9c85c74b","modified":1618423872985},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1618423872985},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1618423872985},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1618423872985},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1618423872986},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1618423872986},{"_id":"public/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1618423872986},{"_id":"public/js/src/particle.js","hash":"aca6cdacf6f4e9975f775fecd711d483c650b429","modified":1618423872986},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1618423872986},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1618423872986},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1618423872986},{"_id":"public/js/src/utils.js","hash":"da28f07763faa35b1f84f22e5c7f0c02a7d5a575","modified":1618423872986},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1618423872986},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1618423872986},{"_id":"public/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1618423872986},{"_id":"public/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1618423872986},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1618423872987},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1618423872987},{"_id":"public/css/main.css","hash":"6224ae11c31018ae86915c2b711f7904b97dc4a7","modified":1618423872987},{"_id":"public/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1618423872987},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1618423872987},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1618423872987},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1618423872987},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1618423872987},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1618423872987},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1618423872987},{"_id":"public/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1618423872987},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1618423872991}],"Category":[{"name":"Linux","_id":"cknhrs8y50004q5di9ll4ei9a"},{"name":"博客","_id":"cknhrs8ym000fq5digmxwdmjq"},{"name":"tools","_id":"cknhrs8yv000sq5dilt9bov11"},{"name":"总结","_id":"cknhrs8yx000xq5di92ttuzwg"},{"name":"科学上网","_id":"cknhrs8yz0014q5di5lnx1mu3"}],"Data":[],"Page":[{"title":"Categories","date":"2019-04-14T09:27:13.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2019-04-14 17:27:13\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-04-14T16:39:07.567Z","path":"categories/index.html","layout":"page","_id":"cknhrs8y00001q5difve1hp9h","content":"<script src=\"/assets/js/APlayer.min.js\"> </script>","site":{"data":{}},"excerpt":"","more":""},{"title":"About Me","date":"2021-04-14T15:22:29.000Z","_content":"\n&emsp;&emsp;热爱Linux kernel的一枚hacker，2019年毕业，目前从事kernel工作\n\n&emsp;\n\n&emsp;\n\n&emsp;\n\n&emsp;\n\n&emsp;\n\n&emsp;\n\n&emsp;\n\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;**刹那间，白驹过细，终抵岁月漫长，回首二十余载，生活依可期**","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2021-04-14 23:22:29\n---\n\n&emsp;&emsp;热爱Linux kernel的一枚hacker，2019年毕业，目前从事kernel工作\n\n&emsp;\n\n&emsp;\n\n&emsp;\n\n&emsp;\n\n&emsp;\n\n&emsp;\n\n&emsp;\n\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;**刹那间，白驹过细，终抵岁月漫长，回首二十余载，生活依可期**","updated":"2021-04-14T16:42:37.246Z","path":"about/index.html","comments":1,"layout":"page","_id":"cknhrs8y30003q5di7bq2oq95","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>&emsp;&emsp;热爱Linux kernel的一枚hacker，2019年毕业，目前从事kernel工作</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<strong>刹那间，白驹过细，终抵岁月漫长，回首二十余载，生活依可期</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;&emsp;热爱Linux kernel的一枚hacker，2019年毕业，目前从事kernel工作</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;</p>\n<p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<strong>刹那间，白驹过细，终抵岁月漫长，回首二十余载，生活依可期</strong></p>\n"},{"title":"Tags","date":"2019-04-14T09:23:11.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2019-04-14 17:23:11\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-04-14T16:39:27.255Z","path":"tags/index.html","layout":"page","_id":"cknhrs8y90007q5di27ym2dm0","content":"<script src=\"/assets/js/APlayer.min.js\"> </script>","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CMA","date":"2021-02-13T14:55:30.000Z","_content":"\n#### 前言\n\n&emsp;&emsp;CMA（Contiguous Memory Alloctor 连续内存分配器）是Linux内存管理子系统中的一个模块，负责物理地址连续的内存分配。一般系统会在启动过程中，从整个memory中配置一段连续内存用于CMA，然后内核其他的模块可以通过CMA的接口API进行连续内存的分配，它的底层还是依赖内核伙伴系统这样的内存管理机制。\n\n<!-- more -->\n\n&emsp;&emsp;问：为什么需要CMA模块？\n\n&emsp;&emsp;在嵌入式设备中，很多设备往往需要 较大的内存缓冲区（如: 一个200万像素的高清帧摄像机，需要超过 6M 的内存)， kmalloc 内存分配机制对于这么大的内存是没有效果的。一些嵌入式设备对缓冲区 有一些额外的要求，比如： 在含有多个内存 bank 的设备中，要求只能在特定的 bank 中分配内存；而还有一些要定内存边界对齐的缓存区。近来，嵌入式设备有了较大的发展（特别是 V4L 领域），并且这些驱动都有自己的内存分配代码。CMA 框架企图采用统一的连续内存分配机制，并为这些设备驱动提供简单的API，实现定制化和模块化，而且CMA可以实现物理连续内存在不使用时这片内存能够被其他模块\"借用\"，需要的时候将其移走即可，还有就是：\n\n&emsp;&emsp;1.huge page（超过4k的页）模块分配  \n\n&emsp;&emsp;2.驱动需求，在嵌入式设备中如果没有IOMMU（设备访问的内存管理），而且DMA也不具备scatter/getter功能（IO分散聚集接口），这时必须通过CMA进行物理连续内存的分配\n\n\n\n![内存视图](https://res.cloudinary.com/flyingcatz/image/upload/v1613226806/samples/CMA/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86_udx01r.svg)\n\n\n\n#### 设备树配置\n\n&emsp;&emsp;设备树中对保留内存进行设置的参数在Documentation/devicetree/bindings/reserved-memory/reserved-memory.txt文档中有说明：\n\n&emsp;&emsp;在/reserved-memory节点中必须有#address-cells，#size-cells两个参数指定地址、大小参数的个数，ranges参数必须有，且为空。\n\n&emsp;&emsp;在/reserved-memory里面的每一个子节点都可以通过两种方式来分配内存，一种为静态方式（static allocation），用reg属性指定分配内存的地址和大小。另一种为动态方式（dynamic allocation），用size属性指定大小，alignment指定对其大小，alloc-ranges指定可接受分配的内存区域，后面两个参数是可选的，第一个参数必须有。\n\n&emsp;&emsp;子节点中还有compatible属性指定所分配内存区域是公有的还是私有的，no-map属性指定不映射到内核区域（一般用于专有驱动），也就是说初始化时不创建内存映射，由驱动进行ioremap，reusable属性指定该区域可以存储易失性数据或缓存数据，linux,cma-default属性指定使用CMA默认的池。\n\n&emsp;&emsp;Linux4.4版本中/reserved-memory节点中保留的内存四块是给DSP和IPU用，设置为公有区域，用于与其他核通信，两块专门留给cmem驱动程序使用，默认为私有属性，只有cmem驱动能够访问。其中cmem的第一块内存为0xa0000000开始的192MB空间，第二块内存为0x40500000开始的1MB空间。\n\n```C\nreserved-memory {\n\t\t#address-cells = <0x2>;\n\t\t#size-cells = <0x2>;\n\t\tranges;\n\t\t...\n\n\t\tcmem_block_mem@a0000000 {\n\t\t\treg = <0x0 0xa0000000 0x0 0xc000000>;\n\t\t\tno-map;\n\t\t\tstatus = \"okay\";\n\t\t\tphandle = <0xef>;\n\t\t};\n\n\t\tcmem_block_mem@40500000 {\n\t\t\treg = <0x0 0x40500000 0x0 0x100000>;\n\t\t\tno-map;\n\t\t\tstatus = \"okay\";\n\t\t\tphandle = <0xf0>;\n\t\t};\n\t};\n```\n\n&emsp;&emsp;CMA预留内存的方式有三种，\n\n&emsp;&emsp;第一种：给CMA内存池分配一块固定的内存，不分配给特定的设备驱动程序，以预留的内存区域用作默认的CMA内存池。\n\n&emsp;&emsp;第二种：预留内存给特定的设备驱动使用，通常在设备树中指定好各项参数，驱动程序通过解析设备树节点来处理内存区域的属性，并且通过物理地址和大小使用memremap / ioremap等API映射内存区域使用。\n\n&emsp;&emsp;需要注意的是：事实上，多数设备驱动不能直接调用CMA API，因为它是在页和页帧编号（PFNs）上操作而无关总线地址和内核映射，并且也不提供维护缓存一致性的机制。\n\n&emsp;&emsp;第三种：通过DMA API预留内存，有的时候设备驱动程序需要采用DMA的方式使用预留的内存，对于这种场景，可以将dts中节点属性设置为shared-dma-pool，从而生成为特定设备驱动程序预留的DMA内存池。设备驱动程序仅需要以常规方式使用DMA API，无需使用默认的CMA内存池。\n\n&emsp;&emsp;一般驱动都是用第三种方式。\n\n&emsp;&emsp;另外，配置CMA内存还可以通过**命令行参数**和**内核Kbuild配置**。\n\n\n\n#### 初始化过程\n\n&emsp;&emsp;这里在配置文件中配置了CONFIG_NO_BOOTMEM选项，表示完全使用memblock内存分配器代替bootmem内存分配器。memblock内存分配器是Linux内核启动过程中早期的内存分配器，主要负责从设备树上面解析内存信息，从而确定整个系统的的内存布局，通过解析设备树节点/reserved-memory读取保留的内存范围，将每块内存信息添加到memblock.reserved内存块中的数组中，memblock.reserved中的内存都是已经分配出去的内存。armv7架构中（内核4.4）调用过程为\n\n`start_kernel()`->`setup_arch()`->`setup_machine_fdt()`->`early_init_dt_scan()`\n\n->`early_init_dt_scan_nodes`->`early_init_dt_scan_memory()`\n\n->`early_init_dt_add_memory_arch()`->`memblock_add()`\n\n&emsp;&emsp;最终通过memblock_add函数把所有内存添加到memblock.memory中，把已分配出去的内存添加到memblock.reserved中，通过memblock.memory构建起整个内存的框架。\n\n![cma](https://res.cloudinary.com/flyingcatz/image/upload/v1613225688/samples/CMA/image-20200808154317486_nznjzi.png)\n\n​\t\t\n\n&emsp;&emsp;CMA通过在启动阶段预先保留内存，这些内存叫做CMA区域或CMA上下文，这些内存需要通过CMA接口来进行分配，在进行CMA区域的初始化之前通过early_init_fdt_scan_reserved_mem()函数保留内存，它向下调用memblock_alloc_range_nid()函数，首先调用memblock_find_in_range_node()函数遍历memblock.memory内存块中的数组从中找到指定的区域分配，在通过membloc_reserve()函数将分配出去的内存添加到memblock.reserved中，最后通过kmemleak_alloc_phys()建立CMA内存区域对象，稍后返回给伙伴系统从而可以被用作正常申请使用。\n\n![cma2](https://res.cloudinary.com/flyingcatz/image/upload/v1613226912/samples/CMA/image-20200817145111816_m8nffr.png)\n\n​\t\t\n\n&emsp;&emsp;arm_memblock_init() 函数中函数调用了 early_init_fdt_scan_reserved_mem() 函数，该函数 从 DTB 中将所有预留区的信息读取出来，然后从 MEMBLOCK 分配器中申请指定长度的物理内存，并将这些预留区加入到系统预留区数组 reserved-mem[] 进行管理，以供后期内核初始化使用。\n\n&emsp;&emsp;在伙伴系统建立之前调用dma_contiguous_reserve函数对CMA区域进行初始化，通过cma_declare_contiguous()函数建立起CMA区域专有内存。\n\n&emsp;&emsp;调用过程为 \n\n`start_kernel()`->`setup_arch()`->`arm_memblock_init()`->`dma_contiguous_reserve()` \n\n->`dma_contiguous_reserve_area()`->`cma_declare_contiguous()`\n\n&emsp;&emsp;输出打印：\n\n![cma3](https://res.cloudinary.com/flyingcatz/image/upload/v1613227021/samples/CMA/image-20200810171949718_yjdmuh.png)\n\n\n\n&emsp;&emsp;接下来需要对这块区域进行初始化，如果compitable设置为\"shared-memory-pool\"，也就是将CMA区域设置为公有区域，则会调用RESERVEDMEM_OF_DECLARE宏，在\\_\\_reservedmem\\_of\\_table节中插入新的CMA区域数据，在函数中调用 \\_\\_reserved_mem_init_node() 函数遍历 \\_\\_reservedmem_of_table section, 该 section 内包含了 对预留区的初始化函数。\n\n`setup_arch()`->`arm_memblock_init()`->`early_init_fdt_scan_reserved_mem()`\n\n->`fdt_init_reserved_mem()`->`__reserved_mem_init_node`\n\n![cma4](https://res.cloudinary.com/flyingcatz/image/upload/v1613227091/samples/CMA/image-20200808161916566_ve5wvp.png)\n\n&emsp;&emsp;输出打印：\n\n![cma5](https://res.cloudinary.com/flyingcatz/image/upload/v1613227207/samples/CMA/image-20200810172634847_doptye.png)\n\n\n\n&emsp;&emsp;如果是私有的CMA区域，需要驱动程序去申请内存并进行初始化映射，而且在驱动中需要通过dma_declare_contiguous函数与对应的CMA区域绑定。\n\n![cma6](https://res.cloudinary.com/flyingcatz/image/upload/v1613227266/samples/CMA/image-20200808172920300_mj3phn.png)\n\n\n\n&emsp;&emsp;此时CMA区域已经构建完成，但页表还没有构建起来，需要为CMA区域构建页表，同样是对公有区域，私有区域需要驱动程序实现。在setup\\_arch函数中初始化完CMA区域紧接着就是paging\\_init函数，其为CMA建立对应的页表。它会向下继续调用dma_contiguous_remap函数，为cma_mmu_remap数组中每一个区域建立页表。\n\n&emsp;&emsp;调用过程为 setup\\_arch() -> paging_init() -> dma\\_contiguous\\_remap() -> flush\\_tlb\\_kernel\\_range() & iotable\\_init()\n\n![cma7](https://res.cloudinary.com/flyingcatz/image/upload/v1613227340/samples/CMA/image-20200812161305165_flc9b2.png)\n\n&emsp;&emsp;至此，CMA内存区域的初始化就完成了。\n\n\n\n#### CMA分配器初始化\n\n&emsp;&emsp;我们需要对CMA区域中的内存进行申请、释放，这些都是通过CMA分配器实现。内核初始化过程中，通过 core_initcall() 函数将该section内的初始化函数遍历执行，其中包括 CMA 的激活入口cma_init_reserved_areas()函数， 该函数遍历分配的所有CMA分区并激活每一个CMA分区。该函数向下调用cma_activate_area()函数激活每一个区域。\n\n&emsp;&emsp;调用过程 core_initcall(cma_init_reserved_areas) -> cma\\_activate\\_area()\n\n![cma8](https://res.cloudinary.com/flyingcatz/image/upload/v1613227416/samples/CMA/image-20200812163139293_hui0nn.png)\n\n\n\n&emsp;&emsp;在该函数中， 函数首先调用 kzalloc() 函数为CMA分区的bitmap所需的内存，然后调用init_cma_reserved_pageblock()函数。在该函数中，内核将 CMA 区块内的所有物理页都清除RESERVED标志，引用计数设置为0，接着按pageblock的方式设置区域内的页组迁移类型为MIGRATE_CMA。函数继续调用set_page_refcounted()函数将引用计数设置为1以及调用\\_\\_free\\_pages()函数将所有的页从CMA分配器中释放并归还给buddy管理器。最后调用adjust_managed_page_count()更新系统可用物理页总数。\n\n&emsp;&emsp;至此系统的其他部分可以开始使用CMA分配器分配的连续物理内存。\n\n![cma9](https://res.cloudinary.com/flyingcatz/image/upload/v1613227504/samples/CMA/image-20200813134715265_mpnevf.png)\n\n\n\n#### 通过CMA分配连续内存\n\n&emsp;&emsp;CMA内存的分配在多数情况下不能直接被驱动程序所调用，都是通过对dma接口进行重构，实现用dma接口访问。对分配的buffer通过dma-buf实现共享，最重要的是实现零拷贝，这里还需要说明一下dma-buf：\n\n&emsp;&emsp;dma-buf是内核中的一个子系统，实现了一个让不同设备、子系统之间进行共享缓存的统一框架。本质上是 buffer 与 file 的结合，即 dma-buf 既是块物理 buffer，又是个 linux file。buffer 是内容，file 是媒介，只有通过 file 这个媒介才能实现同一 buffer 在不同驱动之间的流转。\n\n&emsp;&emsp;dma_buf子系统包含三个主要组成:\n\n1. dma-buf对象，它代表的后端是一个sg_table结构，它暴露给应用层的接口是一个文件描述符，通过传递描述符达到了交互访问dma-buf对象，进而最终达成了共享访问sg_table的目的。\n2. fence对象, 它提供了在一个设备完成访问时发出信号的机制。\n3. reservation对象, 它负责管理缓存的分享和互斥访问。\n\n![未命名表单](https://res.cloudinary.com/flyingcatz/image/upload/v1613227603/samples/CMA/%E6%9C%AA%E5%91%BD%E5%90%8D%E8%A1%A8%E5%8D%95_ezof0e.svg)\n\n\n\n&emsp;&emsp;在CMEM驱动中，初始化过程中调用dma_declare_contiguous()函数实现cma保留内存并对其进行初始化。它会向下调用cma_declare_contiguous()函数，从而与cma接口对接起来。\n\n&emsp;&emsp;dma申请内存时有两种缓冲区映射方式，一种是一致性缓冲区映射，另一种是流式缓冲区映射，他们最大的区别就是一致性缓冲区映射可同时供多个设备访问，而流式缓冲区映射一次只能有一个设备访问。\n\n&emsp;&emsp;per-device通过dma接口申请内存时，采用标准的接口dma_alloc_coherent()，通过dma_map_ops结构体间接调用dma_alloc_from_contiguous函数，从而分配内存。\n\n&emsp;&emsp;调用过程：\n\n`dma_alloc_coherent()` --> `dma_alloc_attrs()` --> `ops()` -->`alloc()` --> `arm_coherent_dma_alloc()` --> `__dma_alloc()` --> `__alloc_from_contiguous()` --> `dma_alloc_from_contiguous()`\n\n&emsp;&emsp;这里通过dma-buf架构使用标准dma接口dma_alloc_coherent()向下调用cma接口，这个过程是通过注册dma-buf数据结构时完成的。构建dma-buf时，需要有dma_buf_ops结构体，通过DEFINE_DMA_BUF_EXPORT_INFO宏重定义exp_info结构体，最后调用dma_buf_export()函数导出，这些操作封装在cmem_dmabuf_export()函数中。\n\n![image-20200818140019342](https://res.cloudinary.com/flyingcatz/image/upload/v1613227667/samples/CMA/image-20200818140019342_xcqjez.png)\n\n\n\n&emsp;&emsp;分配内存API的另外一个接口是`dma_alloc_from_contiguous`，它是用于向下调用cma相关的操作。\n\n![image-20200812163857604](https://res.cloudinary.com/flyingcatz/image/upload/v1613227716/samples/CMA/image-20200812163857604_u0r4qq.png)\n\n&emsp;&emsp;释放内存API接口`dma_release_from_contiguous`\n\n![image-20200812164007006](https://res.cloudinary.com/flyingcatz/image/upload/v1613227747/samples/CMA/image-20200812164007006_m60zej.png)\n\n\n\n&emsp;&emsp;在CMEM的驱动中还有一个小操作就是seq_file的使用，针对proc文件的不足而诞生了Seq_file，Seq_file的实现基于proc文件，作用是将Linux内核里面常用的数据结构通过文件（主要关注proc文件）导出到用户空间。\n\n&emsp;&emsp;主要结构为：\n\n```C\nstatic struct file_operations cmem_proc_ops = {\n\t.owner = THIS_MODULE,\n\t.open = cmem_proc_open,\n\t.read = seq_read,\n\t.llseek = seq_lseek,\n\t.release = seq_release,\n};\n```\n\n&emsp;&emsp;在cmem_proc_open中调用seq_open注册cmem_seq_ops\n\n```C\nstatic struct seq_operations cmem_seq_ops = {\n\t.start = cmem_seq_start,\n\t.next = cmem_seq_next,\n\t.stop = cmem_seq_stop,\n\t.show = cmem_seq_show,\n};\n```\n\n&emsp;&emsp;需要用户实现这四个函数\n\n\n\n#### CMA 核心数据结构\n\n![image-20200818145054898](https://res.cloudinary.com/flyingcatz/image/upload/v1613227808/samples/CMA/image-20200818145054898_vwfy8d.png)\n\n&emsp;&emsp;struct cma 结构用于维护一块 CMA 区域， CMA 分配器维护着所有可用的 CMA 区域，每个 CMA 区域都是一段连续的物理内存。\n\n\n\n![image-20200818145229775](https://res.cloudinary.com/flyingcatz/image/upload/v1613227843/samples/CMA/image-20200818145229775_apd5h8.png)\n\n&emsp;&emsp;cma_areas 是一个 struct cma 数组，由于维护 CMA 分配器中可用的 CMA 区域。cma_area_count 变量用于指向当前最大可用的 CMA 区域数量。\n\n\n\n![image-20200818145706223](https://res.cloudinary.com/flyingcatz/image/upload/v1613227872/samples/CMA/image-20200818145706223_bd21qs.png)\n\n&emsp;&emsp;reserved_mem[] 数组用于维护系统早期的预留内存区。系统初始化节点会将 CMA 区域和 DMA 区域加入到该数组。reserved_mem[] 数组总共包含 MAX_RESERVED_REGIONS 个区域，reserved_mem_count 指定了最大可用的预留区数。\n\n\n\n","source":"_posts/cma.md","raw":"---\ntitle: CMA\ndate: 2021-02-13 22:55:30\ntags:\n  - Linux\n  - 内存\ncategories: Linux\n---\n\n#### 前言\n\n&emsp;&emsp;CMA（Contiguous Memory Alloctor 连续内存分配器）是Linux内存管理子系统中的一个模块，负责物理地址连续的内存分配。一般系统会在启动过程中，从整个memory中配置一段连续内存用于CMA，然后内核其他的模块可以通过CMA的接口API进行连续内存的分配，它的底层还是依赖内核伙伴系统这样的内存管理机制。\n\n<!-- more -->\n\n&emsp;&emsp;问：为什么需要CMA模块？\n\n&emsp;&emsp;在嵌入式设备中，很多设备往往需要 较大的内存缓冲区（如: 一个200万像素的高清帧摄像机，需要超过 6M 的内存)， kmalloc 内存分配机制对于这么大的内存是没有效果的。一些嵌入式设备对缓冲区 有一些额外的要求，比如： 在含有多个内存 bank 的设备中，要求只能在特定的 bank 中分配内存；而还有一些要定内存边界对齐的缓存区。近来，嵌入式设备有了较大的发展（特别是 V4L 领域），并且这些驱动都有自己的内存分配代码。CMA 框架企图采用统一的连续内存分配机制，并为这些设备驱动提供简单的API，实现定制化和模块化，而且CMA可以实现物理连续内存在不使用时这片内存能够被其他模块\"借用\"，需要的时候将其移走即可，还有就是：\n\n&emsp;&emsp;1.huge page（超过4k的页）模块分配  \n\n&emsp;&emsp;2.驱动需求，在嵌入式设备中如果没有IOMMU（设备访问的内存管理），而且DMA也不具备scatter/getter功能（IO分散聚集接口），这时必须通过CMA进行物理连续内存的分配\n\n\n\n![内存视图](https://res.cloudinary.com/flyingcatz/image/upload/v1613226806/samples/CMA/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86_udx01r.svg)\n\n\n\n#### 设备树配置\n\n&emsp;&emsp;设备树中对保留内存进行设置的参数在Documentation/devicetree/bindings/reserved-memory/reserved-memory.txt文档中有说明：\n\n&emsp;&emsp;在/reserved-memory节点中必须有#address-cells，#size-cells两个参数指定地址、大小参数的个数，ranges参数必须有，且为空。\n\n&emsp;&emsp;在/reserved-memory里面的每一个子节点都可以通过两种方式来分配内存，一种为静态方式（static allocation），用reg属性指定分配内存的地址和大小。另一种为动态方式（dynamic allocation），用size属性指定大小，alignment指定对其大小，alloc-ranges指定可接受分配的内存区域，后面两个参数是可选的，第一个参数必须有。\n\n&emsp;&emsp;子节点中还有compatible属性指定所分配内存区域是公有的还是私有的，no-map属性指定不映射到内核区域（一般用于专有驱动），也就是说初始化时不创建内存映射，由驱动进行ioremap，reusable属性指定该区域可以存储易失性数据或缓存数据，linux,cma-default属性指定使用CMA默认的池。\n\n&emsp;&emsp;Linux4.4版本中/reserved-memory节点中保留的内存四块是给DSP和IPU用，设置为公有区域，用于与其他核通信，两块专门留给cmem驱动程序使用，默认为私有属性，只有cmem驱动能够访问。其中cmem的第一块内存为0xa0000000开始的192MB空间，第二块内存为0x40500000开始的1MB空间。\n\n```C\nreserved-memory {\n\t\t#address-cells = <0x2>;\n\t\t#size-cells = <0x2>;\n\t\tranges;\n\t\t...\n\n\t\tcmem_block_mem@a0000000 {\n\t\t\treg = <0x0 0xa0000000 0x0 0xc000000>;\n\t\t\tno-map;\n\t\t\tstatus = \"okay\";\n\t\t\tphandle = <0xef>;\n\t\t};\n\n\t\tcmem_block_mem@40500000 {\n\t\t\treg = <0x0 0x40500000 0x0 0x100000>;\n\t\t\tno-map;\n\t\t\tstatus = \"okay\";\n\t\t\tphandle = <0xf0>;\n\t\t};\n\t};\n```\n\n&emsp;&emsp;CMA预留内存的方式有三种，\n\n&emsp;&emsp;第一种：给CMA内存池分配一块固定的内存，不分配给特定的设备驱动程序，以预留的内存区域用作默认的CMA内存池。\n\n&emsp;&emsp;第二种：预留内存给特定的设备驱动使用，通常在设备树中指定好各项参数，驱动程序通过解析设备树节点来处理内存区域的属性，并且通过物理地址和大小使用memremap / ioremap等API映射内存区域使用。\n\n&emsp;&emsp;需要注意的是：事实上，多数设备驱动不能直接调用CMA API，因为它是在页和页帧编号（PFNs）上操作而无关总线地址和内核映射，并且也不提供维护缓存一致性的机制。\n\n&emsp;&emsp;第三种：通过DMA API预留内存，有的时候设备驱动程序需要采用DMA的方式使用预留的内存，对于这种场景，可以将dts中节点属性设置为shared-dma-pool，从而生成为特定设备驱动程序预留的DMA内存池。设备驱动程序仅需要以常规方式使用DMA API，无需使用默认的CMA内存池。\n\n&emsp;&emsp;一般驱动都是用第三种方式。\n\n&emsp;&emsp;另外，配置CMA内存还可以通过**命令行参数**和**内核Kbuild配置**。\n\n\n\n#### 初始化过程\n\n&emsp;&emsp;这里在配置文件中配置了CONFIG_NO_BOOTMEM选项，表示完全使用memblock内存分配器代替bootmem内存分配器。memblock内存分配器是Linux内核启动过程中早期的内存分配器，主要负责从设备树上面解析内存信息，从而确定整个系统的的内存布局，通过解析设备树节点/reserved-memory读取保留的内存范围，将每块内存信息添加到memblock.reserved内存块中的数组中，memblock.reserved中的内存都是已经分配出去的内存。armv7架构中（内核4.4）调用过程为\n\n`start_kernel()`->`setup_arch()`->`setup_machine_fdt()`->`early_init_dt_scan()`\n\n->`early_init_dt_scan_nodes`->`early_init_dt_scan_memory()`\n\n->`early_init_dt_add_memory_arch()`->`memblock_add()`\n\n&emsp;&emsp;最终通过memblock_add函数把所有内存添加到memblock.memory中，把已分配出去的内存添加到memblock.reserved中，通过memblock.memory构建起整个内存的框架。\n\n![cma](https://res.cloudinary.com/flyingcatz/image/upload/v1613225688/samples/CMA/image-20200808154317486_nznjzi.png)\n\n​\t\t\n\n&emsp;&emsp;CMA通过在启动阶段预先保留内存，这些内存叫做CMA区域或CMA上下文，这些内存需要通过CMA接口来进行分配，在进行CMA区域的初始化之前通过early_init_fdt_scan_reserved_mem()函数保留内存，它向下调用memblock_alloc_range_nid()函数，首先调用memblock_find_in_range_node()函数遍历memblock.memory内存块中的数组从中找到指定的区域分配，在通过membloc_reserve()函数将分配出去的内存添加到memblock.reserved中，最后通过kmemleak_alloc_phys()建立CMA内存区域对象，稍后返回给伙伴系统从而可以被用作正常申请使用。\n\n![cma2](https://res.cloudinary.com/flyingcatz/image/upload/v1613226912/samples/CMA/image-20200817145111816_m8nffr.png)\n\n​\t\t\n\n&emsp;&emsp;arm_memblock_init() 函数中函数调用了 early_init_fdt_scan_reserved_mem() 函数，该函数 从 DTB 中将所有预留区的信息读取出来，然后从 MEMBLOCK 分配器中申请指定长度的物理内存，并将这些预留区加入到系统预留区数组 reserved-mem[] 进行管理，以供后期内核初始化使用。\n\n&emsp;&emsp;在伙伴系统建立之前调用dma_contiguous_reserve函数对CMA区域进行初始化，通过cma_declare_contiguous()函数建立起CMA区域专有内存。\n\n&emsp;&emsp;调用过程为 \n\n`start_kernel()`->`setup_arch()`->`arm_memblock_init()`->`dma_contiguous_reserve()` \n\n->`dma_contiguous_reserve_area()`->`cma_declare_contiguous()`\n\n&emsp;&emsp;输出打印：\n\n![cma3](https://res.cloudinary.com/flyingcatz/image/upload/v1613227021/samples/CMA/image-20200810171949718_yjdmuh.png)\n\n\n\n&emsp;&emsp;接下来需要对这块区域进行初始化，如果compitable设置为\"shared-memory-pool\"，也就是将CMA区域设置为公有区域，则会调用RESERVEDMEM_OF_DECLARE宏，在\\_\\_reservedmem\\_of\\_table节中插入新的CMA区域数据，在函数中调用 \\_\\_reserved_mem_init_node() 函数遍历 \\_\\_reservedmem_of_table section, 该 section 内包含了 对预留区的初始化函数。\n\n`setup_arch()`->`arm_memblock_init()`->`early_init_fdt_scan_reserved_mem()`\n\n->`fdt_init_reserved_mem()`->`__reserved_mem_init_node`\n\n![cma4](https://res.cloudinary.com/flyingcatz/image/upload/v1613227091/samples/CMA/image-20200808161916566_ve5wvp.png)\n\n&emsp;&emsp;输出打印：\n\n![cma5](https://res.cloudinary.com/flyingcatz/image/upload/v1613227207/samples/CMA/image-20200810172634847_doptye.png)\n\n\n\n&emsp;&emsp;如果是私有的CMA区域，需要驱动程序去申请内存并进行初始化映射，而且在驱动中需要通过dma_declare_contiguous函数与对应的CMA区域绑定。\n\n![cma6](https://res.cloudinary.com/flyingcatz/image/upload/v1613227266/samples/CMA/image-20200808172920300_mj3phn.png)\n\n\n\n&emsp;&emsp;此时CMA区域已经构建完成，但页表还没有构建起来，需要为CMA区域构建页表，同样是对公有区域，私有区域需要驱动程序实现。在setup\\_arch函数中初始化完CMA区域紧接着就是paging\\_init函数，其为CMA建立对应的页表。它会向下继续调用dma_contiguous_remap函数，为cma_mmu_remap数组中每一个区域建立页表。\n\n&emsp;&emsp;调用过程为 setup\\_arch() -> paging_init() -> dma\\_contiguous\\_remap() -> flush\\_tlb\\_kernel\\_range() & iotable\\_init()\n\n![cma7](https://res.cloudinary.com/flyingcatz/image/upload/v1613227340/samples/CMA/image-20200812161305165_flc9b2.png)\n\n&emsp;&emsp;至此，CMA内存区域的初始化就完成了。\n\n\n\n#### CMA分配器初始化\n\n&emsp;&emsp;我们需要对CMA区域中的内存进行申请、释放，这些都是通过CMA分配器实现。内核初始化过程中，通过 core_initcall() 函数将该section内的初始化函数遍历执行，其中包括 CMA 的激活入口cma_init_reserved_areas()函数， 该函数遍历分配的所有CMA分区并激活每一个CMA分区。该函数向下调用cma_activate_area()函数激活每一个区域。\n\n&emsp;&emsp;调用过程 core_initcall(cma_init_reserved_areas) -> cma\\_activate\\_area()\n\n![cma8](https://res.cloudinary.com/flyingcatz/image/upload/v1613227416/samples/CMA/image-20200812163139293_hui0nn.png)\n\n\n\n&emsp;&emsp;在该函数中， 函数首先调用 kzalloc() 函数为CMA分区的bitmap所需的内存，然后调用init_cma_reserved_pageblock()函数。在该函数中，内核将 CMA 区块内的所有物理页都清除RESERVED标志，引用计数设置为0，接着按pageblock的方式设置区域内的页组迁移类型为MIGRATE_CMA。函数继续调用set_page_refcounted()函数将引用计数设置为1以及调用\\_\\_free\\_pages()函数将所有的页从CMA分配器中释放并归还给buddy管理器。最后调用adjust_managed_page_count()更新系统可用物理页总数。\n\n&emsp;&emsp;至此系统的其他部分可以开始使用CMA分配器分配的连续物理内存。\n\n![cma9](https://res.cloudinary.com/flyingcatz/image/upload/v1613227504/samples/CMA/image-20200813134715265_mpnevf.png)\n\n\n\n#### 通过CMA分配连续内存\n\n&emsp;&emsp;CMA内存的分配在多数情况下不能直接被驱动程序所调用，都是通过对dma接口进行重构，实现用dma接口访问。对分配的buffer通过dma-buf实现共享，最重要的是实现零拷贝，这里还需要说明一下dma-buf：\n\n&emsp;&emsp;dma-buf是内核中的一个子系统，实现了一个让不同设备、子系统之间进行共享缓存的统一框架。本质上是 buffer 与 file 的结合，即 dma-buf 既是块物理 buffer，又是个 linux file。buffer 是内容，file 是媒介，只有通过 file 这个媒介才能实现同一 buffer 在不同驱动之间的流转。\n\n&emsp;&emsp;dma_buf子系统包含三个主要组成:\n\n1. dma-buf对象，它代表的后端是一个sg_table结构，它暴露给应用层的接口是一个文件描述符，通过传递描述符达到了交互访问dma-buf对象，进而最终达成了共享访问sg_table的目的。\n2. fence对象, 它提供了在一个设备完成访问时发出信号的机制。\n3. reservation对象, 它负责管理缓存的分享和互斥访问。\n\n![未命名表单](https://res.cloudinary.com/flyingcatz/image/upload/v1613227603/samples/CMA/%E6%9C%AA%E5%91%BD%E5%90%8D%E8%A1%A8%E5%8D%95_ezof0e.svg)\n\n\n\n&emsp;&emsp;在CMEM驱动中，初始化过程中调用dma_declare_contiguous()函数实现cma保留内存并对其进行初始化。它会向下调用cma_declare_contiguous()函数，从而与cma接口对接起来。\n\n&emsp;&emsp;dma申请内存时有两种缓冲区映射方式，一种是一致性缓冲区映射，另一种是流式缓冲区映射，他们最大的区别就是一致性缓冲区映射可同时供多个设备访问，而流式缓冲区映射一次只能有一个设备访问。\n\n&emsp;&emsp;per-device通过dma接口申请内存时，采用标准的接口dma_alloc_coherent()，通过dma_map_ops结构体间接调用dma_alloc_from_contiguous函数，从而分配内存。\n\n&emsp;&emsp;调用过程：\n\n`dma_alloc_coherent()` --> `dma_alloc_attrs()` --> `ops()` -->`alloc()` --> `arm_coherent_dma_alloc()` --> `__dma_alloc()` --> `__alloc_from_contiguous()` --> `dma_alloc_from_contiguous()`\n\n&emsp;&emsp;这里通过dma-buf架构使用标准dma接口dma_alloc_coherent()向下调用cma接口，这个过程是通过注册dma-buf数据结构时完成的。构建dma-buf时，需要有dma_buf_ops结构体，通过DEFINE_DMA_BUF_EXPORT_INFO宏重定义exp_info结构体，最后调用dma_buf_export()函数导出，这些操作封装在cmem_dmabuf_export()函数中。\n\n![image-20200818140019342](https://res.cloudinary.com/flyingcatz/image/upload/v1613227667/samples/CMA/image-20200818140019342_xcqjez.png)\n\n\n\n&emsp;&emsp;分配内存API的另外一个接口是`dma_alloc_from_contiguous`，它是用于向下调用cma相关的操作。\n\n![image-20200812163857604](https://res.cloudinary.com/flyingcatz/image/upload/v1613227716/samples/CMA/image-20200812163857604_u0r4qq.png)\n\n&emsp;&emsp;释放内存API接口`dma_release_from_contiguous`\n\n![image-20200812164007006](https://res.cloudinary.com/flyingcatz/image/upload/v1613227747/samples/CMA/image-20200812164007006_m60zej.png)\n\n\n\n&emsp;&emsp;在CMEM的驱动中还有一个小操作就是seq_file的使用，针对proc文件的不足而诞生了Seq_file，Seq_file的实现基于proc文件，作用是将Linux内核里面常用的数据结构通过文件（主要关注proc文件）导出到用户空间。\n\n&emsp;&emsp;主要结构为：\n\n```C\nstatic struct file_operations cmem_proc_ops = {\n\t.owner = THIS_MODULE,\n\t.open = cmem_proc_open,\n\t.read = seq_read,\n\t.llseek = seq_lseek,\n\t.release = seq_release,\n};\n```\n\n&emsp;&emsp;在cmem_proc_open中调用seq_open注册cmem_seq_ops\n\n```C\nstatic struct seq_operations cmem_seq_ops = {\n\t.start = cmem_seq_start,\n\t.next = cmem_seq_next,\n\t.stop = cmem_seq_stop,\n\t.show = cmem_seq_show,\n};\n```\n\n&emsp;&emsp;需要用户实现这四个函数\n\n\n\n#### CMA 核心数据结构\n\n![image-20200818145054898](https://res.cloudinary.com/flyingcatz/image/upload/v1613227808/samples/CMA/image-20200818145054898_vwfy8d.png)\n\n&emsp;&emsp;struct cma 结构用于维护一块 CMA 区域， CMA 分配器维护着所有可用的 CMA 区域，每个 CMA 区域都是一段连续的物理内存。\n\n\n\n![image-20200818145229775](https://res.cloudinary.com/flyingcatz/image/upload/v1613227843/samples/CMA/image-20200818145229775_apd5h8.png)\n\n&emsp;&emsp;cma_areas 是一个 struct cma 数组，由于维护 CMA 分配器中可用的 CMA 区域。cma_area_count 变量用于指向当前最大可用的 CMA 区域数量。\n\n\n\n![image-20200818145706223](https://res.cloudinary.com/flyingcatz/image/upload/v1613227872/samples/CMA/image-20200818145706223_bd21qs.png)\n\n&emsp;&emsp;reserved_mem[] 数组用于维护系统早期的预留内存区。系统初始化节点会将 CMA 区域和 DMA 区域加入到该数组。reserved_mem[] 数组总共包含 MAX_RESERVED_REGIONS 个区域，reserved_mem_count 指定了最大可用的预留区数。\n\n\n\n","slug":"cma","published":1,"updated":"2021-02-13T07:23:25.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8xu0000q5dimbxinyuc","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;CMA（Contiguous Memory Alloctor 连续内存分配器）是Linux内存管理子系统中的一个模块，负责物理地址连续的内存分配。一般系统会在启动过程中，从整个memory中配置一段连续内存用于CMA，然后内核其他的模块可以通过CMA的接口API进行连续内存的分配，它的底层还是依赖内核伙伴系统这样的内存管理机制。</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;问：为什么需要CMA模块？</p>\n<p>&emsp;&emsp;在嵌入式设备中，很多设备往往需要 较大的内存缓冲区（如: 一个200万像素的高清帧摄像机，需要超过 6M 的内存)， kmalloc 内存分配机制对于这么大的内存是没有效果的。一些嵌入式设备对缓冲区 有一些额外的要求，比如： 在含有多个内存 bank 的设备中，要求只能在特定的 bank 中分配内存；而还有一些要定内存边界对齐的缓存区。近来，嵌入式设备有了较大的发展（特别是 V4L 领域），并且这些驱动都有自己的内存分配代码。CMA 框架企图采用统一的连续内存分配机制，并为这些设备驱动提供简单的API，实现定制化和模块化，而且CMA可以实现物理连续内存在不使用时这片内存能够被其他模块”借用”，需要的时候将其移走即可，还有就是：</p>\n<p>&emsp;&emsp;1.huge page（超过4k的页）模块分配  </p>\n<p>&emsp;&emsp;2.驱动需求，在嵌入式设备中如果没有IOMMU（设备访问的内存管理），而且DMA也不具备scatter/getter功能（IO分散聚集接口），这时必须通过CMA进行物理连续内存的分配</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613226806/samples/CMA/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86_udx01r.svg\" alt=\"内存视图\"></p>\n<h4 id=\"设备树配置\"><a href=\"#设备树配置\" class=\"headerlink\" title=\"设备树配置\"></a>设备树配置</h4><p>&emsp;&emsp;设备树中对保留内存进行设置的参数在Documentation/devicetree/bindings/reserved-memory/reserved-memory.txt文档中有说明：</p>\n<p>&emsp;&emsp;在/reserved-memory节点中必须有#address-cells，#size-cells两个参数指定地址、大小参数的个数，ranges参数必须有，且为空。</p>\n<p>&emsp;&emsp;在/reserved-memory里面的每一个子节点都可以通过两种方式来分配内存，一种为静态方式（static allocation），用reg属性指定分配内存的地址和大小。另一种为动态方式（dynamic allocation），用size属性指定大小，alignment指定对其大小，alloc-ranges指定可接受分配的内存区域，后面两个参数是可选的，第一个参数必须有。</p>\n<p>&emsp;&emsp;子节点中还有compatible属性指定所分配内存区域是公有的还是私有的，no-map属性指定不映射到内核区域（一般用于专有驱动），也就是说初始化时不创建内存映射，由驱动进行ioremap，reusable属性指定该区域可以存储易失性数据或缓存数据，linux,cma-default属性指定使用CMA默认的池。</p>\n<p>&emsp;&emsp;Linux4.4版本中/reserved-memory节点中保留的内存四块是给DSP和IPU用，设置为公有区域，用于与其他核通信，两块专门留给cmem驱动程序使用，默认为私有属性，只有cmem驱动能够访问。其中cmem的第一块内存为0xa0000000开始的192MB空间，第二块内存为0x40500000开始的1MB空间。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reserved-memory &#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">#address-cells = <span class=\"meta-string\">&lt;0x2&gt;;</span></span></span><br><span class=\"line\">\t\t<span class=\"meta\">#size-cells = <span class=\"meta-string\">&lt;0x2&gt;;</span></span></span><br><span class=\"line\">\t\tranges;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcmem_block_mem@a0000000 &#123;</span><br><span class=\"line\">\t\t\treg = &lt;<span class=\"number\">0x0</span> <span class=\"number\">0xa0000000</span> <span class=\"number\">0x0</span> <span class=\"number\">0xc000000</span>&gt;;</span><br><span class=\"line\">\t\t\tno-<span class=\"built_in\">map</span>;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"okay\"</span>;</span><br><span class=\"line\">\t\t\tphandle = &lt;<span class=\"number\">0xef</span>&gt;;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcmem_block_mem@<span class=\"number\">40500000</span> &#123;</span><br><span class=\"line\">\t\t\treg = &lt;<span class=\"number\">0x0</span> <span class=\"number\">0x40500000</span> <span class=\"number\">0x0</span> <span class=\"number\">0x100000</span>&gt;;</span><br><span class=\"line\">\t\t\tno-<span class=\"built_in\">map</span>;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"okay\"</span>;</span><br><span class=\"line\">\t\t\tphandle = &lt;<span class=\"number\">0xf0</span>&gt;;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;CMA预留内存的方式有三种，</p>\n<p>&emsp;&emsp;第一种：给CMA内存池分配一块固定的内存，不分配给特定的设备驱动程序，以预留的内存区域用作默认的CMA内存池。</p>\n<p>&emsp;&emsp;第二种：预留内存给特定的设备驱动使用，通常在设备树中指定好各项参数，驱动程序通过解析设备树节点来处理内存区域的属性，并且通过物理地址和大小使用memremap / ioremap等API映射内存区域使用。</p>\n<p>&emsp;&emsp;需要注意的是：事实上，多数设备驱动不能直接调用CMA API，因为它是在页和页帧编号（PFNs）上操作而无关总线地址和内核映射，并且也不提供维护缓存一致性的机制。</p>\n<p>&emsp;&emsp;第三种：通过DMA API预留内存，有的时候设备驱动程序需要采用DMA的方式使用预留的内存，对于这种场景，可以将dts中节点属性设置为shared-dma-pool，从而生成为特定设备驱动程序预留的DMA内存池。设备驱动程序仅需要以常规方式使用DMA API，无需使用默认的CMA内存池。</p>\n<p>&emsp;&emsp;一般驱动都是用第三种方式。</p>\n<p>&emsp;&emsp;另外，配置CMA内存还可以通过<strong>命令行参数</strong>和<strong>内核Kbuild配置</strong>。</p>\n<h4 id=\"初始化过程\"><a href=\"#初始化过程\" class=\"headerlink\" title=\"初始化过程\"></a>初始化过程</h4><p>&emsp;&emsp;这里在配置文件中配置了CONFIG_NO_BOOTMEM选项，表示完全使用memblock内存分配器代替bootmem内存分配器。memblock内存分配器是Linux内核启动过程中早期的内存分配器，主要负责从设备树上面解析内存信息，从而确定整个系统的的内存布局，通过解析设备树节点/reserved-memory读取保留的内存范围，将每块内存信息添加到memblock.reserved内存块中的数组中，memblock.reserved中的内存都是已经分配出去的内存。armv7架构中（内核4.4）调用过程为</p>\n<p><code>start_kernel()</code>-&gt;<code>setup_arch()</code>-&gt;<code>setup_machine_fdt()</code>-&gt;<code>early_init_dt_scan()</code></p>\n<p>-&gt;<code>early_init_dt_scan_nodes</code>-&gt;<code>early_init_dt_scan_memory()</code></p>\n<p>-&gt;<code>early_init_dt_add_memory_arch()</code>-&gt;<code>memblock_add()</code></p>\n<p>&emsp;&emsp;最终通过memblock_add函数把所有内存添加到memblock.memory中，把已分配出去的内存添加到memblock.reserved中，通过memblock.memory构建起整个内存的框架。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613225688/samples/CMA/image-20200808154317486_nznjzi.png\" alt=\"cma\"></p>\n<p>​        </p>\n<p>&emsp;&emsp;CMA通过在启动阶段预先保留内存，这些内存叫做CMA区域或CMA上下文，这些内存需要通过CMA接口来进行分配，在进行CMA区域的初始化之前通过early_init_fdt_scan_reserved_mem()函数保留内存，它向下调用memblock_alloc_range_nid()函数，首先调用memblock_find_in_range_node()函数遍历memblock.memory内存块中的数组从中找到指定的区域分配，在通过membloc_reserve()函数将分配出去的内存添加到memblock.reserved中，最后通过kmemleak_alloc_phys()建立CMA内存区域对象，稍后返回给伙伴系统从而可以被用作正常申请使用。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613226912/samples/CMA/image-20200817145111816_m8nffr.png\" alt=\"cma2\"></p>\n<p>​        </p>\n<p>&emsp;&emsp;arm_memblock_init() 函数中函数调用了 early_init_fdt_scan_reserved_mem() 函数，该函数 从 DTB 中将所有预留区的信息读取出来，然后从 MEMBLOCK 分配器中申请指定长度的物理内存，并将这些预留区加入到系统预留区数组 reserved-mem[] 进行管理，以供后期内核初始化使用。</p>\n<p>&emsp;&emsp;在伙伴系统建立之前调用dma_contiguous_reserve函数对CMA区域进行初始化，通过cma_declare_contiguous()函数建立起CMA区域专有内存。</p>\n<p>&emsp;&emsp;调用过程为 </p>\n<p><code>start_kernel()</code>-&gt;<code>setup_arch()</code>-&gt;<code>arm_memblock_init()</code>-&gt;<code>dma_contiguous_reserve()</code> </p>\n<p>-&gt;<code>dma_contiguous_reserve_area()</code>-&gt;<code>cma_declare_contiguous()</code></p>\n<p>&emsp;&emsp;输出打印：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227021/samples/CMA/image-20200810171949718_yjdmuh.png\" alt=\"cma3\"></p>\n<p>&emsp;&emsp;接下来需要对这块区域进行初始化，如果compitable设置为”shared-memory-pool”，也就是将CMA区域设置为公有区域，则会调用RESERVEDMEM_OF_DECLARE宏，在__reservedmem_of_table节中插入新的CMA区域数据，在函数中调用 __reserved_mem_init_node() 函数遍历 __reservedmem_of_table section, 该 section 内包含了 对预留区的初始化函数。</p>\n<p><code>setup_arch()</code>-&gt;<code>arm_memblock_init()</code>-&gt;<code>early_init_fdt_scan_reserved_mem()</code></p>\n<p>-&gt;<code>fdt_init_reserved_mem()</code>-&gt;<code>__reserved_mem_init_node</code></p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227091/samples/CMA/image-20200808161916566_ve5wvp.png\" alt=\"cma4\"></p>\n<p>&emsp;&emsp;输出打印：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227207/samples/CMA/image-20200810172634847_doptye.png\" alt=\"cma5\"></p>\n<p>&emsp;&emsp;如果是私有的CMA区域，需要驱动程序去申请内存并进行初始化映射，而且在驱动中需要通过dma_declare_contiguous函数与对应的CMA区域绑定。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227266/samples/CMA/image-20200808172920300_mj3phn.png\" alt=\"cma6\"></p>\n<p>&emsp;&emsp;此时CMA区域已经构建完成，但页表还没有构建起来，需要为CMA区域构建页表，同样是对公有区域，私有区域需要驱动程序实现。在setup_arch函数中初始化完CMA区域紧接着就是paging_init函数，其为CMA建立对应的页表。它会向下继续调用dma_contiguous_remap函数，为cma_mmu_remap数组中每一个区域建立页表。</p>\n<p>&emsp;&emsp;调用过程为 setup_arch() -&gt; paging_init() -&gt; dma_contiguous_remap() -&gt; flush_tlb_kernel_range() &amp; iotable_init()</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227340/samples/CMA/image-20200812161305165_flc9b2.png\" alt=\"cma7\"></p>\n<p>&emsp;&emsp;至此，CMA内存区域的初始化就完成了。</p>\n<h4 id=\"CMA分配器初始化\"><a href=\"#CMA分配器初始化\" class=\"headerlink\" title=\"CMA分配器初始化\"></a>CMA分配器初始化</h4><p>&emsp;&emsp;我们需要对CMA区域中的内存进行申请、释放，这些都是通过CMA分配器实现。内核初始化过程中，通过 core_initcall() 函数将该section内的初始化函数遍历执行，其中包括 CMA 的激活入口cma_init_reserved_areas()函数， 该函数遍历分配的所有CMA分区并激活每一个CMA分区。该函数向下调用cma_activate_area()函数激活每一个区域。</p>\n<p>&emsp;&emsp;调用过程 core_initcall(cma_init_reserved_areas) -&gt; cma_activate_area()</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227416/samples/CMA/image-20200812163139293_hui0nn.png\" alt=\"cma8\"></p>\n<p>&emsp;&emsp;在该函数中， 函数首先调用 kzalloc() 函数为CMA分区的bitmap所需的内存，然后调用init_cma_reserved_pageblock()函数。在该函数中，内核将 CMA 区块内的所有物理页都清除RESERVED标志，引用计数设置为0，接着按pageblock的方式设置区域内的页组迁移类型为MIGRATE_CMA。函数继续调用set_page_refcounted()函数将引用计数设置为1以及调用__free_pages()函数将所有的页从CMA分配器中释放并归还给buddy管理器。最后调用adjust_managed_page_count()更新系统可用物理页总数。</p>\n<p>&emsp;&emsp;至此系统的其他部分可以开始使用CMA分配器分配的连续物理内存。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227504/samples/CMA/image-20200813134715265_mpnevf.png\" alt=\"cma9\"></p>\n<h4 id=\"通过CMA分配连续内存\"><a href=\"#通过CMA分配连续内存\" class=\"headerlink\" title=\"通过CMA分配连续内存\"></a>通过CMA分配连续内存</h4><p>&emsp;&emsp;CMA内存的分配在多数情况下不能直接被驱动程序所调用，都是通过对dma接口进行重构，实现用dma接口访问。对分配的buffer通过dma-buf实现共享，最重要的是实现零拷贝，这里还需要说明一下dma-buf：</p>\n<p>&emsp;&emsp;dma-buf是内核中的一个子系统，实现了一个让不同设备、子系统之间进行共享缓存的统一框架。本质上是 buffer 与 file 的结合，即 dma-buf 既是块物理 buffer，又是个 linux file。buffer 是内容，file 是媒介，只有通过 file 这个媒介才能实现同一 buffer 在不同驱动之间的流转。</p>\n<p>&emsp;&emsp;dma_buf子系统包含三个主要组成:</p>\n<ol>\n<li>dma-buf对象，它代表的后端是一个sg_table结构，它暴露给应用层的接口是一个文件描述符，通过传递描述符达到了交互访问dma-buf对象，进而最终达成了共享访问sg_table的目的。</li>\n<li>fence对象, 它提供了在一个设备完成访问时发出信号的机制。</li>\n<li>reservation对象, 它负责管理缓存的分享和互斥访问。</li>\n</ol>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227603/samples/CMA/%E6%9C%AA%E5%91%BD%E5%90%8D%E8%A1%A8%E5%8D%95_ezof0e.svg\" alt=\"未命名表单\"></p>\n<p>&emsp;&emsp;在CMEM驱动中，初始化过程中调用dma_declare_contiguous()函数实现cma保留内存并对其进行初始化。它会向下调用cma_declare_contiguous()函数，从而与cma接口对接起来。</p>\n<p>&emsp;&emsp;dma申请内存时有两种缓冲区映射方式，一种是一致性缓冲区映射，另一种是流式缓冲区映射，他们最大的区别就是一致性缓冲区映射可同时供多个设备访问，而流式缓冲区映射一次只能有一个设备访问。</p>\n<p>&emsp;&emsp;per-device通过dma接口申请内存时，采用标准的接口dma_alloc_coherent()，通过dma_map_ops结构体间接调用dma_alloc_from_contiguous函数，从而分配内存。</p>\n<p>&emsp;&emsp;调用过程：</p>\n<p><code>dma_alloc_coherent()</code> –&gt; <code>dma_alloc_attrs()</code> –&gt; <code>ops()</code> –&gt;<code>alloc()</code> –&gt; <code>arm_coherent_dma_alloc()</code> –&gt; <code>__dma_alloc()</code> –&gt; <code>__alloc_from_contiguous()</code> –&gt; <code>dma_alloc_from_contiguous()</code></p>\n<p>&emsp;&emsp;这里通过dma-buf架构使用标准dma接口dma_alloc_coherent()向下调用cma接口，这个过程是通过注册dma-buf数据结构时完成的。构建dma-buf时，需要有dma_buf_ops结构体，通过DEFINE_DMA_BUF_EXPORT_INFO宏重定义exp_info结构体，最后调用dma_buf_export()函数导出，这些操作封装在cmem_dmabuf_export()函数中。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227667/samples/CMA/image-20200818140019342_xcqjez.png\" alt=\"image-20200818140019342\"></p>\n<p>&emsp;&emsp;分配内存API的另外一个接口是<code>dma_alloc_from_contiguous</code>，它是用于向下调用cma相关的操作。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227716/samples/CMA/image-20200812163857604_u0r4qq.png\" alt=\"image-20200812163857604\"></p>\n<p>&emsp;&emsp;释放内存API接口<code>dma_release_from_contiguous</code></p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227747/samples/CMA/image-20200812164007006_m60zej.png\" alt=\"image-20200812164007006\"></p>\n<p>&emsp;&emsp;在CMEM的驱动中还有一个小操作就是seq_file的使用，针对proc文件的不足而诞生了Seq_file，Seq_file的实现基于proc文件，作用是将Linux内核里面常用的数据结构通过文件（主要关注proc文件）导出到用户空间。</p>\n<p>&emsp;&emsp;主要结构为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file_operations</span> <span class=\"title\">cmem_proc_ops</span> = &#123;</span></span><br><span class=\"line\">\t.owner = THIS_MODULE,</span><br><span class=\"line\">\t.open = cmem_proc_open,</span><br><span class=\"line\">\t.read = seq_read,</span><br><span class=\"line\">\t.llseek = seq_lseek,</span><br><span class=\"line\">\t.release = seq_release,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在cmem_proc_open中调用seq_open注册cmem_seq_ops</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">seq_operations</span> <span class=\"title\">cmem_seq_ops</span> = &#123;</span></span><br><span class=\"line\">\t.start = cmem_seq_start,</span><br><span class=\"line\">\t.next = cmem_seq_next,</span><br><span class=\"line\">\t.stop = cmem_seq_stop,</span><br><span class=\"line\">\t.show = cmem_seq_show,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;需要用户实现这四个函数</p>\n<h4 id=\"CMA-核心数据结构\"><a href=\"#CMA-核心数据结构\" class=\"headerlink\" title=\"CMA 核心数据结构\"></a>CMA 核心数据结构</h4><p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227808/samples/CMA/image-20200818145054898_vwfy8d.png\" alt=\"image-20200818145054898\"></p>\n<p>&emsp;&emsp;struct cma 结构用于维护一块 CMA 区域， CMA 分配器维护着所有可用的 CMA 区域，每个 CMA 区域都是一段连续的物理内存。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227843/samples/CMA/image-20200818145229775_apd5h8.png\" alt=\"image-20200818145229775\"></p>\n<p>&emsp;&emsp;cma_areas 是一个 struct cma 数组，由于维护 CMA 分配器中可用的 CMA 区域。cma_area_count 变量用于指向当前最大可用的 CMA 区域数量。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227872/samples/CMA/image-20200818145706223_bd21qs.png\" alt=\"image-20200818145706223\"></p>\n<p>&emsp;&emsp;reserved_mem[] 数组用于维护系统早期的预留内存区。系统初始化节点会将 CMA 区域和 DMA 区域加入到该数组。reserved_mem[] 数组总共包含 MAX_RESERVED_REGIONS 个区域，reserved_mem_count 指定了最大可用的预留区数。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;CMA（Contiguous Memory Alloctor 连续内存分配器）是Linux内存管理子系统中的一个模块，负责物理地址连续的内存分配。一般系统会在启动过程中，从整个memory中配置一段连续内存用于CMA，然后内核其他的模块可以通过CMA的接口API进行连续内存的分配，它的底层还是依赖内核伙伴系统这样的内存管理机制。</p>","more":"<p>&emsp;&emsp;问：为什么需要CMA模块？</p>\n<p>&emsp;&emsp;在嵌入式设备中，很多设备往往需要 较大的内存缓冲区（如: 一个200万像素的高清帧摄像机，需要超过 6M 的内存)， kmalloc 内存分配机制对于这么大的内存是没有效果的。一些嵌入式设备对缓冲区 有一些额外的要求，比如： 在含有多个内存 bank 的设备中，要求只能在特定的 bank 中分配内存；而还有一些要定内存边界对齐的缓存区。近来，嵌入式设备有了较大的发展（特别是 V4L 领域），并且这些驱动都有自己的内存分配代码。CMA 框架企图采用统一的连续内存分配机制，并为这些设备驱动提供简单的API，实现定制化和模块化，而且CMA可以实现物理连续内存在不使用时这片内存能够被其他模块”借用”，需要的时候将其移走即可，还有就是：</p>\n<p>&emsp;&emsp;1.huge page（超过4k的页）模块分配  </p>\n<p>&emsp;&emsp;2.驱动需求，在嵌入式设备中如果没有IOMMU（设备访问的内存管理），而且DMA也不具备scatter/getter功能（IO分散聚集接口），这时必须通过CMA进行物理连续内存的分配</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613226806/samples/CMA/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86_udx01r.svg\" alt=\"内存视图\"></p>\n<h4 id=\"设备树配置\"><a href=\"#设备树配置\" class=\"headerlink\" title=\"设备树配置\"></a>设备树配置</h4><p>&emsp;&emsp;设备树中对保留内存进行设置的参数在Documentation/devicetree/bindings/reserved-memory/reserved-memory.txt文档中有说明：</p>\n<p>&emsp;&emsp;在/reserved-memory节点中必须有#address-cells，#size-cells两个参数指定地址、大小参数的个数，ranges参数必须有，且为空。</p>\n<p>&emsp;&emsp;在/reserved-memory里面的每一个子节点都可以通过两种方式来分配内存，一种为静态方式（static allocation），用reg属性指定分配内存的地址和大小。另一种为动态方式（dynamic allocation），用size属性指定大小，alignment指定对其大小，alloc-ranges指定可接受分配的内存区域，后面两个参数是可选的，第一个参数必须有。</p>\n<p>&emsp;&emsp;子节点中还有compatible属性指定所分配内存区域是公有的还是私有的，no-map属性指定不映射到内核区域（一般用于专有驱动），也就是说初始化时不创建内存映射，由驱动进行ioremap，reusable属性指定该区域可以存储易失性数据或缓存数据，linux,cma-default属性指定使用CMA默认的池。</p>\n<p>&emsp;&emsp;Linux4.4版本中/reserved-memory节点中保留的内存四块是给DSP和IPU用，设置为公有区域，用于与其他核通信，两块专门留给cmem驱动程序使用，默认为私有属性，只有cmem驱动能够访问。其中cmem的第一块内存为0xa0000000开始的192MB空间，第二块内存为0x40500000开始的1MB空间。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reserved-memory &#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">#address-cells = <span class=\"meta-string\">&lt;0x2&gt;;</span></span></span><br><span class=\"line\">\t\t<span class=\"meta\">#size-cells = <span class=\"meta-string\">&lt;0x2&gt;;</span></span></span><br><span class=\"line\">\t\tranges;</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcmem_block_mem@a0000000 &#123;</span><br><span class=\"line\">\t\t\treg = &lt;<span class=\"number\">0x0</span> <span class=\"number\">0xa0000000</span> <span class=\"number\">0x0</span> <span class=\"number\">0xc000000</span>&gt;;</span><br><span class=\"line\">\t\t\tno-<span class=\"built_in\">map</span>;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"okay\"</span>;</span><br><span class=\"line\">\t\t\tphandle = &lt;<span class=\"number\">0xef</span>&gt;;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcmem_block_mem@<span class=\"number\">40500000</span> &#123;</span><br><span class=\"line\">\t\t\treg = &lt;<span class=\"number\">0x0</span> <span class=\"number\">0x40500000</span> <span class=\"number\">0x0</span> <span class=\"number\">0x100000</span>&gt;;</span><br><span class=\"line\">\t\t\tno-<span class=\"built_in\">map</span>;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"okay\"</span>;</span><br><span class=\"line\">\t\t\tphandle = &lt;<span class=\"number\">0xf0</span>&gt;;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;CMA预留内存的方式有三种，</p>\n<p>&emsp;&emsp;第一种：给CMA内存池分配一块固定的内存，不分配给特定的设备驱动程序，以预留的内存区域用作默认的CMA内存池。</p>\n<p>&emsp;&emsp;第二种：预留内存给特定的设备驱动使用，通常在设备树中指定好各项参数，驱动程序通过解析设备树节点来处理内存区域的属性，并且通过物理地址和大小使用memremap / ioremap等API映射内存区域使用。</p>\n<p>&emsp;&emsp;需要注意的是：事实上，多数设备驱动不能直接调用CMA API，因为它是在页和页帧编号（PFNs）上操作而无关总线地址和内核映射，并且也不提供维护缓存一致性的机制。</p>\n<p>&emsp;&emsp;第三种：通过DMA API预留内存，有的时候设备驱动程序需要采用DMA的方式使用预留的内存，对于这种场景，可以将dts中节点属性设置为shared-dma-pool，从而生成为特定设备驱动程序预留的DMA内存池。设备驱动程序仅需要以常规方式使用DMA API，无需使用默认的CMA内存池。</p>\n<p>&emsp;&emsp;一般驱动都是用第三种方式。</p>\n<p>&emsp;&emsp;另外，配置CMA内存还可以通过<strong>命令行参数</strong>和<strong>内核Kbuild配置</strong>。</p>\n<h4 id=\"初始化过程\"><a href=\"#初始化过程\" class=\"headerlink\" title=\"初始化过程\"></a>初始化过程</h4><p>&emsp;&emsp;这里在配置文件中配置了CONFIG_NO_BOOTMEM选项，表示完全使用memblock内存分配器代替bootmem内存分配器。memblock内存分配器是Linux内核启动过程中早期的内存分配器，主要负责从设备树上面解析内存信息，从而确定整个系统的的内存布局，通过解析设备树节点/reserved-memory读取保留的内存范围，将每块内存信息添加到memblock.reserved内存块中的数组中，memblock.reserved中的内存都是已经分配出去的内存。armv7架构中（内核4.4）调用过程为</p>\n<p><code>start_kernel()</code>-&gt;<code>setup_arch()</code>-&gt;<code>setup_machine_fdt()</code>-&gt;<code>early_init_dt_scan()</code></p>\n<p>-&gt;<code>early_init_dt_scan_nodes</code>-&gt;<code>early_init_dt_scan_memory()</code></p>\n<p>-&gt;<code>early_init_dt_add_memory_arch()</code>-&gt;<code>memblock_add()</code></p>\n<p>&emsp;&emsp;最终通过memblock_add函数把所有内存添加到memblock.memory中，把已分配出去的内存添加到memblock.reserved中，通过memblock.memory构建起整个内存的框架。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613225688/samples/CMA/image-20200808154317486_nznjzi.png\" alt=\"cma\"></p>\n<p>​        </p>\n<p>&emsp;&emsp;CMA通过在启动阶段预先保留内存，这些内存叫做CMA区域或CMA上下文，这些内存需要通过CMA接口来进行分配，在进行CMA区域的初始化之前通过early_init_fdt_scan_reserved_mem()函数保留内存，它向下调用memblock_alloc_range_nid()函数，首先调用memblock_find_in_range_node()函数遍历memblock.memory内存块中的数组从中找到指定的区域分配，在通过membloc_reserve()函数将分配出去的内存添加到memblock.reserved中，最后通过kmemleak_alloc_phys()建立CMA内存区域对象，稍后返回给伙伴系统从而可以被用作正常申请使用。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613226912/samples/CMA/image-20200817145111816_m8nffr.png\" alt=\"cma2\"></p>\n<p>​        </p>\n<p>&emsp;&emsp;arm_memblock_init() 函数中函数调用了 early_init_fdt_scan_reserved_mem() 函数，该函数 从 DTB 中将所有预留区的信息读取出来，然后从 MEMBLOCK 分配器中申请指定长度的物理内存，并将这些预留区加入到系统预留区数组 reserved-mem[] 进行管理，以供后期内核初始化使用。</p>\n<p>&emsp;&emsp;在伙伴系统建立之前调用dma_contiguous_reserve函数对CMA区域进行初始化，通过cma_declare_contiguous()函数建立起CMA区域专有内存。</p>\n<p>&emsp;&emsp;调用过程为 </p>\n<p><code>start_kernel()</code>-&gt;<code>setup_arch()</code>-&gt;<code>arm_memblock_init()</code>-&gt;<code>dma_contiguous_reserve()</code> </p>\n<p>-&gt;<code>dma_contiguous_reserve_area()</code>-&gt;<code>cma_declare_contiguous()</code></p>\n<p>&emsp;&emsp;输出打印：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227021/samples/CMA/image-20200810171949718_yjdmuh.png\" alt=\"cma3\"></p>\n<p>&emsp;&emsp;接下来需要对这块区域进行初始化，如果compitable设置为”shared-memory-pool”，也就是将CMA区域设置为公有区域，则会调用RESERVEDMEM_OF_DECLARE宏，在__reservedmem_of_table节中插入新的CMA区域数据，在函数中调用 __reserved_mem_init_node() 函数遍历 __reservedmem_of_table section, 该 section 内包含了 对预留区的初始化函数。</p>\n<p><code>setup_arch()</code>-&gt;<code>arm_memblock_init()</code>-&gt;<code>early_init_fdt_scan_reserved_mem()</code></p>\n<p>-&gt;<code>fdt_init_reserved_mem()</code>-&gt;<code>__reserved_mem_init_node</code></p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227091/samples/CMA/image-20200808161916566_ve5wvp.png\" alt=\"cma4\"></p>\n<p>&emsp;&emsp;输出打印：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227207/samples/CMA/image-20200810172634847_doptye.png\" alt=\"cma5\"></p>\n<p>&emsp;&emsp;如果是私有的CMA区域，需要驱动程序去申请内存并进行初始化映射，而且在驱动中需要通过dma_declare_contiguous函数与对应的CMA区域绑定。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227266/samples/CMA/image-20200808172920300_mj3phn.png\" alt=\"cma6\"></p>\n<p>&emsp;&emsp;此时CMA区域已经构建完成，但页表还没有构建起来，需要为CMA区域构建页表，同样是对公有区域，私有区域需要驱动程序实现。在setup_arch函数中初始化完CMA区域紧接着就是paging_init函数，其为CMA建立对应的页表。它会向下继续调用dma_contiguous_remap函数，为cma_mmu_remap数组中每一个区域建立页表。</p>\n<p>&emsp;&emsp;调用过程为 setup_arch() -&gt; paging_init() -&gt; dma_contiguous_remap() -&gt; flush_tlb_kernel_range() &amp; iotable_init()</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227340/samples/CMA/image-20200812161305165_flc9b2.png\" alt=\"cma7\"></p>\n<p>&emsp;&emsp;至此，CMA内存区域的初始化就完成了。</p>\n<h4 id=\"CMA分配器初始化\"><a href=\"#CMA分配器初始化\" class=\"headerlink\" title=\"CMA分配器初始化\"></a>CMA分配器初始化</h4><p>&emsp;&emsp;我们需要对CMA区域中的内存进行申请、释放，这些都是通过CMA分配器实现。内核初始化过程中，通过 core_initcall() 函数将该section内的初始化函数遍历执行，其中包括 CMA 的激活入口cma_init_reserved_areas()函数， 该函数遍历分配的所有CMA分区并激活每一个CMA分区。该函数向下调用cma_activate_area()函数激活每一个区域。</p>\n<p>&emsp;&emsp;调用过程 core_initcall(cma_init_reserved_areas) -&gt; cma_activate_area()</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227416/samples/CMA/image-20200812163139293_hui0nn.png\" alt=\"cma8\"></p>\n<p>&emsp;&emsp;在该函数中， 函数首先调用 kzalloc() 函数为CMA分区的bitmap所需的内存，然后调用init_cma_reserved_pageblock()函数。在该函数中，内核将 CMA 区块内的所有物理页都清除RESERVED标志，引用计数设置为0，接着按pageblock的方式设置区域内的页组迁移类型为MIGRATE_CMA。函数继续调用set_page_refcounted()函数将引用计数设置为1以及调用__free_pages()函数将所有的页从CMA分配器中释放并归还给buddy管理器。最后调用adjust_managed_page_count()更新系统可用物理页总数。</p>\n<p>&emsp;&emsp;至此系统的其他部分可以开始使用CMA分配器分配的连续物理内存。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227504/samples/CMA/image-20200813134715265_mpnevf.png\" alt=\"cma9\"></p>\n<h4 id=\"通过CMA分配连续内存\"><a href=\"#通过CMA分配连续内存\" class=\"headerlink\" title=\"通过CMA分配连续内存\"></a>通过CMA分配连续内存</h4><p>&emsp;&emsp;CMA内存的分配在多数情况下不能直接被驱动程序所调用，都是通过对dma接口进行重构，实现用dma接口访问。对分配的buffer通过dma-buf实现共享，最重要的是实现零拷贝，这里还需要说明一下dma-buf：</p>\n<p>&emsp;&emsp;dma-buf是内核中的一个子系统，实现了一个让不同设备、子系统之间进行共享缓存的统一框架。本质上是 buffer 与 file 的结合，即 dma-buf 既是块物理 buffer，又是个 linux file。buffer 是内容，file 是媒介，只有通过 file 这个媒介才能实现同一 buffer 在不同驱动之间的流转。</p>\n<p>&emsp;&emsp;dma_buf子系统包含三个主要组成:</p>\n<ol>\n<li>dma-buf对象，它代表的后端是一个sg_table结构，它暴露给应用层的接口是一个文件描述符，通过传递描述符达到了交互访问dma-buf对象，进而最终达成了共享访问sg_table的目的。</li>\n<li>fence对象, 它提供了在一个设备完成访问时发出信号的机制。</li>\n<li>reservation对象, 它负责管理缓存的分享和互斥访问。</li>\n</ol>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227603/samples/CMA/%E6%9C%AA%E5%91%BD%E5%90%8D%E8%A1%A8%E5%8D%95_ezof0e.svg\" alt=\"未命名表单\"></p>\n<p>&emsp;&emsp;在CMEM驱动中，初始化过程中调用dma_declare_contiguous()函数实现cma保留内存并对其进行初始化。它会向下调用cma_declare_contiguous()函数，从而与cma接口对接起来。</p>\n<p>&emsp;&emsp;dma申请内存时有两种缓冲区映射方式，一种是一致性缓冲区映射，另一种是流式缓冲区映射，他们最大的区别就是一致性缓冲区映射可同时供多个设备访问，而流式缓冲区映射一次只能有一个设备访问。</p>\n<p>&emsp;&emsp;per-device通过dma接口申请内存时，采用标准的接口dma_alloc_coherent()，通过dma_map_ops结构体间接调用dma_alloc_from_contiguous函数，从而分配内存。</p>\n<p>&emsp;&emsp;调用过程：</p>\n<p><code>dma_alloc_coherent()</code> –&gt; <code>dma_alloc_attrs()</code> –&gt; <code>ops()</code> –&gt;<code>alloc()</code> –&gt; <code>arm_coherent_dma_alloc()</code> –&gt; <code>__dma_alloc()</code> –&gt; <code>__alloc_from_contiguous()</code> –&gt; <code>dma_alloc_from_contiguous()</code></p>\n<p>&emsp;&emsp;这里通过dma-buf架构使用标准dma接口dma_alloc_coherent()向下调用cma接口，这个过程是通过注册dma-buf数据结构时完成的。构建dma-buf时，需要有dma_buf_ops结构体，通过DEFINE_DMA_BUF_EXPORT_INFO宏重定义exp_info结构体，最后调用dma_buf_export()函数导出，这些操作封装在cmem_dmabuf_export()函数中。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227667/samples/CMA/image-20200818140019342_xcqjez.png\" alt=\"image-20200818140019342\"></p>\n<p>&emsp;&emsp;分配内存API的另外一个接口是<code>dma_alloc_from_contiguous</code>，它是用于向下调用cma相关的操作。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227716/samples/CMA/image-20200812163857604_u0r4qq.png\" alt=\"image-20200812163857604\"></p>\n<p>&emsp;&emsp;释放内存API接口<code>dma_release_from_contiguous</code></p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227747/samples/CMA/image-20200812164007006_m60zej.png\" alt=\"image-20200812164007006\"></p>\n<p>&emsp;&emsp;在CMEM的驱动中还有一个小操作就是seq_file的使用，针对proc文件的不足而诞生了Seq_file，Seq_file的实现基于proc文件，作用是将Linux内核里面常用的数据结构通过文件（主要关注proc文件）导出到用户空间。</p>\n<p>&emsp;&emsp;主要结构为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file_operations</span> <span class=\"title\">cmem_proc_ops</span> = &#123;</span></span><br><span class=\"line\">\t.owner = THIS_MODULE,</span><br><span class=\"line\">\t.open = cmem_proc_open,</span><br><span class=\"line\">\t.read = seq_read,</span><br><span class=\"line\">\t.llseek = seq_lseek,</span><br><span class=\"line\">\t.release = seq_release,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在cmem_proc_open中调用seq_open注册cmem_seq_ops</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">seq_operations</span> <span class=\"title\">cmem_seq_ops</span> = &#123;</span></span><br><span class=\"line\">\t.start = cmem_seq_start,</span><br><span class=\"line\">\t.next = cmem_seq_next,</span><br><span class=\"line\">\t.stop = cmem_seq_stop,</span><br><span class=\"line\">\t.show = cmem_seq_show,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;需要用户实现这四个函数</p>\n<h4 id=\"CMA-核心数据结构\"><a href=\"#CMA-核心数据结构\" class=\"headerlink\" title=\"CMA 核心数据结构\"></a>CMA 核心数据结构</h4><p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227808/samples/CMA/image-20200818145054898_vwfy8d.png\" alt=\"image-20200818145054898\"></p>\n<p>&emsp;&emsp;struct cma 结构用于维护一块 CMA 区域， CMA 分配器维护着所有可用的 CMA 区域，每个 CMA 区域都是一段连续的物理内存。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227843/samples/CMA/image-20200818145229775_apd5h8.png\" alt=\"image-20200818145229775\"></p>\n<p>&emsp;&emsp;cma_areas 是一个 struct cma 数组，由于维护 CMA 分配器中可用的 CMA 区域。cma_area_count 变量用于指向当前最大可用的 CMA 区域数量。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613227872/samples/CMA/image-20200818145706223_bd21qs.png\" alt=\"image-20200818145706223\"></p>\n<p>&emsp;&emsp;reserved_mem[] 数组用于维护系统早期的预留内存区。系统初始化节点会将 CMA 区域和 DMA 区域加入到该数组。reserved_mem[] 数组总共包含 MAX_RESERVED_REGIONS 个区域，reserved_mem_count 指定了最大可用的预留区数。</p>"},{"title":"display subsystem","date":"2021-03-04T16:52:36.000Z","_content":"\n#### 前言\n\n&emsp;&emsp;分析AM57xx系列架构显示原理，分别从硬件和软件两方面入手。总体看来，AM57xx系列芯片在硬件上面将显示部分分成了几大子系统，每个子系统负责相应的部分，而显示最基础的子系统就是DSS（Display Subsystem），它负责将frame buffer中图像数据真正的显示在显示器上。目前需求仅为显示静态图像，所以只分析这个子系统。\n\n<!-- more -->\n\n#### 一. 显示基础\n\n&emsp;&emsp;显示最基础的部件就是显示器/显示屏，而显示器由显示面板（display panel）和显示驱动器（display driver）组成，display panel负责发光，这也就是显示器的显示原理，根据其显示原理的不同，可以分为CRT、LED、OLED、LCD等显示器，其中CRT为阴极射线管发光显示，主要应用为上世纪的电视机显示，LED利用发光二极管显示，主要应用在广场中广告屏的显示，OLED为有机发光二极管，是目前娱乐设备的主要显示载体，主要用于超薄柔性显示，而LCD是液晶显示，目前主流的显示器，应用在各行各业。而display driver一是负责接收显示数据，二是控制控制面板发光。\n\n&emsp;&emsp;连接显示器的接口叫display interface，目前主流的display interface有VGA、DVI、HDMI、DP、雷电等接口，首先是VGA接口，CPU使用的是TTL电平，通过VGA接口则直接连接，因为其传输的是模拟信号。DVI传输的是数字信号，高分辨率下更加清晰并且失真会更少。HDMI接口（High Definition Multimedia Interface）是一种全数字化影像和声音传送接口，可以传送未压缩的音讯及视频信号，目前最流行的接口。DP接口（Display Port）具有上面所有显示器接口的一切优点，但目前成本较高。雷电接口融合了PCI Express和DisplayPort接口两种通信协议，PCI Express用于数据传输，DisplayPort用于显示，能同步传输1080p乃至4K视频和最多八声道音频，最高可达到40Gbps。\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20200929164811165_skvhtc.png\" alt=\"image-20200929164811165\" style=\"zoom:67%;\" />\n\n![image-20201008190149500](https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201008190149500_xmw3h4.png)\n\n&emsp;&emsp;MIPI （Mobile Industry Processor Interface） 是2003年由ARM， Nokia， ST ，TI等公司成立的一个联盟，目的是把手机内部的接口如摄像头、显示屏接口、射频/基带接口等标准化，从而减少手机设计的复杂程度和增加设计灵活性。MIPI信号是成对传输的，主要是为了减少干扰，MIPI信号成对走线，两根线从波形看是成反相，所以有外部干扰过来，就会被抵消很大部分。主要用在平板和手机上使用。\n\n&emsp;&emsp;MIPI接口LCD包括1对差分时钟（CLKP，CLKN），4对数据差分线（D0P，D0N；D1P，D1N；D2P，D2N；D3P，D3N），每一对之间有GND线，4对数据差分线并不一定要全部使用，很多屏只需要2对就可以了；RESET（复位脚），STBYB（高电平有效），VGL，VGH（像素点上开关管的开启关闭电压，加在开关管的栅极上，VGH 高电平打开给像素点电容充电， VGL 负电压 关闭开关管），VCOM（ 液晶像素点的存储电容共用电极），VLED-（背光负极），VLED+（背光正极），电源有1.8V和3.3V。\n\n&emsp;&emsp;MIPI的液晶数据传输中涉及到是DWG（Display Working Group）工作组，该工作组提出了4种液晶规范分别为DCS（Display Command Set）、DBI（Display Bus Interface）、DPI（Display Pixel Interface）、DSI（Display Serial Interface）。DPI接口也可称为RGB接口，DBI接口可称为MCU接口\n\n1. **MIPI DCS（Display Command Set）**\n\n   &emsp;&emsp;规范中规定了显示命令设置的一些规范，它并没有说明它具体的硬件连接方式，规定了液晶传输中各个命令的值和意义以及命令说明，主要是为了配合DBI规范、DSI规范来使用的。\n\n2. **MIPI DBI（Display Bus Interface）**\n\n   &emsp;&emsp;规范中规定了它的硬件接口方式，它是液晶数据总线接口，可细分为MIPI DBI Type A、MIPI DBI TypeB、MIPI DBI Type C这三种不同的模式，不同模式下的硬件接口以及数据的采样都有所不同，如在MIPI DBI Type A规范中规定是下降沿采样数据值（摩托罗拉6800接口 ），MIPI DBI Type B规范中规定是上升沿采样数据（英特尔8080接口 ）。\n   &emsp;&emsp;MIPI DBI Type A和MIPI DBI Type B同时又可细分为5种不同数据接口模式，分别为8位数据接口、9位数据接口、16位数据接口、18位数据接口、24位数据接口。不过市面上支持9位数据接口的液晶驱动IC并不多见，当然数据接口越大那么相同一个周期内数据接口越大，所传输的数据越多。而MIPI DBI Type C 只适用于传输于DCS规范中规定的命令和该命令所需要的参数值，不能传输液晶像素的颜色值（虽然DBI规范中规定能传输颜色值，不过市面上的液晶驱动IC是用来传输命令和命令所需的参数值）。\n   &emsp;&emsp;同样在DBI（Display Bus Interface）规范中规定不同数据接口所支持颜色位数。具体还是要参考所使用的液晶驱动IC资料来确定。\n   &emsp;&emsp;谈到颜色位数，需要说一下何谓颜色位数，颜色位数也称色彩位数，位图或者视频帧缓冲区中储存1像素的颜色所用的位数,它也称为位/像素(bpp)。色彩深度越高,可用的颜色就越多。市面常用液晶驱动IC支持的颜色位数有16、18、24这三种。\n\n3. **MIPI DPI（Display Pixel Interface）**\n\n   &emsp;&emsp;规范中所规定的硬件接口跟DBI规范中并不相同，它不是像DBI规范用Command/Data配置液晶驱动IC的寄存器再进行操作。某种程度上，DPI与DBI的最大差别是DPI的数据线和控制线分离，而DBI是复用的。同样使用DBI接口的液晶很少有大屏幕的，因为需要更多的GRAM从而提高了生产成本，而DPI接口即不需要，因为它是直接写屏，速度快，常用于显示视频或动画用。\n   &emsp;&emsp;DPI从它的名称中就可以看出它是直接对液晶的各像素点进行操作的，它是利用（H，V）这两个行场信号进行对各像素点进行颜色填充操作。填充速度快，可用于动画显示，目前手机液晶屏所用的接口就是这一类。H（H-SYNC）称为行同步信号；V（V-SYNC）称为场同步信号。它像模拟电视机那样用电子枪那样进行扫频显示，不过它对时序控制要求很高。因此一般的MCU芯片很难支持。\n\n4. **MIPI DSI(Display Serial Interface)**\n\n   符合MIPI协定的串列显示器界面协议，主机与显示器之间用差分信号线连接。\n   一对clock信号和1~4对data信号\n   一般情况下data0可以配置成双向传输\n   一个主机端可以允许同时与多个从属端进行通信\n\n&emsp;&emsp;最后就是display controller，也就是显示控制器，显示控制器如果在系统中配置使用了，则与其他设备一样挂载到总线上，最后，三者关系如下\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877433/samples/display/display_feyrnx.png\" alt=\"display\" style=\"zoom:30%;\" />\n\n\n\n#### 二. AM57xx DSS\n\n&emsp;&emsp;AM57xx系列芯片都有一个显示子系统DSS（Display Subsystem），总体架构为\n\n![image-20201019110632743](https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201019110632743_unug6k.png)\n\n&emsp;&emsp;DSS主要由DISPC（Display controller）和HDMI protocol engine组成，DISPC又由DMA、LCD/TV outputs、GFX（graphics pipeline）、video pipelines、write-back pipeline组成。\n\n##### 2.1 DISPC\n\n&emsp;&emsp;在显示过程中必须得去配置DISPC使其工作起来，五个管道（pipelines）中，VIDx和GFX负责图像数据的输出，WB负责数据的反馈以进行图像数据的处理，三个LCD outputs则负责将输入的ARGB32-8888格式像素数据转换成 RGB24-888 或 YUV4:2:2 格式像素数据，TV out负责将ARGB40-10.10.10.10格式像素数据直接输出，支持MIPI DPI协议。\n\n​\t\t数据的源头都是通过DMA搬运，节省CPU的开销。架构为：\n\n![image-20201019171629011](https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201019171629011_sgf49x.png)\n\n##### 2.2 HDMI\n\n&emsp;&emsp;HDMI总体架构：\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/image-20201019172746174_psdzlx.png\" alt=\"image-20201019172746174\" style=\"zoom:100%;\" />\n\n&emsp;&emsp;当DISPC处理好数据格式，将数据发送给HDMI模块，而HDMI模块再将数据传送给HDMI_PHY，HDMI_PHY负责将数据输出显示，当配置HDMI接口时需要配置HDCP、HDMI模块、HDMI_PHY、PLLTRL_HDMI四个模块才能使其工作。工作时也需遵循HDMI接口标准。\n\n\n\n#### 三. 显示子系统\n\n##### 3.1 总览\n\n&emsp;&emsp;显示子系统是Linux系统中最复杂的子系统之一，因为其操作的复杂性，GPU工作的特殊性和重要性，导致整个显示子系统的层次关系很多，我们只关注kernel部分。\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/seq_dispaly_gzylbc.png\" alt=\"seq_dispaly\" style=\"zoom:18%;\" />\n\n&emsp;&emsp;在Linux内核中对于显示部分的驱动被分成了两部分，一部分是gpu目录下的显卡的驱动，另一部分是video目录下视频相关的驱动，二者都是基于frame buffer（帧缓存），在gpu/目录中，最外层的各种drm_xxx文件实现了DRI（Direct Render Infrastructure），通过这些接口能够直接访问底层的图形设备，例如LCDC、GPU等，而具体的硬件驱动在更具体的下一级目录中。通过Makefile文件可以梳理出DRM架构各个文件之间的关系：\n\n```makefile\ndrm-y       :=\tdrm_auth.o drm_bufs.o drm_cache.o \\\n\t\tdrm_context.o drm_dma.o \\\n\t\tdrm_fops.o drm_gem.o drm_ioctl.o drm_irq.o \\\n\t\tdrm_lock.o drm_memory.o drm_drv.o drm_vm.o \\\n\t\tdrm_scatter.o drm_pci.o \\\n\t\tdrm_platform.o drm_sysfs.o drm_hashtab.o drm_mm.o \\\n\t\tdrm_crtc.o drm_modes.o drm_edid.o \\\n\t\tdrm_info.o drm_debugfs.o drm_encoder_slave.o \\\n\t\tdrm_trace_points.o drm_global.o drm_prime.o \\\n\t\tdrm_rect.o drm_vma_manager.o drm_flip_work.o \\\n\t\tdrm_modeset_lock.o drm_atomic.o drm_bridge.o\n\ndrm-$(CONFIG_DRM_GEM_CMA_HELPER) += drm_gem_cma_helper.o\ndrm-$(CONFIG_PCI) += ati_pcigart.o\ndrm-$(CONFIG_OF) += drm_of.o\n\ndrm-y += $(drm-m)\n```\n\n&emsp;&emsp;内核中的DRM为X server或Mesa 实现了操作操作硬件的接口，从而保证图像数据传输的低延迟。在同一文件夹下还存在着另外一种架构，这种架构主要是将用于控制显示设备属性的操作提供给上层直接使用，KMS（Kernel Mode Set）就是为了实现这种操作。在gpu/drm/目录中，实现KMS的文件有：\n\n```makefile\ndrm_kms_helper-y := drm_crtc_helper.o drm_dp_helper.o drm_probe_helper.o \\\n\t\tdrm_plane_helper.o drm_dp_mst_topology.o drm_atomic_helper.o\ndrm_kms_helper-$(CONFIG_DRM_FBDEV_EMULATION) += drm_fb_helper.o\ndrm_kms_helper-$(CONFIG_DRM_KMS_CMA_HELPER) += drm_fb_cma_helper.o\n\nobj-$(CONFIG_DRM_KMS_HELPER) += drm_kms_helper.o\n```\n\n&emsp;&emsp;通过DRM和KMS的封装，他们向上提供接口，向下协调硬件驱动。下面分析AM57xx系列芯片的显示驱动，同样是Makefile文件：\n\n```makefile\n    obj-y\t\t\t+= omapdrm/\n    obj-y\t\t\t+= tilcdc/\n    obj-y\t\t\t+= i2c/\n    obj-y\t\t\t+= panel/\n    obj-y\t\t\t+= bridge/\n```\n\n&emsp;&emsp;其中，omapdrm/目录中实现AM57xx系列芯片上面对应的显示子系统，tilcdc/目录则是LCD controller下面抽象层次的实现，i2c/、panel/、bridge/目录则是关系具体的显示驱动底层的代码，默认的是NXP_TDA998X，后续需要根据具体显示设备具体分析，各个目录中的显示驱动程序所需要调用通用函数则都是在当前目录中实现，在当前目录还实现了DRM的核心层。\n\n##### 3.2 DRM\n\n&emsp;&emsp;DRM（Direct Render Manager）站在所有图形驱动的上层，为图形驱动程序提供了多种服务，同时向上通过libdrm提供应用程序接口，libdrm是包装大多数DRM ioctl的库。DRM提供的服务包括vblank事件处理，内存管理，输出管理，帧缓冲区管理，命令提交和防护，挂起/恢复支持以及DMA传输。\n\n&emsp;&emsp;其驱动代码在gpu/omapdrm/omap_drv.c中，主要结构是drm_driver\n\n```C\nstatic struct drm_driver omap_drm_driver = {\n\t.driver_features = DRIVER_MODESET | DRIVER_GEM  | DRIVER_PRIME |\n\t\tDRIVER_ATOMIC | DRIVER_RENDER,\n\t.load = dev_load,\n\t.unload = dev_unload,\n\t.open = dev_open,\n\t.lastclose = dev_lastclose,\n\t.preclose = dev_preclose,\n\t.postclose = dev_postclose,\n\t.set_busid = drm_platform_set_busid,\n\t.get_vblank_counter = drm_vblank_no_hw_counter,\n\t.enable_vblank = omap_irq_enable_vblank,\n\t.disable_vblank = omap_irq_disable_vblank,\n#ifdef CONFIG_DEBUG_FS\n\t.debugfs_init = omap_debugfs_init,\n\t.debugfs_cleanup = omap_debugfs_cleanup,\n#endif\n\t.prime_handle_to_fd = drm_gem_prime_handle_to_fd,\n\t.prime_fd_to_handle = drm_gem_prime_fd_to_handle,\n\t.gem_prime_export = omap_gem_prime_export,\n\t.gem_prime_import = omap_gem_prime_import,\n\t.gem_free_object = omap_gem_free_object,\n\t.gem_vm_ops = &omap_gem_vm_ops,\n\t.dumb_create = omap_gem_dumb_create,\n\t.dumb_map_offset = omap_gem_dumb_map_offset,\n\t.dumb_destroy = drm_gem_dumb_destroy,\n\t.ioctls = ioctls,\n\t.num_ioctls = DRM_OMAP_NUM_IOCTLS,\n\t.fops = &omapdriver_fops,\n\t.name = DRIVER_NAME,\n\t.desc = DRIVER_DESC,\n\t.date = DRIVER_DATE,\n\t.major = DRIVER_MAJOR,\n\t.minor = DRIVER_MINOR,\n\t.patchlevel = DRIVER_PATCHLEVEL,\n};\n```\n\n&emsp;&emsp;在Linux系统中需要大量的图形内存来存储与图形有关的数据，因此内存管理在DRM中至关重要，而且在DRM基础架构中发挥着核心作用。在DRM的内存管理核心子模块中包含两个内存管理器，Translation Table Manager（TTM）和Graphics Execution Manager（GEM）。\n\n&emsp;&emsp;TTM提供一个单一的用户空间API，可以满足所用硬件的要求，同时支持统一内存体系结构（UMA）设备和具有专用视频RAM的设备，同时也导致代码庞大而复杂。GEM为应对TTM的复杂性，没有为每个与图形内存相关的问题提供解决方案，而是确定驱动程序之间的通用代码，并创建一个共享的支持库，从而使初始化和执行要求更简单，但是不具有RAM管理功能，也仅限于UMA设备。\n\n&emsp;&emsp;vma-manager负责将依赖于驱动程序的任意内存区域映射到线性用户地址空间。\n\n&emsp;&emsp;PRIME是drm中的跨设备缓冲区共享框架，对于用户空间，PRIME缓冲区是基于dma-buf的文件描述符。\n\n&emsp;&emsp;drm_mm提供了一个简单的范围分配器。如果驱动程序合适的话，可以自由使用Linux内核中的资源分配器，drm_mm的好处是它位于DRM内核中，这意味着可以更容易满足gpu的一些特殊用途需求。\n\n##### 3.3 KMS\n\n&emsp;&emsp;KMS通过frame buffer提供给用户空间，而frame buffer结构嵌入到plane（面）结构中构成KMS的基本对象，面结构用drm_plane表示，之后plane再将像素数据传入crtc。crtc代表整个显示管道，从drm_plane接收像素数据，并将数据混合到一起，之后crtc将数据输出到多个编码器，用drm_encoder表示，当crtc在运行时则至少有一个drm_encoder，每个编码器再将数据输出到连接器，drm_connector，连接器与编码器的连接可以通过软件指定。一个编码器可以驱动多个连接器，但一个连接器只能有一个编码器。\n\n![image-20201026195531904](https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201026195531904_cuif1i.png)\n\n&emsp;&emsp;为了能够共享编码器的代码，可以将一个或多个Framebuffer GEM Helper Reference（由struct drm_bridge表示）链接到编码器。该链接是静态的，无法更改，这意味着需要在CRTC和任何编码器之间打开交叉映射开关。另一个对象是面板（drm_panel），它的存在是为了以某种形式显示像素的其他东西，通常嵌入到连接器中。\n\n![image-20201027092623444](https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/image-20201027092623444_jbr83g.png)\n\n&emsp;&emsp;最后，通过连接器抽象实际的接收器，暴露给用户空间，通过这些KMS对象来完成数据的转换和输出。\n\n##### 3.4 dss\n\n&emsp;&emsp;在drm/的顶层目录下的很多文件就是为了实现DRM和KMS架构，根据Makefile文件得知，DRM架构也需要i2c/、panel/、bridge/等核心模块支撑，其中panel/实现DRM面板驱动程序，最多需要一个调节器和一个GPIO才能运行，i2c/中的驱动是为了那些需要I2C协议的编码器，bridge/中的代码则是为了特殊display架构的需要。\n\n&emsp;&emsp;最后，剩下的便是各大厂家的驱动，以TI为例，TI实现了两种显示驱动的框架，一种是以LCDC作为显示控制器的显示架构，分布在tilcdc/中。另一种则是以gpu作为显示控制器的显示架构，分布在omapdrm/中。\n\n&emsp;&emsp;AM57xx平台采用gpu作为显示控制器，所以其代码在omapdrm/中，在omapdrm/顶层目录的代码实现DRM架构所需要的内存管理、中断、帧缓存等核心操作，同时在这个层次实现KMS架构中子模块的驱动，包括plane、crtc、encoder、connector。从drm_driver结构中可以看到omap_drm_driver所确定的操作，omap_drm_driver的操作会向下调用具体的函数，这些都以函数指针的形式调用。\n\n&emsp;&emsp;init函数中去注册platform_drivers结\n\n```C\nstatic struct platform_driver * const drivers[] = {\n\t&omap_dmm_driver,\n\t&pdev,\n};\n\nstruct platform_driver omap_dmm_driver = {\n\t.probe = omap_dmm_probe,\n\t.remove = omap_dmm_remove,\n\t.driver = {\n\t\t.owner = THIS_MODULE,\n\t\t.name = DMM_DRIVER_NAME,\n\t\t.of_match_table = of_match_ptr(dmm_of_match),\n\t\t.pm = &omap_dmm_pm_ops,\n\t},\n};\n\nstatic struct platform_driver pdev = {\n\t.driver = {\n\t\t.name = DRIVER_NAME,\n\t\t.pm = &omapdrm_pm_ops,\n\t},\n\t.probe = pdev_probe,\n\t.remove = pdev_remove,\n};\n\nstatic const struct of_device_id dmm_of_match[] = {\n\t{\n\t\t.compatible = \"ti,omap4-dmm\",\n\t\t.data = &dmm_omap4_platform_data,\n\t},\n\t{\n\t\t.compatible = \"ti,omap5-dmm\",\n\t\t.data = &dmm_omap5_platform_data,\n\t},\n\t{\n\t\t.compatible = \"ti,dra7-dmm\",\n\t\t.data = &dmm_dra7_platform_data,\n\t},\n\t{},\n};\n```\n\n&emsp;&emsp;dss在设备树中的节点：\n\n```C\ndss@58000000 {\n\t\t\tcompatible = \"ti,dra7-dss\";\n\t\t\tstatus = \"ok\";\n\t\t\tti,hwmods = \"dss_core\";\n\t\t\tsyscon-pll-ctrl = <0x8 0x538>;\n\t\t\t#address-cells = <0x1>;\n\t\t\t#size-cells = <0x1>;\n\t\t\tranges;\n\t\t\treg = <0x58000000 0x80 0x58004054 0x4 0x58004300 0x20 0x58009054 0x4 0x58009300 0x20>;\n\t\t\treg-names = \"dss\", \"pll1_clkctrl\", \"pll1\", \"pll2_clkctrl\", \"pll2\";\n\t\t\tclocks = <0x10f 0x110 0x111>;\n\t\t\tclock-names = \"fck\", \"video1_clk\", \"video2_clk\";\n\t\t\tvdda_video-supply = <0x112>;\n\n\t\t\tdispc@58001000 {\n\t\t\t\tcompatible = \"ti,dra7-dispc\";\n\t\t\t\treg = <0x58001000 0x1000>;\n\t\t\t\tinterrupts = <0x0 0x14 0x4>;\n\t\t\t\tti,hwmods = \"dss_dispc\";\n\t\t\t\tclocks = <0x10f>;\n\t\t\t\tclock-names = \"fck\";\n\t\t\t\tsyscon-pol = <0x8 0x534>;\n\t\t\t};\n\n\t\t\tencoder@58060000 {\n\t\t\t\tcompatible = \"ti,dra7-hdmi\";\n\t\t\t\treg = <0x58040000 0x200 0x58040200 0x80 0x58040300 0x80 0x58060000 0x19000>;\n\t\t\t\treg-names = \"wp\", \"pll\", \"phy\", \"core\";\n\t\t\t\tinterrupts = <0x0 0x60 0x4>;\n\t\t\t\tstatus = \"disabled\";\n\t\t\t\tti,hwmods = \"dss_hdmi\";\n\t\t\t\tclocks = <0x113 0x114>;\n\t\t\t\tclock-names = \"fck\", \"sys_clk\";\n\t\t\t\tdmas = <0xd3 0x4c>;\n\t\t\t\tdma-names = \"audio_tx\";\n\t\t\t};\n\t\t};\n```\n\n&emsp;&emsp;dss/目录中实现了TI DSS显示子系统的驱动，包括其中的dispc、hdmi engine以及支持的接口，在omap2系列平台中支持dpi接口、dsi接口、rfbi接口、venc接口、sdi接口，omap4以及以上平台支持hdmi接口，它们的驱动分别在具体的文件中，根据CONFIG_OMAPx_DSS_xxx来决定使用哪个接口。AM57xx平台当前配置为DPI接口和hdmi接口。\n\n&emsp;&emsp;DSS部分的代码可以分成四部分，omapdss_boot_init、omapdss_base、omapdss、omapdss6\n\n* omapdss_boot_init\n\n  这部分代码主要进行初始化，根据从设备树上匹配的dss节点进行配置数据，主要是通过“ti,dra7-dss”属性找到dss节点，再遍历其中的子节点\n\n  ```C\n  static const struct of_device_id omapdss_of_match[] __initconst = {\n  \t{ .compatible = \"ti,omap2-dss\", },\n  \t{ .compatible = \"ti,omap3-dss\", },\n  \t{ .compatible = \"ti,omap4-dss\", },\n  \t{ .compatible = \"ti,omap5-dss\", },\n  \t{ .compatible = \"ti,dra7-dss\", },\n  \t{ .compatible = \"ti,k2g-dss\", },\n  \t{},\n  };\n  \n  static int __init omapdss_boot_init(void)\n  {\n  \tstruct device_node *dss, *child;\n  \n  \tINIT_LIST_HEAD(&dss_conv_list);\n  \n  \tdss = of_find_matching_node(NULL, omapdss_of_match);\n  \n  \tomapdss_walk_device(dss, true);\n  \n  \tfor_each_available_child_of_node(dss, child) {\n  \t\tif (!of_find_property(child, \"compatible\", NULL))\n  \t\t\tcontinue;\n  \t\tomapdss_walk_device(child, true);\n  \t}\n  \n  \twhile (!list_empty(&dss_conv_list)) {\n  \t\tstruct dss_conv_node *n;\n  \n  \t\tn = list_first_entry(&dss_conv_list, struct dss_conv_node, list);\n  \n  \t\tif (!n->root)\n  \t\t\tomapdss_omapify_node(n->node);\n  \n  \t\tlist_del(&n->list);\n  \t\tof_node_put(n->node);\n  \t\tkfree(n);\n  \t}\n  \n  \treturn 0;\n  }\n  ```\n\n* omapdss_base\n\n  base部分代码由四部分组成，base、display、dss-of、output，每一部分都是实现DRM的基础，所以也是dss的基础，只列举其中的两个函数\n\n  ```C\n  static void omapdss_walk_device(struct device *dev, struct device_node *node,\n  \t\t\t\tbool dss_core)\n  {\n  \tstruct device_node *n;\n  \tstruct omapdss_comp_node *comp = devm_kzalloc(dev, sizeof(*comp),\n  \t\t\t\t\t\t      GFP_KERNEL);\n  \tn = of_get_child_by_name(node, \"ports\");\n  \n  \tof_node_put(n);\n  \n  \tn = NULL;\n  \twhile ((n = of_graph_get_next_endpoint(node, n)) != NULL) {\n  \t\tstruct device_node *pn = of_graph_get_remote_port_parent(n);\n  \n  \t\tif (!pn)\n  \t\t\tcontinue;\n  \n  \t\tif (!of_device_is_available(pn) || omapdss_list_contains(pn)) {\n  \t\t\tof_node_put(pn);\n  \t\t\tcontinue;\n  \t\t}\n  \t\tomapdss_walk_device(dev, pn, false);\n  \t}\n  }\n  \n  bool omapdss_stack_is_ready(void)\n  {\n  \tstruct omapdss_comp_node *comp;\n  \n  \tlist_for_each_entry(comp, &omapdss_comp_list, list) {\n  \t\tif (!omapdss_component_is_loaded(comp))\n  \t\t\treturn false;\n  \t}\n  \n  \treturn true;\n  }\n  ```\n\n* omapdss\n\n  这部分是TI dss架构的核心驱动代码，为了能够支持更多的设备和方便管理，这里同样抽象出核心层来对具体的驱动进行管理，这部分主要是dispc驱动代码以及具体的接口的驱动\n\n  ```C\n  static const struct of_device_id dispc_of_match[] = {\n  \t{ .compatible = \"ti,omap2-dispc\", },\n  \t{ .compatible = \"ti,omap3-dispc\", },\n  \t{ .compatible = \"ti,omap4-dispc\", },\n  \t{ .compatible = \"ti,omap5-dispc\", },\n  \t{ .compatible = \"ti,dra7-dispc\", },\n  \t{},\n  };\n  \n  static struct platform_driver omap_dispchw_driver = {\n  \t.probe\t\t= dispc_probe,\n  \t.remove         = dispc_remove,\n  \t.driver         = {\n  \t\t.name   = \"omapdss_dispc\",\n  \t\t.pm\t= &dispc_pm_ops,\n  \t\t.of_match_table = dispc_of_match,\n  \t\t.suppress_bind_attrs = true,\n  \t},\n  };\n  \n  int __init dispc_init_platform_driver(void)\n  {\n  \treturn platform_driver_register(&omap_dispchw_driver);\n  }\n  \n  void dispc_uninit_platform_driver(void)\n  {\n  \tplatform_driver_unregister(&omap_dispchw_driver);\n  }\n  ```\n\n* omapdss6\n\n  对比可以发现，omapdss6是TI为了对自己家新平台k2g的支持，原理和前面dss架构相同\n\n```C\nstatic struct platform_driver dss6_driver = {\n\t.probe\t\t= dss6_probe,\n\t.remove\t\t= dss6_remove,\n\t.driver         = {\n\t\t.name   = \"omap_dss6\",\n\t\t.pm\t= &dss6_pm_ops,\n\t\t.of_match_table = dss6_of_match,\n\t\t.suppress_bind_attrs = true,\n\t},\n};\n```\n\n##### 3.5 displays\n\n&emsp;&emsp;display/目录下都是和具体硬件相关的驱动代码，由encoder、connector、panel三部分组成，根据配置CONFIG_DISPLAY_xxx_xx决定使用哪个具体的驱动，如果没有对应的型号可以自己编写对应的驱动\n\n```makefile\nobj-$(CONFIG_DISPLAY_ENCODER_OPA362) += encoder-opa362.o\nobj-$(CONFIG_DISPLAY_ENCODER_TFP410) += encoder-tfp410.o\nobj-$(CONFIG_DISPLAY_ENCODER_TPD12S015) += encoder-tpd12s015.o\nobj-$(CONFIG_DISPLAY_DRA7EVM_ENCODER_TPD12S015) += dra7-evm-encoder-tpd12s015.o\nobj-$(CONFIG_DISPLAY_ENCODER_SII9022) += encoder-sii9022.o\nencoder-sii9022-y += encoder-sii9022-video.o\nencoder-sii9022-$(CONFIG_DISPLAY_ENCODER_SII9022_AUDIO_CODEC) += encoder-sii9022-audio.o\nobj-$(CONFIG_DISPLAY_ENCODER_TC358768) += encoder-tc358768.o\nobj-$(CONFIG_DISPLAY_CONNECTOR_DVI) += connector-dvi.o\nobj-$(CONFIG_DISPLAY_CONNECTOR_HDMI) += connector-hdmi.o\nobj-$(CONFIG_DISPLAY_CONNECTOR_ANALOG_TV) += connector-analog-tv.o\nobj-$(CONFIG_DISPLAY_PANEL_DPI) += panel-dpi.o\nobj-$(CONFIG_DISPLAY_PANEL_DSI_CM) += panel-dsi-cm.o\nobj-$(CONFIG_DISPLAY_PANEL_SONY_ACX565AKM) += panel-sony-acx565akm.o\nobj-$(CONFIG_DISPLAY_PANEL_LGPHILIPS_LB035Q02) += panel-lgphilips-lb035q02.o\nobj-$(CONFIG_DISPLAY_PANEL_SHARP_LS037V7DW01) += panel-sharp-ls037v7dw01.o\nobj-$(CONFIG_DISPLAY_PANEL_TPO_TD028TTEC1) += panel-tpo-td028ttec1.o\nobj-$(CONFIG_DISPLAY_PANEL_TPO_TD043MTEA1) += panel-tpo-td043mtea1.o\nobj-$(CONFIG_DISPLAY_PANEL_NEC_NL8048HL11) += panel-nec-nl8048hl11.o\nobj-$(CONFIG_DISPLAY_PANEL_TLC59108) += panel-tlc59108.o\n```\n\n&emsp;&emsp;displays部分代码包含三部分，encoder、connector、panel，encoder部分包含了三种编码器，tpd12s015、sii9022、tc358768，connector使用hdmi，panel使用dpi\n\nencoder：\n\n```C\nstatic struct i2c_driver sii9022_driver = {\n\t.driver = {\n\t\t.name  = \"sii9022\",\n\t\t.owner = THIS_MODULE,\n\t\t.of_match_table = sii9022_of_match,\n\t\t},\n\t.probe\t\t= sii9022_probe,\n\t.remove\t\t= sii9022_remove,\n\t.id_table\t= sii9022_id,\n};\n\nstatic struct platform_driver tpd_driver = {\n\t.probe\t= tpd_probe,\n\t.remove\t= __exit_p(tpd_remove),\n\t.driver\t= {\n\t\t.name\t= \"tpd12s015\",\n\t\t.of_match_table = tpd_of_match,\n\t\t.suppress_bind_attrs = true,\n\t},\n};\n\nstatic struct i2c_driver tc358768_i2c_driver = {\n\t.driver = {\n\t\t.owner\t\t= THIS_MODULE,\n\t\t.name\t\t= TC358768_NAME,\n\t\t.of_match_table\t= tc358768_of_match,\n\t},\n\t.id_table\t= tc358768_id,\n\t.probe\t\t= tc358768_i2c_probe,\n\t.remove\t\t= tc358768_i2c_remove,\n};\n```\n\n&emsp;&emsp;connector & panel：\n\n```C\nstatic struct platform_driver hdmi_connector_driver = {\n\t.probe\t= hdmic_probe,\n\t.remove\t= __exit_p(hdmic_remove),\n\t.driver\t= {\n\t\t.name\t= \"connector-hdmi\",\n\t\t.of_match_table = hdmic_of_match,\n\t\t.suppress_bind_attrs = true,\n\t},\n};\n\nstatic struct platform_driver panel_dpi_driver = {\n\t.probe = panel_dpi_probe,\n\t.remove = __exit_p(panel_dpi_remove),\n\t.driver = {\n\t\t.name = \"panel-dpi\",\n\t\t.of_match_table = panel_dpi_of_match,\n\t\t.suppress_bind_attrs = true,\n\t},\n};\n\nstatic struct i2c_driver tlc59108_i2c_driver = {\n\t.driver = {\n\t\t.owner\t= THIS_MODULE,\n\t\t.name\t= TLC_NAME,\n\t\t.of_match_table = tlc59108_of_match,\n\t},\n\t.id_table\t= tlc59108_id,\n\t.probe\t\t= tlc59108_i2c_probe,\n\t.remove\t\t= tlc59108_i2c_remove,\n};\n```\n\n&emsp;&emsp;最终，pixel数据通过connector和panel转换成屏幕设备可以识别的格式，再通过自身的解码器将图像数据显示在屏幕上。\n\n\n\n#### 四. 驱动分析\n\n##### omap_drm_driver\n\n&emsp;&emsp;下面具体分析gpu/目录下整个TI SOC显示架构驱动，在最顶层是drm/、vga/、host1x/、ipu-v3/四个目录，其中drm/和vga/是无条件必须支持的模块，但vga模块这里没有使用到，因为我们使用的是MIPI DPI接口以及HDMI接口，DRM则是支撑整个显示子系统的核心，ipu模块则需要根据硬件平台是否启用， host1x模块是DMA引擎，用于对Tegra的图形和多媒体相关模块进行寄存器访问。所以重点在drm/目录。\n\n&emsp;&emsp;在drm/的顶层目录下的很多文件就是为了实现DRM和KMS架构，根据Makefile文件得知，DRM架构也需要i2c/、panel/、bridge/等核心模块支撑，其中panel/实现DRM面板驱动程序，最多需要一个调节器和一个GPIO才能运行，i2c/中的驱动是为了那些需要I2C协议的编码器，bridge/中的代码则是为了特殊display架构的需要。\n\n&emsp;&emsp;最后，剩下的便是各大厂家的驱动，以TI为例，TI实现了两种显示驱动的框架，一种是以LCDC作为显示控制器的显示架构，分布在tilcdc/中。另一种则是以gpu作为显示控制器的显示架构，分布在omapdrm/中。\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/ti_display_cy7yuz.png\" alt=\"ti_display\" style=\"zoom:30%;\" />\n\n&emsp;&emsp;AM57xx平台采用gpu作为显示控制器，所以其代码在omapdrm/中，在omapdrm/顶层目录的代码实现DRM架构所需要的内存管理、中断、帧缓存等核心操作，同时在这个层次实现KMS架构中子模块的驱动，包括plane、crtc、encoder、connector。从drm_driver结构中可以看到omap_drm_driver所确定的操作，omap_drm_driver的操作会向下调用具体的函数，这些都以函数指针的形式调用。\n\n&emsp;&emsp;init函数中去注册platform_drivers结构\n\n```C\nstatic struct platform_driver * const drivers[] = {\n\t&omap_dmm_driver,\n\t&pdev,\n};\n\nstruct platform_driver omap_dmm_driver = {\n\t.probe = omap_dmm_probe,\n\t.remove = omap_dmm_remove,\n\t.driver = {\n\t\t.owner = THIS_MODULE,\n\t\t.name = DMM_DRIVER_NAME,\n\t\t.of_match_table = of_match_ptr(dmm_of_match),\n\t\t.pm = &omap_dmm_pm_ops,\n\t},\n};\n\nstatic struct platform_driver pdev = {\n\t.driver = {\n\t\t.name = DRIVER_NAME,\n\t\t.pm = &omapdrm_pm_ops,\n\t},\n\t.probe = pdev_probe,\n\t.remove = pdev_remove,\n};\n\nstatic const struct of_device_id dmm_of_match[] = {\n\t{\n\t\t.compatible = \"ti,omap4-dmm\",\n\t\t.data = &dmm_omap4_platform_data,\n\t},\n\t{\n\t\t.compatible = \"ti,omap5-dmm\",\n\t\t.data = &dmm_omap5_platform_data,\n\t},\n\t{\n\t\t.compatible = \"ti,dra7-dmm\",\n\t\t.data = &dmm_dra7_platform_data,\n\t},\n\t{},\n};\n```\n\n&emsp;&emsp;因为没有具体硬件，这里所分析的都是默认的设备，具体应该根据实际硬件选择具体的设备和驱动程序。\n\n\n\n","source":"_posts/display.md","raw":"---\ntitle: display subsystem\ndate: 2021-03-05 00:52:36\ntags: [显示驱动,display,LCD,驱动]\ncategories: Linux\n---\n\n#### 前言\n\n&emsp;&emsp;分析AM57xx系列架构显示原理，分别从硬件和软件两方面入手。总体看来，AM57xx系列芯片在硬件上面将显示部分分成了几大子系统，每个子系统负责相应的部分，而显示最基础的子系统就是DSS（Display Subsystem），它负责将frame buffer中图像数据真正的显示在显示器上。目前需求仅为显示静态图像，所以只分析这个子系统。\n\n<!-- more -->\n\n#### 一. 显示基础\n\n&emsp;&emsp;显示最基础的部件就是显示器/显示屏，而显示器由显示面板（display panel）和显示驱动器（display driver）组成，display panel负责发光，这也就是显示器的显示原理，根据其显示原理的不同，可以分为CRT、LED、OLED、LCD等显示器，其中CRT为阴极射线管发光显示，主要应用为上世纪的电视机显示，LED利用发光二极管显示，主要应用在广场中广告屏的显示，OLED为有机发光二极管，是目前娱乐设备的主要显示载体，主要用于超薄柔性显示，而LCD是液晶显示，目前主流的显示器，应用在各行各业。而display driver一是负责接收显示数据，二是控制控制面板发光。\n\n&emsp;&emsp;连接显示器的接口叫display interface，目前主流的display interface有VGA、DVI、HDMI、DP、雷电等接口，首先是VGA接口，CPU使用的是TTL电平，通过VGA接口则直接连接，因为其传输的是模拟信号。DVI传输的是数字信号，高分辨率下更加清晰并且失真会更少。HDMI接口（High Definition Multimedia Interface）是一种全数字化影像和声音传送接口，可以传送未压缩的音讯及视频信号，目前最流行的接口。DP接口（Display Port）具有上面所有显示器接口的一切优点，但目前成本较高。雷电接口融合了PCI Express和DisplayPort接口两种通信协议，PCI Express用于数据传输，DisplayPort用于显示，能同步传输1080p乃至4K视频和最多八声道音频，最高可达到40Gbps。\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20200929164811165_skvhtc.png\" alt=\"image-20200929164811165\" style=\"zoom:67%;\" />\n\n![image-20201008190149500](https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201008190149500_xmw3h4.png)\n\n&emsp;&emsp;MIPI （Mobile Industry Processor Interface） 是2003年由ARM， Nokia， ST ，TI等公司成立的一个联盟，目的是把手机内部的接口如摄像头、显示屏接口、射频/基带接口等标准化，从而减少手机设计的复杂程度和增加设计灵活性。MIPI信号是成对传输的，主要是为了减少干扰，MIPI信号成对走线，两根线从波形看是成反相，所以有外部干扰过来，就会被抵消很大部分。主要用在平板和手机上使用。\n\n&emsp;&emsp;MIPI接口LCD包括1对差分时钟（CLKP，CLKN），4对数据差分线（D0P，D0N；D1P，D1N；D2P，D2N；D3P，D3N），每一对之间有GND线，4对数据差分线并不一定要全部使用，很多屏只需要2对就可以了；RESET（复位脚），STBYB（高电平有效），VGL，VGH（像素点上开关管的开启关闭电压，加在开关管的栅极上，VGH 高电平打开给像素点电容充电， VGL 负电压 关闭开关管），VCOM（ 液晶像素点的存储电容共用电极），VLED-（背光负极），VLED+（背光正极），电源有1.8V和3.3V。\n\n&emsp;&emsp;MIPI的液晶数据传输中涉及到是DWG（Display Working Group）工作组，该工作组提出了4种液晶规范分别为DCS（Display Command Set）、DBI（Display Bus Interface）、DPI（Display Pixel Interface）、DSI（Display Serial Interface）。DPI接口也可称为RGB接口，DBI接口可称为MCU接口\n\n1. **MIPI DCS（Display Command Set）**\n\n   &emsp;&emsp;规范中规定了显示命令设置的一些规范，它并没有说明它具体的硬件连接方式，规定了液晶传输中各个命令的值和意义以及命令说明，主要是为了配合DBI规范、DSI规范来使用的。\n\n2. **MIPI DBI（Display Bus Interface）**\n\n   &emsp;&emsp;规范中规定了它的硬件接口方式，它是液晶数据总线接口，可细分为MIPI DBI Type A、MIPI DBI TypeB、MIPI DBI Type C这三种不同的模式，不同模式下的硬件接口以及数据的采样都有所不同，如在MIPI DBI Type A规范中规定是下降沿采样数据值（摩托罗拉6800接口 ），MIPI DBI Type B规范中规定是上升沿采样数据（英特尔8080接口 ）。\n   &emsp;&emsp;MIPI DBI Type A和MIPI DBI Type B同时又可细分为5种不同数据接口模式，分别为8位数据接口、9位数据接口、16位数据接口、18位数据接口、24位数据接口。不过市面上支持9位数据接口的液晶驱动IC并不多见，当然数据接口越大那么相同一个周期内数据接口越大，所传输的数据越多。而MIPI DBI Type C 只适用于传输于DCS规范中规定的命令和该命令所需要的参数值，不能传输液晶像素的颜色值（虽然DBI规范中规定能传输颜色值，不过市面上的液晶驱动IC是用来传输命令和命令所需的参数值）。\n   &emsp;&emsp;同样在DBI（Display Bus Interface）规范中规定不同数据接口所支持颜色位数。具体还是要参考所使用的液晶驱动IC资料来确定。\n   &emsp;&emsp;谈到颜色位数，需要说一下何谓颜色位数，颜色位数也称色彩位数，位图或者视频帧缓冲区中储存1像素的颜色所用的位数,它也称为位/像素(bpp)。色彩深度越高,可用的颜色就越多。市面常用液晶驱动IC支持的颜色位数有16、18、24这三种。\n\n3. **MIPI DPI（Display Pixel Interface）**\n\n   &emsp;&emsp;规范中所规定的硬件接口跟DBI规范中并不相同，它不是像DBI规范用Command/Data配置液晶驱动IC的寄存器再进行操作。某种程度上，DPI与DBI的最大差别是DPI的数据线和控制线分离，而DBI是复用的。同样使用DBI接口的液晶很少有大屏幕的，因为需要更多的GRAM从而提高了生产成本，而DPI接口即不需要，因为它是直接写屏，速度快，常用于显示视频或动画用。\n   &emsp;&emsp;DPI从它的名称中就可以看出它是直接对液晶的各像素点进行操作的，它是利用（H，V）这两个行场信号进行对各像素点进行颜色填充操作。填充速度快，可用于动画显示，目前手机液晶屏所用的接口就是这一类。H（H-SYNC）称为行同步信号；V（V-SYNC）称为场同步信号。它像模拟电视机那样用电子枪那样进行扫频显示，不过它对时序控制要求很高。因此一般的MCU芯片很难支持。\n\n4. **MIPI DSI(Display Serial Interface)**\n\n   符合MIPI协定的串列显示器界面协议，主机与显示器之间用差分信号线连接。\n   一对clock信号和1~4对data信号\n   一般情况下data0可以配置成双向传输\n   一个主机端可以允许同时与多个从属端进行通信\n\n&emsp;&emsp;最后就是display controller，也就是显示控制器，显示控制器如果在系统中配置使用了，则与其他设备一样挂载到总线上，最后，三者关系如下\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877433/samples/display/display_feyrnx.png\" alt=\"display\" style=\"zoom:30%;\" />\n\n\n\n#### 二. AM57xx DSS\n\n&emsp;&emsp;AM57xx系列芯片都有一个显示子系统DSS（Display Subsystem），总体架构为\n\n![image-20201019110632743](https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201019110632743_unug6k.png)\n\n&emsp;&emsp;DSS主要由DISPC（Display controller）和HDMI protocol engine组成，DISPC又由DMA、LCD/TV outputs、GFX（graphics pipeline）、video pipelines、write-back pipeline组成。\n\n##### 2.1 DISPC\n\n&emsp;&emsp;在显示过程中必须得去配置DISPC使其工作起来，五个管道（pipelines）中，VIDx和GFX负责图像数据的输出，WB负责数据的反馈以进行图像数据的处理，三个LCD outputs则负责将输入的ARGB32-8888格式像素数据转换成 RGB24-888 或 YUV4:2:2 格式像素数据，TV out负责将ARGB40-10.10.10.10格式像素数据直接输出，支持MIPI DPI协议。\n\n​\t\t数据的源头都是通过DMA搬运，节省CPU的开销。架构为：\n\n![image-20201019171629011](https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201019171629011_sgf49x.png)\n\n##### 2.2 HDMI\n\n&emsp;&emsp;HDMI总体架构：\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/image-20201019172746174_psdzlx.png\" alt=\"image-20201019172746174\" style=\"zoom:100%;\" />\n\n&emsp;&emsp;当DISPC处理好数据格式，将数据发送给HDMI模块，而HDMI模块再将数据传送给HDMI_PHY，HDMI_PHY负责将数据输出显示，当配置HDMI接口时需要配置HDCP、HDMI模块、HDMI_PHY、PLLTRL_HDMI四个模块才能使其工作。工作时也需遵循HDMI接口标准。\n\n\n\n#### 三. 显示子系统\n\n##### 3.1 总览\n\n&emsp;&emsp;显示子系统是Linux系统中最复杂的子系统之一，因为其操作的复杂性，GPU工作的特殊性和重要性，导致整个显示子系统的层次关系很多，我们只关注kernel部分。\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/seq_dispaly_gzylbc.png\" alt=\"seq_dispaly\" style=\"zoom:18%;\" />\n\n&emsp;&emsp;在Linux内核中对于显示部分的驱动被分成了两部分，一部分是gpu目录下的显卡的驱动，另一部分是video目录下视频相关的驱动，二者都是基于frame buffer（帧缓存），在gpu/目录中，最外层的各种drm_xxx文件实现了DRI（Direct Render Infrastructure），通过这些接口能够直接访问底层的图形设备，例如LCDC、GPU等，而具体的硬件驱动在更具体的下一级目录中。通过Makefile文件可以梳理出DRM架构各个文件之间的关系：\n\n```makefile\ndrm-y       :=\tdrm_auth.o drm_bufs.o drm_cache.o \\\n\t\tdrm_context.o drm_dma.o \\\n\t\tdrm_fops.o drm_gem.o drm_ioctl.o drm_irq.o \\\n\t\tdrm_lock.o drm_memory.o drm_drv.o drm_vm.o \\\n\t\tdrm_scatter.o drm_pci.o \\\n\t\tdrm_platform.o drm_sysfs.o drm_hashtab.o drm_mm.o \\\n\t\tdrm_crtc.o drm_modes.o drm_edid.o \\\n\t\tdrm_info.o drm_debugfs.o drm_encoder_slave.o \\\n\t\tdrm_trace_points.o drm_global.o drm_prime.o \\\n\t\tdrm_rect.o drm_vma_manager.o drm_flip_work.o \\\n\t\tdrm_modeset_lock.o drm_atomic.o drm_bridge.o\n\ndrm-$(CONFIG_DRM_GEM_CMA_HELPER) += drm_gem_cma_helper.o\ndrm-$(CONFIG_PCI) += ati_pcigart.o\ndrm-$(CONFIG_OF) += drm_of.o\n\ndrm-y += $(drm-m)\n```\n\n&emsp;&emsp;内核中的DRM为X server或Mesa 实现了操作操作硬件的接口，从而保证图像数据传输的低延迟。在同一文件夹下还存在着另外一种架构，这种架构主要是将用于控制显示设备属性的操作提供给上层直接使用，KMS（Kernel Mode Set）就是为了实现这种操作。在gpu/drm/目录中，实现KMS的文件有：\n\n```makefile\ndrm_kms_helper-y := drm_crtc_helper.o drm_dp_helper.o drm_probe_helper.o \\\n\t\tdrm_plane_helper.o drm_dp_mst_topology.o drm_atomic_helper.o\ndrm_kms_helper-$(CONFIG_DRM_FBDEV_EMULATION) += drm_fb_helper.o\ndrm_kms_helper-$(CONFIG_DRM_KMS_CMA_HELPER) += drm_fb_cma_helper.o\n\nobj-$(CONFIG_DRM_KMS_HELPER) += drm_kms_helper.o\n```\n\n&emsp;&emsp;通过DRM和KMS的封装，他们向上提供接口，向下协调硬件驱动。下面分析AM57xx系列芯片的显示驱动，同样是Makefile文件：\n\n```makefile\n    obj-y\t\t\t+= omapdrm/\n    obj-y\t\t\t+= tilcdc/\n    obj-y\t\t\t+= i2c/\n    obj-y\t\t\t+= panel/\n    obj-y\t\t\t+= bridge/\n```\n\n&emsp;&emsp;其中，omapdrm/目录中实现AM57xx系列芯片上面对应的显示子系统，tilcdc/目录则是LCD controller下面抽象层次的实现，i2c/、panel/、bridge/目录则是关系具体的显示驱动底层的代码，默认的是NXP_TDA998X，后续需要根据具体显示设备具体分析，各个目录中的显示驱动程序所需要调用通用函数则都是在当前目录中实现，在当前目录还实现了DRM的核心层。\n\n##### 3.2 DRM\n\n&emsp;&emsp;DRM（Direct Render Manager）站在所有图形驱动的上层，为图形驱动程序提供了多种服务，同时向上通过libdrm提供应用程序接口，libdrm是包装大多数DRM ioctl的库。DRM提供的服务包括vblank事件处理，内存管理，输出管理，帧缓冲区管理，命令提交和防护，挂起/恢复支持以及DMA传输。\n\n&emsp;&emsp;其驱动代码在gpu/omapdrm/omap_drv.c中，主要结构是drm_driver\n\n```C\nstatic struct drm_driver omap_drm_driver = {\n\t.driver_features = DRIVER_MODESET | DRIVER_GEM  | DRIVER_PRIME |\n\t\tDRIVER_ATOMIC | DRIVER_RENDER,\n\t.load = dev_load,\n\t.unload = dev_unload,\n\t.open = dev_open,\n\t.lastclose = dev_lastclose,\n\t.preclose = dev_preclose,\n\t.postclose = dev_postclose,\n\t.set_busid = drm_platform_set_busid,\n\t.get_vblank_counter = drm_vblank_no_hw_counter,\n\t.enable_vblank = omap_irq_enable_vblank,\n\t.disable_vblank = omap_irq_disable_vblank,\n#ifdef CONFIG_DEBUG_FS\n\t.debugfs_init = omap_debugfs_init,\n\t.debugfs_cleanup = omap_debugfs_cleanup,\n#endif\n\t.prime_handle_to_fd = drm_gem_prime_handle_to_fd,\n\t.prime_fd_to_handle = drm_gem_prime_fd_to_handle,\n\t.gem_prime_export = omap_gem_prime_export,\n\t.gem_prime_import = omap_gem_prime_import,\n\t.gem_free_object = omap_gem_free_object,\n\t.gem_vm_ops = &omap_gem_vm_ops,\n\t.dumb_create = omap_gem_dumb_create,\n\t.dumb_map_offset = omap_gem_dumb_map_offset,\n\t.dumb_destroy = drm_gem_dumb_destroy,\n\t.ioctls = ioctls,\n\t.num_ioctls = DRM_OMAP_NUM_IOCTLS,\n\t.fops = &omapdriver_fops,\n\t.name = DRIVER_NAME,\n\t.desc = DRIVER_DESC,\n\t.date = DRIVER_DATE,\n\t.major = DRIVER_MAJOR,\n\t.minor = DRIVER_MINOR,\n\t.patchlevel = DRIVER_PATCHLEVEL,\n};\n```\n\n&emsp;&emsp;在Linux系统中需要大量的图形内存来存储与图形有关的数据，因此内存管理在DRM中至关重要，而且在DRM基础架构中发挥着核心作用。在DRM的内存管理核心子模块中包含两个内存管理器，Translation Table Manager（TTM）和Graphics Execution Manager（GEM）。\n\n&emsp;&emsp;TTM提供一个单一的用户空间API，可以满足所用硬件的要求，同时支持统一内存体系结构（UMA）设备和具有专用视频RAM的设备，同时也导致代码庞大而复杂。GEM为应对TTM的复杂性，没有为每个与图形内存相关的问题提供解决方案，而是确定驱动程序之间的通用代码，并创建一个共享的支持库，从而使初始化和执行要求更简单，但是不具有RAM管理功能，也仅限于UMA设备。\n\n&emsp;&emsp;vma-manager负责将依赖于驱动程序的任意内存区域映射到线性用户地址空间。\n\n&emsp;&emsp;PRIME是drm中的跨设备缓冲区共享框架，对于用户空间，PRIME缓冲区是基于dma-buf的文件描述符。\n\n&emsp;&emsp;drm_mm提供了一个简单的范围分配器。如果驱动程序合适的话，可以自由使用Linux内核中的资源分配器，drm_mm的好处是它位于DRM内核中，这意味着可以更容易满足gpu的一些特殊用途需求。\n\n##### 3.3 KMS\n\n&emsp;&emsp;KMS通过frame buffer提供给用户空间，而frame buffer结构嵌入到plane（面）结构中构成KMS的基本对象，面结构用drm_plane表示，之后plane再将像素数据传入crtc。crtc代表整个显示管道，从drm_plane接收像素数据，并将数据混合到一起，之后crtc将数据输出到多个编码器，用drm_encoder表示，当crtc在运行时则至少有一个drm_encoder，每个编码器再将数据输出到连接器，drm_connector，连接器与编码器的连接可以通过软件指定。一个编码器可以驱动多个连接器，但一个连接器只能有一个编码器。\n\n![image-20201026195531904](https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201026195531904_cuif1i.png)\n\n&emsp;&emsp;为了能够共享编码器的代码，可以将一个或多个Framebuffer GEM Helper Reference（由struct drm_bridge表示）链接到编码器。该链接是静态的，无法更改，这意味着需要在CRTC和任何编码器之间打开交叉映射开关。另一个对象是面板（drm_panel），它的存在是为了以某种形式显示像素的其他东西，通常嵌入到连接器中。\n\n![image-20201027092623444](https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/image-20201027092623444_jbr83g.png)\n\n&emsp;&emsp;最后，通过连接器抽象实际的接收器，暴露给用户空间，通过这些KMS对象来完成数据的转换和输出。\n\n##### 3.4 dss\n\n&emsp;&emsp;在drm/的顶层目录下的很多文件就是为了实现DRM和KMS架构，根据Makefile文件得知，DRM架构也需要i2c/、panel/、bridge/等核心模块支撑，其中panel/实现DRM面板驱动程序，最多需要一个调节器和一个GPIO才能运行，i2c/中的驱动是为了那些需要I2C协议的编码器，bridge/中的代码则是为了特殊display架构的需要。\n\n&emsp;&emsp;最后，剩下的便是各大厂家的驱动，以TI为例，TI实现了两种显示驱动的框架，一种是以LCDC作为显示控制器的显示架构，分布在tilcdc/中。另一种则是以gpu作为显示控制器的显示架构，分布在omapdrm/中。\n\n&emsp;&emsp;AM57xx平台采用gpu作为显示控制器，所以其代码在omapdrm/中，在omapdrm/顶层目录的代码实现DRM架构所需要的内存管理、中断、帧缓存等核心操作，同时在这个层次实现KMS架构中子模块的驱动，包括plane、crtc、encoder、connector。从drm_driver结构中可以看到omap_drm_driver所确定的操作，omap_drm_driver的操作会向下调用具体的函数，这些都以函数指针的形式调用。\n\n&emsp;&emsp;init函数中去注册platform_drivers结\n\n```C\nstatic struct platform_driver * const drivers[] = {\n\t&omap_dmm_driver,\n\t&pdev,\n};\n\nstruct platform_driver omap_dmm_driver = {\n\t.probe = omap_dmm_probe,\n\t.remove = omap_dmm_remove,\n\t.driver = {\n\t\t.owner = THIS_MODULE,\n\t\t.name = DMM_DRIVER_NAME,\n\t\t.of_match_table = of_match_ptr(dmm_of_match),\n\t\t.pm = &omap_dmm_pm_ops,\n\t},\n};\n\nstatic struct platform_driver pdev = {\n\t.driver = {\n\t\t.name = DRIVER_NAME,\n\t\t.pm = &omapdrm_pm_ops,\n\t},\n\t.probe = pdev_probe,\n\t.remove = pdev_remove,\n};\n\nstatic const struct of_device_id dmm_of_match[] = {\n\t{\n\t\t.compatible = \"ti,omap4-dmm\",\n\t\t.data = &dmm_omap4_platform_data,\n\t},\n\t{\n\t\t.compatible = \"ti,omap5-dmm\",\n\t\t.data = &dmm_omap5_platform_data,\n\t},\n\t{\n\t\t.compatible = \"ti,dra7-dmm\",\n\t\t.data = &dmm_dra7_platform_data,\n\t},\n\t{},\n};\n```\n\n&emsp;&emsp;dss在设备树中的节点：\n\n```C\ndss@58000000 {\n\t\t\tcompatible = \"ti,dra7-dss\";\n\t\t\tstatus = \"ok\";\n\t\t\tti,hwmods = \"dss_core\";\n\t\t\tsyscon-pll-ctrl = <0x8 0x538>;\n\t\t\t#address-cells = <0x1>;\n\t\t\t#size-cells = <0x1>;\n\t\t\tranges;\n\t\t\treg = <0x58000000 0x80 0x58004054 0x4 0x58004300 0x20 0x58009054 0x4 0x58009300 0x20>;\n\t\t\treg-names = \"dss\", \"pll1_clkctrl\", \"pll1\", \"pll2_clkctrl\", \"pll2\";\n\t\t\tclocks = <0x10f 0x110 0x111>;\n\t\t\tclock-names = \"fck\", \"video1_clk\", \"video2_clk\";\n\t\t\tvdda_video-supply = <0x112>;\n\n\t\t\tdispc@58001000 {\n\t\t\t\tcompatible = \"ti,dra7-dispc\";\n\t\t\t\treg = <0x58001000 0x1000>;\n\t\t\t\tinterrupts = <0x0 0x14 0x4>;\n\t\t\t\tti,hwmods = \"dss_dispc\";\n\t\t\t\tclocks = <0x10f>;\n\t\t\t\tclock-names = \"fck\";\n\t\t\t\tsyscon-pol = <0x8 0x534>;\n\t\t\t};\n\n\t\t\tencoder@58060000 {\n\t\t\t\tcompatible = \"ti,dra7-hdmi\";\n\t\t\t\treg = <0x58040000 0x200 0x58040200 0x80 0x58040300 0x80 0x58060000 0x19000>;\n\t\t\t\treg-names = \"wp\", \"pll\", \"phy\", \"core\";\n\t\t\t\tinterrupts = <0x0 0x60 0x4>;\n\t\t\t\tstatus = \"disabled\";\n\t\t\t\tti,hwmods = \"dss_hdmi\";\n\t\t\t\tclocks = <0x113 0x114>;\n\t\t\t\tclock-names = \"fck\", \"sys_clk\";\n\t\t\t\tdmas = <0xd3 0x4c>;\n\t\t\t\tdma-names = \"audio_tx\";\n\t\t\t};\n\t\t};\n```\n\n&emsp;&emsp;dss/目录中实现了TI DSS显示子系统的驱动，包括其中的dispc、hdmi engine以及支持的接口，在omap2系列平台中支持dpi接口、dsi接口、rfbi接口、venc接口、sdi接口，omap4以及以上平台支持hdmi接口，它们的驱动分别在具体的文件中，根据CONFIG_OMAPx_DSS_xxx来决定使用哪个接口。AM57xx平台当前配置为DPI接口和hdmi接口。\n\n&emsp;&emsp;DSS部分的代码可以分成四部分，omapdss_boot_init、omapdss_base、omapdss、omapdss6\n\n* omapdss_boot_init\n\n  这部分代码主要进行初始化，根据从设备树上匹配的dss节点进行配置数据，主要是通过“ti,dra7-dss”属性找到dss节点，再遍历其中的子节点\n\n  ```C\n  static const struct of_device_id omapdss_of_match[] __initconst = {\n  \t{ .compatible = \"ti,omap2-dss\", },\n  \t{ .compatible = \"ti,omap3-dss\", },\n  \t{ .compatible = \"ti,omap4-dss\", },\n  \t{ .compatible = \"ti,omap5-dss\", },\n  \t{ .compatible = \"ti,dra7-dss\", },\n  \t{ .compatible = \"ti,k2g-dss\", },\n  \t{},\n  };\n  \n  static int __init omapdss_boot_init(void)\n  {\n  \tstruct device_node *dss, *child;\n  \n  \tINIT_LIST_HEAD(&dss_conv_list);\n  \n  \tdss = of_find_matching_node(NULL, omapdss_of_match);\n  \n  \tomapdss_walk_device(dss, true);\n  \n  \tfor_each_available_child_of_node(dss, child) {\n  \t\tif (!of_find_property(child, \"compatible\", NULL))\n  \t\t\tcontinue;\n  \t\tomapdss_walk_device(child, true);\n  \t}\n  \n  \twhile (!list_empty(&dss_conv_list)) {\n  \t\tstruct dss_conv_node *n;\n  \n  \t\tn = list_first_entry(&dss_conv_list, struct dss_conv_node, list);\n  \n  \t\tif (!n->root)\n  \t\t\tomapdss_omapify_node(n->node);\n  \n  \t\tlist_del(&n->list);\n  \t\tof_node_put(n->node);\n  \t\tkfree(n);\n  \t}\n  \n  \treturn 0;\n  }\n  ```\n\n* omapdss_base\n\n  base部分代码由四部分组成，base、display、dss-of、output，每一部分都是实现DRM的基础，所以也是dss的基础，只列举其中的两个函数\n\n  ```C\n  static void omapdss_walk_device(struct device *dev, struct device_node *node,\n  \t\t\t\tbool dss_core)\n  {\n  \tstruct device_node *n;\n  \tstruct omapdss_comp_node *comp = devm_kzalloc(dev, sizeof(*comp),\n  \t\t\t\t\t\t      GFP_KERNEL);\n  \tn = of_get_child_by_name(node, \"ports\");\n  \n  \tof_node_put(n);\n  \n  \tn = NULL;\n  \twhile ((n = of_graph_get_next_endpoint(node, n)) != NULL) {\n  \t\tstruct device_node *pn = of_graph_get_remote_port_parent(n);\n  \n  \t\tif (!pn)\n  \t\t\tcontinue;\n  \n  \t\tif (!of_device_is_available(pn) || omapdss_list_contains(pn)) {\n  \t\t\tof_node_put(pn);\n  \t\t\tcontinue;\n  \t\t}\n  \t\tomapdss_walk_device(dev, pn, false);\n  \t}\n  }\n  \n  bool omapdss_stack_is_ready(void)\n  {\n  \tstruct omapdss_comp_node *comp;\n  \n  \tlist_for_each_entry(comp, &omapdss_comp_list, list) {\n  \t\tif (!omapdss_component_is_loaded(comp))\n  \t\t\treturn false;\n  \t}\n  \n  \treturn true;\n  }\n  ```\n\n* omapdss\n\n  这部分是TI dss架构的核心驱动代码，为了能够支持更多的设备和方便管理，这里同样抽象出核心层来对具体的驱动进行管理，这部分主要是dispc驱动代码以及具体的接口的驱动\n\n  ```C\n  static const struct of_device_id dispc_of_match[] = {\n  \t{ .compatible = \"ti,omap2-dispc\", },\n  \t{ .compatible = \"ti,omap3-dispc\", },\n  \t{ .compatible = \"ti,omap4-dispc\", },\n  \t{ .compatible = \"ti,omap5-dispc\", },\n  \t{ .compatible = \"ti,dra7-dispc\", },\n  \t{},\n  };\n  \n  static struct platform_driver omap_dispchw_driver = {\n  \t.probe\t\t= dispc_probe,\n  \t.remove         = dispc_remove,\n  \t.driver         = {\n  \t\t.name   = \"omapdss_dispc\",\n  \t\t.pm\t= &dispc_pm_ops,\n  \t\t.of_match_table = dispc_of_match,\n  \t\t.suppress_bind_attrs = true,\n  \t},\n  };\n  \n  int __init dispc_init_platform_driver(void)\n  {\n  \treturn platform_driver_register(&omap_dispchw_driver);\n  }\n  \n  void dispc_uninit_platform_driver(void)\n  {\n  \tplatform_driver_unregister(&omap_dispchw_driver);\n  }\n  ```\n\n* omapdss6\n\n  对比可以发现，omapdss6是TI为了对自己家新平台k2g的支持，原理和前面dss架构相同\n\n```C\nstatic struct platform_driver dss6_driver = {\n\t.probe\t\t= dss6_probe,\n\t.remove\t\t= dss6_remove,\n\t.driver         = {\n\t\t.name   = \"omap_dss6\",\n\t\t.pm\t= &dss6_pm_ops,\n\t\t.of_match_table = dss6_of_match,\n\t\t.suppress_bind_attrs = true,\n\t},\n};\n```\n\n##### 3.5 displays\n\n&emsp;&emsp;display/目录下都是和具体硬件相关的驱动代码，由encoder、connector、panel三部分组成，根据配置CONFIG_DISPLAY_xxx_xx决定使用哪个具体的驱动，如果没有对应的型号可以自己编写对应的驱动\n\n```makefile\nobj-$(CONFIG_DISPLAY_ENCODER_OPA362) += encoder-opa362.o\nobj-$(CONFIG_DISPLAY_ENCODER_TFP410) += encoder-tfp410.o\nobj-$(CONFIG_DISPLAY_ENCODER_TPD12S015) += encoder-tpd12s015.o\nobj-$(CONFIG_DISPLAY_DRA7EVM_ENCODER_TPD12S015) += dra7-evm-encoder-tpd12s015.o\nobj-$(CONFIG_DISPLAY_ENCODER_SII9022) += encoder-sii9022.o\nencoder-sii9022-y += encoder-sii9022-video.o\nencoder-sii9022-$(CONFIG_DISPLAY_ENCODER_SII9022_AUDIO_CODEC) += encoder-sii9022-audio.o\nobj-$(CONFIG_DISPLAY_ENCODER_TC358768) += encoder-tc358768.o\nobj-$(CONFIG_DISPLAY_CONNECTOR_DVI) += connector-dvi.o\nobj-$(CONFIG_DISPLAY_CONNECTOR_HDMI) += connector-hdmi.o\nobj-$(CONFIG_DISPLAY_CONNECTOR_ANALOG_TV) += connector-analog-tv.o\nobj-$(CONFIG_DISPLAY_PANEL_DPI) += panel-dpi.o\nobj-$(CONFIG_DISPLAY_PANEL_DSI_CM) += panel-dsi-cm.o\nobj-$(CONFIG_DISPLAY_PANEL_SONY_ACX565AKM) += panel-sony-acx565akm.o\nobj-$(CONFIG_DISPLAY_PANEL_LGPHILIPS_LB035Q02) += panel-lgphilips-lb035q02.o\nobj-$(CONFIG_DISPLAY_PANEL_SHARP_LS037V7DW01) += panel-sharp-ls037v7dw01.o\nobj-$(CONFIG_DISPLAY_PANEL_TPO_TD028TTEC1) += panel-tpo-td028ttec1.o\nobj-$(CONFIG_DISPLAY_PANEL_TPO_TD043MTEA1) += panel-tpo-td043mtea1.o\nobj-$(CONFIG_DISPLAY_PANEL_NEC_NL8048HL11) += panel-nec-nl8048hl11.o\nobj-$(CONFIG_DISPLAY_PANEL_TLC59108) += panel-tlc59108.o\n```\n\n&emsp;&emsp;displays部分代码包含三部分，encoder、connector、panel，encoder部分包含了三种编码器，tpd12s015、sii9022、tc358768，connector使用hdmi，panel使用dpi\n\nencoder：\n\n```C\nstatic struct i2c_driver sii9022_driver = {\n\t.driver = {\n\t\t.name  = \"sii9022\",\n\t\t.owner = THIS_MODULE,\n\t\t.of_match_table = sii9022_of_match,\n\t\t},\n\t.probe\t\t= sii9022_probe,\n\t.remove\t\t= sii9022_remove,\n\t.id_table\t= sii9022_id,\n};\n\nstatic struct platform_driver tpd_driver = {\n\t.probe\t= tpd_probe,\n\t.remove\t= __exit_p(tpd_remove),\n\t.driver\t= {\n\t\t.name\t= \"tpd12s015\",\n\t\t.of_match_table = tpd_of_match,\n\t\t.suppress_bind_attrs = true,\n\t},\n};\n\nstatic struct i2c_driver tc358768_i2c_driver = {\n\t.driver = {\n\t\t.owner\t\t= THIS_MODULE,\n\t\t.name\t\t= TC358768_NAME,\n\t\t.of_match_table\t= tc358768_of_match,\n\t},\n\t.id_table\t= tc358768_id,\n\t.probe\t\t= tc358768_i2c_probe,\n\t.remove\t\t= tc358768_i2c_remove,\n};\n```\n\n&emsp;&emsp;connector & panel：\n\n```C\nstatic struct platform_driver hdmi_connector_driver = {\n\t.probe\t= hdmic_probe,\n\t.remove\t= __exit_p(hdmic_remove),\n\t.driver\t= {\n\t\t.name\t= \"connector-hdmi\",\n\t\t.of_match_table = hdmic_of_match,\n\t\t.suppress_bind_attrs = true,\n\t},\n};\n\nstatic struct platform_driver panel_dpi_driver = {\n\t.probe = panel_dpi_probe,\n\t.remove = __exit_p(panel_dpi_remove),\n\t.driver = {\n\t\t.name = \"panel-dpi\",\n\t\t.of_match_table = panel_dpi_of_match,\n\t\t.suppress_bind_attrs = true,\n\t},\n};\n\nstatic struct i2c_driver tlc59108_i2c_driver = {\n\t.driver = {\n\t\t.owner\t= THIS_MODULE,\n\t\t.name\t= TLC_NAME,\n\t\t.of_match_table = tlc59108_of_match,\n\t},\n\t.id_table\t= tlc59108_id,\n\t.probe\t\t= tlc59108_i2c_probe,\n\t.remove\t\t= tlc59108_i2c_remove,\n};\n```\n\n&emsp;&emsp;最终，pixel数据通过connector和panel转换成屏幕设备可以识别的格式，再通过自身的解码器将图像数据显示在屏幕上。\n\n\n\n#### 四. 驱动分析\n\n##### omap_drm_driver\n\n&emsp;&emsp;下面具体分析gpu/目录下整个TI SOC显示架构驱动，在最顶层是drm/、vga/、host1x/、ipu-v3/四个目录，其中drm/和vga/是无条件必须支持的模块，但vga模块这里没有使用到，因为我们使用的是MIPI DPI接口以及HDMI接口，DRM则是支撑整个显示子系统的核心，ipu模块则需要根据硬件平台是否启用， host1x模块是DMA引擎，用于对Tegra的图形和多媒体相关模块进行寄存器访问。所以重点在drm/目录。\n\n&emsp;&emsp;在drm/的顶层目录下的很多文件就是为了实现DRM和KMS架构，根据Makefile文件得知，DRM架构也需要i2c/、panel/、bridge/等核心模块支撑，其中panel/实现DRM面板驱动程序，最多需要一个调节器和一个GPIO才能运行，i2c/中的驱动是为了那些需要I2C协议的编码器，bridge/中的代码则是为了特殊display架构的需要。\n\n&emsp;&emsp;最后，剩下的便是各大厂家的驱动，以TI为例，TI实现了两种显示驱动的框架，一种是以LCDC作为显示控制器的显示架构，分布在tilcdc/中。另一种则是以gpu作为显示控制器的显示架构，分布在omapdrm/中。\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/ti_display_cy7yuz.png\" alt=\"ti_display\" style=\"zoom:30%;\" />\n\n&emsp;&emsp;AM57xx平台采用gpu作为显示控制器，所以其代码在omapdrm/中，在omapdrm/顶层目录的代码实现DRM架构所需要的内存管理、中断、帧缓存等核心操作，同时在这个层次实现KMS架构中子模块的驱动，包括plane、crtc、encoder、connector。从drm_driver结构中可以看到omap_drm_driver所确定的操作，omap_drm_driver的操作会向下调用具体的函数，这些都以函数指针的形式调用。\n\n&emsp;&emsp;init函数中去注册platform_drivers结构\n\n```C\nstatic struct platform_driver * const drivers[] = {\n\t&omap_dmm_driver,\n\t&pdev,\n};\n\nstruct platform_driver omap_dmm_driver = {\n\t.probe = omap_dmm_probe,\n\t.remove = omap_dmm_remove,\n\t.driver = {\n\t\t.owner = THIS_MODULE,\n\t\t.name = DMM_DRIVER_NAME,\n\t\t.of_match_table = of_match_ptr(dmm_of_match),\n\t\t.pm = &omap_dmm_pm_ops,\n\t},\n};\n\nstatic struct platform_driver pdev = {\n\t.driver = {\n\t\t.name = DRIVER_NAME,\n\t\t.pm = &omapdrm_pm_ops,\n\t},\n\t.probe = pdev_probe,\n\t.remove = pdev_remove,\n};\n\nstatic const struct of_device_id dmm_of_match[] = {\n\t{\n\t\t.compatible = \"ti,omap4-dmm\",\n\t\t.data = &dmm_omap4_platform_data,\n\t},\n\t{\n\t\t.compatible = \"ti,omap5-dmm\",\n\t\t.data = &dmm_omap5_platform_data,\n\t},\n\t{\n\t\t.compatible = \"ti,dra7-dmm\",\n\t\t.data = &dmm_dra7_platform_data,\n\t},\n\t{},\n};\n```\n\n&emsp;&emsp;因为没有具体硬件，这里所分析的都是默认的设备，具体应该根据实际硬件选择具体的设备和驱动程序。\n\n\n\n","slug":"display","published":1,"updated":"2021-03-04T17:09:10.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8y20002q5dip5655jtq","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;分析AM57xx系列架构显示原理，分别从硬件和软件两方面入手。总体看来，AM57xx系列芯片在硬件上面将显示部分分成了几大子系统，每个子系统负责相应的部分，而显示最基础的子系统就是DSS（Display Subsystem），它负责将frame buffer中图像数据真正的显示在显示器上。目前需求仅为显示静态图像，所以只分析这个子系统。</p>\n<a id=\"more\"></a>\n<h4 id=\"一-显示基础\"><a href=\"#一-显示基础\" class=\"headerlink\" title=\"一. 显示基础\"></a>一. 显示基础</h4><p>&emsp;&emsp;显示最基础的部件就是显示器/显示屏，而显示器由显示面板（display panel）和显示驱动器（display driver）组成，display panel负责发光，这也就是显示器的显示原理，根据其显示原理的不同，可以分为CRT、LED、OLED、LCD等显示器，其中CRT为阴极射线管发光显示，主要应用为上世纪的电视机显示，LED利用发光二极管显示，主要应用在广场中广告屏的显示，OLED为有机发光二极管，是目前娱乐设备的主要显示载体，主要用于超薄柔性显示，而LCD是液晶显示，目前主流的显示器，应用在各行各业。而display driver一是负责接收显示数据，二是控制控制面板发光。</p>\n<p>&emsp;&emsp;连接显示器的接口叫display interface，目前主流的display interface有VGA、DVI、HDMI、DP、雷电等接口，首先是VGA接口，CPU使用的是TTL电平，通过VGA接口则直接连接，因为其传输的是模拟信号。DVI传输的是数字信号，高分辨率下更加清晰并且失真会更少。HDMI接口（High Definition Multimedia Interface）是一种全数字化影像和声音传送接口，可以传送未压缩的音讯及视频信号，目前最流行的接口。DP接口（Display Port）具有上面所有显示器接口的一切优点，但目前成本较高。雷电接口融合了PCI Express和DisplayPort接口两种通信协议，PCI Express用于数据传输，DisplayPort用于显示，能同步传输1080p乃至4K视频和最多八声道音频，最高可达到40Gbps。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20200929164811165_skvhtc.png\" alt=\"image-20200929164811165\" style=\"zoom:67%;\"></p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201008190149500_xmw3h4.png\" alt=\"image-20201008190149500\"></p>\n<p>&emsp;&emsp;MIPI （Mobile Industry Processor Interface） 是2003年由ARM， Nokia， ST ，TI等公司成立的一个联盟，目的是把手机内部的接口如摄像头、显示屏接口、射频/基带接口等标准化，从而减少手机设计的复杂程度和增加设计灵活性。MIPI信号是成对传输的，主要是为了减少干扰，MIPI信号成对走线，两根线从波形看是成反相，所以有外部干扰过来，就会被抵消很大部分。主要用在平板和手机上使用。</p>\n<p>&emsp;&emsp;MIPI接口LCD包括1对差分时钟（CLKP，CLKN），4对数据差分线（D0P，D0N；D1P，D1N；D2P，D2N；D3P，D3N），每一对之间有GND线，4对数据差分线并不一定要全部使用，很多屏只需要2对就可以了；RESET（复位脚），STBYB（高电平有效），VGL，VGH（像素点上开关管的开启关闭电压，加在开关管的栅极上，VGH 高电平打开给像素点电容充电， VGL 负电压 关闭开关管），VCOM（ 液晶像素点的存储电容共用电极），VLED-（背光负极），VLED+（背光正极），电源有1.8V和3.3V。</p>\n<p>&emsp;&emsp;MIPI的液晶数据传输中涉及到是DWG（Display Working Group）工作组，该工作组提出了4种液晶规范分别为DCS（Display Command Set）、DBI（Display Bus Interface）、DPI（Display Pixel Interface）、DSI（Display Serial Interface）。DPI接口也可称为RGB接口，DBI接口可称为MCU接口</p>\n<ol>\n<li><p><strong>MIPI DCS（Display Command Set）</strong></p>\n<p>&emsp;&emsp;规范中规定了显示命令设置的一些规范，它并没有说明它具体的硬件连接方式，规定了液晶传输中各个命令的值和意义以及命令说明，主要是为了配合DBI规范、DSI规范来使用的。</p>\n</li>\n<li><p><strong>MIPI DBI（Display Bus Interface）</strong></p>\n<p>&emsp;&emsp;规范中规定了它的硬件接口方式，它是液晶数据总线接口，可细分为MIPI DBI Type A、MIPI DBI TypeB、MIPI DBI Type C这三种不同的模式，不同模式下的硬件接口以及数据的采样都有所不同，如在MIPI DBI Type A规范中规定是下降沿采样数据值（摩托罗拉6800接口 ），MIPI DBI Type B规范中规定是上升沿采样数据（英特尔8080接口 ）。<br>&emsp;&emsp;MIPI DBI Type A和MIPI DBI Type B同时又可细分为5种不同数据接口模式，分别为8位数据接口、9位数据接口、16位数据接口、18位数据接口、24位数据接口。不过市面上支持9位数据接口的液晶驱动IC并不多见，当然数据接口越大那么相同一个周期内数据接口越大，所传输的数据越多。而MIPI DBI Type C 只适用于传输于DCS规范中规定的命令和该命令所需要的参数值，不能传输液晶像素的颜色值（虽然DBI规范中规定能传输颜色值，不过市面上的液晶驱动IC是用来传输命令和命令所需的参数值）。<br>&emsp;&emsp;同样在DBI（Display Bus Interface）规范中规定不同数据接口所支持颜色位数。具体还是要参考所使用的液晶驱动IC资料来确定。<br>&emsp;&emsp;谈到颜色位数，需要说一下何谓颜色位数，颜色位数也称色彩位数，位图或者视频帧缓冲区中储存1像素的颜色所用的位数,它也称为位/像素(bpp)。色彩深度越高,可用的颜色就越多。市面常用液晶驱动IC支持的颜色位数有16、18、24这三种。</p>\n</li>\n<li><p><strong>MIPI DPI（Display Pixel Interface）</strong></p>\n<p>&emsp;&emsp;规范中所规定的硬件接口跟DBI规范中并不相同，它不是像DBI规范用Command/Data配置液晶驱动IC的寄存器再进行操作。某种程度上，DPI与DBI的最大差别是DPI的数据线和控制线分离，而DBI是复用的。同样使用DBI接口的液晶很少有大屏幕的，因为需要更多的GRAM从而提高了生产成本，而DPI接口即不需要，因为它是直接写屏，速度快，常用于显示视频或动画用。<br>&emsp;&emsp;DPI从它的名称中就可以看出它是直接对液晶的各像素点进行操作的，它是利用（H，V）这两个行场信号进行对各像素点进行颜色填充操作。填充速度快，可用于动画显示，目前手机液晶屏所用的接口就是这一类。H（H-SYNC）称为行同步信号；V（V-SYNC）称为场同步信号。它像模拟电视机那样用电子枪那样进行扫频显示，不过它对时序控制要求很高。因此一般的MCU芯片很难支持。</p>\n</li>\n<li><p><strong>MIPI DSI(Display Serial Interface)</strong></p>\n<p>符合MIPI协定的串列显示器界面协议，主机与显示器之间用差分信号线连接。<br>一对clock信号和1~4对data信号<br>一般情况下data0可以配置成双向传输<br>一个主机端可以允许同时与多个从属端进行通信</p>\n</li>\n</ol>\n<p>&emsp;&emsp;最后就是display controller，也就是显示控制器，显示控制器如果在系统中配置使用了，则与其他设备一样挂载到总线上，最后，三者关系如下</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877433/samples/display/display_feyrnx.png\" alt=\"display\" style=\"zoom:30%;\"></p>\n<h4 id=\"二-AM57xx-DSS\"><a href=\"#二-AM57xx-DSS\" class=\"headerlink\" title=\"二. AM57xx DSS\"></a>二. AM57xx DSS</h4><p>&emsp;&emsp;AM57xx系列芯片都有一个显示子系统DSS（Display Subsystem），总体架构为</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201019110632743_unug6k.png\" alt=\"image-20201019110632743\"></p>\n<p>&emsp;&emsp;DSS主要由DISPC（Display controller）和HDMI protocol engine组成，DISPC又由DMA、LCD/TV outputs、GFX（graphics pipeline）、video pipelines、write-back pipeline组成。</p>\n<h5 id=\"2-1-DISPC\"><a href=\"#2-1-DISPC\" class=\"headerlink\" title=\"2.1 DISPC\"></a>2.1 DISPC</h5><p>&emsp;&emsp;在显示过程中必须得去配置DISPC使其工作起来，五个管道（pipelines）中，VIDx和GFX负责图像数据的输出，WB负责数据的反馈以进行图像数据的处理，三个LCD outputs则负责将输入的ARGB32-8888格式像素数据转换成 RGB24-888 或 YUV4:2:2 格式像素数据，TV out负责将ARGB40-10.10.10.10格式像素数据直接输出，支持MIPI DPI协议。</p>\n<p>​        数据的源头都是通过DMA搬运，节省CPU的开销。架构为：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201019171629011_sgf49x.png\" alt=\"image-20201019171629011\"></p>\n<h5 id=\"2-2-HDMI\"><a href=\"#2-2-HDMI\" class=\"headerlink\" title=\"2.2 HDMI\"></a>2.2 HDMI</h5><p>&emsp;&emsp;HDMI总体架构：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/image-20201019172746174_psdzlx.png\" alt=\"image-20201019172746174\" style=\"zoom:100%;\"></p>\n<p>&emsp;&emsp;当DISPC处理好数据格式，将数据发送给HDMI模块，而HDMI模块再将数据传送给HDMI_PHY，HDMI_PHY负责将数据输出显示，当配置HDMI接口时需要配置HDCP、HDMI模块、HDMI_PHY、PLLTRL_HDMI四个模块才能使其工作。工作时也需遵循HDMI接口标准。</p>\n<h4 id=\"三-显示子系统\"><a href=\"#三-显示子系统\" class=\"headerlink\" title=\"三. 显示子系统\"></a>三. 显示子系统</h4><h5 id=\"3-1-总览\"><a href=\"#3-1-总览\" class=\"headerlink\" title=\"3.1 总览\"></a>3.1 总览</h5><p>&emsp;&emsp;显示子系统是Linux系统中最复杂的子系统之一，因为其操作的复杂性，GPU工作的特殊性和重要性，导致整个显示子系统的层次关系很多，我们只关注kernel部分。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/seq_dispaly_gzylbc.png\" alt=\"seq_dispaly\" style=\"zoom:18%;\"></p>\n<p>&emsp;&emsp;在Linux内核中对于显示部分的驱动被分成了两部分，一部分是gpu目录下的显卡的驱动，另一部分是video目录下视频相关的驱动，二者都是基于frame buffer（帧缓存），在gpu/目录中，最外层的各种drm_xxx文件实现了DRI（Direct Render Infrastructure），通过这些接口能够直接访问底层的图形设备，例如LCDC、GPU等，而具体的硬件驱动在更具体的下一级目录中。通过Makefile文件可以梳理出DRM架构各个文件之间的关系：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drm-y       :=\tdrm_auth.o drm_bufs.o drm_cache.o \\</span><br><span class=\"line\">\t\tdrm_context.o drm_dma.o \\</span><br><span class=\"line\">\t\tdrm_fops.o drm_gem.o drm_ioctl.o drm_irq.o \\</span><br><span class=\"line\">\t\tdrm_lock.o drm_memory.o drm_drv.o drm_vm.o \\</span><br><span class=\"line\">\t\tdrm_scatter.o drm_pci.o \\</span><br><span class=\"line\">\t\tdrm_platform.o drm_sysfs.o drm_hashtab.o drm_mm.o \\</span><br><span class=\"line\">\t\tdrm_crtc.o drm_modes.o drm_edid.o \\</span><br><span class=\"line\">\t\tdrm_info.o drm_debugfs.o drm_encoder_slave.o \\</span><br><span class=\"line\">\t\tdrm_trace_points.o drm_global.o drm_prime.o \\</span><br><span class=\"line\">\t\tdrm_rect.o drm_vma_manager.o drm_flip_work.o \\</span><br><span class=\"line\">\t\tdrm_modeset_lock.o drm_atomic.o drm_bridge.o</span><br><span class=\"line\"></span><br><span class=\"line\">drm-<span class=\"variable\">$(CONFIG_DRM_GEM_CMA_HELPER)</span> += drm_gem_cma_helper.o</span><br><span class=\"line\">drm-<span class=\"variable\">$(CONFIG_PCI)</span> += ati_pcigart.o</span><br><span class=\"line\">drm-<span class=\"variable\">$(CONFIG_OF)</span> += drm_of.o</span><br><span class=\"line\"></span><br><span class=\"line\">drm-y += $(drm-m)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;内核中的DRM为X server或Mesa 实现了操作操作硬件的接口，从而保证图像数据传输的低延迟。在同一文件夹下还存在着另外一种架构，这种架构主要是将用于控制显示设备属性的操作提供给上层直接使用，KMS（Kernel Mode Set）就是为了实现这种操作。在gpu/drm/目录中，实现KMS的文件有：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drm_kms_helper-y := drm_crtc_helper.o drm_dp_helper.o drm_probe_helper.o \\</span><br><span class=\"line\">\t\tdrm_plane_helper.o drm_dp_mst_topology.o drm_atomic_helper.o</span><br><span class=\"line\">drm_kms_helper-<span class=\"variable\">$(CONFIG_DRM_FBDEV_EMULATION)</span> += drm_fb_helper.o</span><br><span class=\"line\">drm_kms_helper-<span class=\"variable\">$(CONFIG_DRM_KMS_CMA_HELPER)</span> += drm_fb_cma_helper.o</span><br><span class=\"line\"></span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DRM_KMS_HELPER)</span> += drm_kms_helper.o</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;通过DRM和KMS的封装，他们向上提供接口，向下协调硬件驱动。下面分析AM57xx系列芯片的显示驱动，同样是Makefile文件：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj-y\t\t\t+= omapdrm/</span><br><span class=\"line\">obj-y\t\t\t+= tilcdc/</span><br><span class=\"line\">obj-y\t\t\t+= i2c/</span><br><span class=\"line\">obj-y\t\t\t+= panel/</span><br><span class=\"line\">obj-y\t\t\t+= bridge/</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;其中，omapdrm/目录中实现AM57xx系列芯片上面对应的显示子系统，tilcdc/目录则是LCD controller下面抽象层次的实现，i2c/、panel/、bridge/目录则是关系具体的显示驱动底层的代码，默认的是NXP_TDA998X，后续需要根据具体显示设备具体分析，各个目录中的显示驱动程序所需要调用通用函数则都是在当前目录中实现，在当前目录还实现了DRM的核心层。</p>\n<h5 id=\"3-2-DRM\"><a href=\"#3-2-DRM\" class=\"headerlink\" title=\"3.2 DRM\"></a>3.2 DRM</h5><p>&emsp;&emsp;DRM（Direct Render Manager）站在所有图形驱动的上层，为图形驱动程序提供了多种服务，同时向上通过libdrm提供应用程序接口，libdrm是包装大多数DRM ioctl的库。DRM提供的服务包括vblank事件处理，内存管理，输出管理，帧缓冲区管理，命令提交和防护，挂起/恢复支持以及DMA传输。</p>\n<p>&emsp;&emsp;其驱动代码在gpu/omapdrm/omap_drv.c中，主要结构是drm_driver</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">drm_driver</span> <span class=\"title\">omap_drm_driver</span> = &#123;</span></span><br><span class=\"line\">\t.driver_features = DRIVER_MODESET | DRIVER_GEM  | DRIVER_PRIME |</span><br><span class=\"line\">\t\tDRIVER_ATOMIC | DRIVER_RENDER,</span><br><span class=\"line\">\t.load = dev_load,</span><br><span class=\"line\">\t.unload = dev_unload,</span><br><span class=\"line\">\t.open = dev_open,</span><br><span class=\"line\">\t.lastclose = dev_lastclose,</span><br><span class=\"line\">\t.preclose = dev_preclose,</span><br><span class=\"line\">\t.postclose = dev_postclose,</span><br><span class=\"line\">\t.set_busid = drm_platform_set_busid,</span><br><span class=\"line\">\t.get_vblank_counter = drm_vblank_no_hw_counter,</span><br><span class=\"line\">\t.enable_vblank = omap_irq_enable_vblank,</span><br><span class=\"line\">\t.disable_vblank = omap_irq_disable_vblank,</span><br><span class=\"line\">#ifdef CONFIG_DEBUG_FS</span><br><span class=\"line\">\t.debugfs_init = omap_debugfs_init,</span><br><span class=\"line\">\t.debugfs_cleanup = omap_debugfs_cleanup,</span><br><span class=\"line\">#endif</span><br><span class=\"line\">\t.prime_handle_to_fd = drm_gem_prime_handle_to_fd,</span><br><span class=\"line\">\t.prime_fd_to_handle = drm_gem_prime_fd_to_handle,</span><br><span class=\"line\">\t.gem_prime_export = omap_gem_prime_export,</span><br><span class=\"line\">\t.gem_prime_import = omap_gem_prime_import,</span><br><span class=\"line\">\t.gem_free_object = omap_gem_free_object,</span><br><span class=\"line\">\t.gem_vm_ops = &amp;omap_gem_vm_ops,</span><br><span class=\"line\">\t.dumb_create = omap_gem_dumb_create,</span><br><span class=\"line\">\t.dumb_map_offset = omap_gem_dumb_map_offset,</span><br><span class=\"line\">\t.dumb_destroy = drm_gem_dumb_destroy,</span><br><span class=\"line\">\t.ioctls = ioctls,</span><br><span class=\"line\">\t.num_ioctls = DRM_OMAP_NUM_IOCTLS,</span><br><span class=\"line\">\t.fops = &amp;omapdriver_fops,</span><br><span class=\"line\">\t.name = DRIVER_NAME,</span><br><span class=\"line\">\t.desc = DRIVER_DESC,</span><br><span class=\"line\">\t.date = DRIVER_DATE,</span><br><span class=\"line\">\t.major = DRIVER_MAJOR,</span><br><span class=\"line\">\t.minor = DRIVER_MINOR,</span><br><span class=\"line\">\t.patchlevel = DRIVER_PATCHLEVEL,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在Linux系统中需要大量的图形内存来存储与图形有关的数据，因此内存管理在DRM中至关重要，而且在DRM基础架构中发挥着核心作用。在DRM的内存管理核心子模块中包含两个内存管理器，Translation Table Manager（TTM）和Graphics Execution Manager（GEM）。</p>\n<p>&emsp;&emsp;TTM提供一个单一的用户空间API，可以满足所用硬件的要求，同时支持统一内存体系结构（UMA）设备和具有专用视频RAM的设备，同时也导致代码庞大而复杂。GEM为应对TTM的复杂性，没有为每个与图形内存相关的问题提供解决方案，而是确定驱动程序之间的通用代码，并创建一个共享的支持库，从而使初始化和执行要求更简单，但是不具有RAM管理功能，也仅限于UMA设备。</p>\n<p>&emsp;&emsp;vma-manager负责将依赖于驱动程序的任意内存区域映射到线性用户地址空间。</p>\n<p>&emsp;&emsp;PRIME是drm中的跨设备缓冲区共享框架，对于用户空间，PRIME缓冲区是基于dma-buf的文件描述符。</p>\n<p>&emsp;&emsp;drm_mm提供了一个简单的范围分配器。如果驱动程序合适的话，可以自由使用Linux内核中的资源分配器，drm_mm的好处是它位于DRM内核中，这意味着可以更容易满足gpu的一些特殊用途需求。</p>\n<h5 id=\"3-3-KMS\"><a href=\"#3-3-KMS\" class=\"headerlink\" title=\"3.3 KMS\"></a>3.3 KMS</h5><p>&emsp;&emsp;KMS通过frame buffer提供给用户空间，而frame buffer结构嵌入到plane（面）结构中构成KMS的基本对象，面结构用drm_plane表示，之后plane再将像素数据传入crtc。crtc代表整个显示管道，从drm_plane接收像素数据，并将数据混合到一起，之后crtc将数据输出到多个编码器，用drm_encoder表示，当crtc在运行时则至少有一个drm_encoder，每个编码器再将数据输出到连接器，drm_connector，连接器与编码器的连接可以通过软件指定。一个编码器可以驱动多个连接器，但一个连接器只能有一个编码器。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201026195531904_cuif1i.png\" alt=\"image-20201026195531904\"></p>\n<p>&emsp;&emsp;为了能够共享编码器的代码，可以将一个或多个Framebuffer GEM Helper Reference（由struct drm_bridge表示）链接到编码器。该链接是静态的，无法更改，这意味着需要在CRTC和任何编码器之间打开交叉映射开关。另一个对象是面板（drm_panel），它的存在是为了以某种形式显示像素的其他东西，通常嵌入到连接器中。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/image-20201027092623444_jbr83g.png\" alt=\"image-20201027092623444\"></p>\n<p>&emsp;&emsp;最后，通过连接器抽象实际的接收器，暴露给用户空间，通过这些KMS对象来完成数据的转换和输出。</p>\n<h5 id=\"3-4-dss\"><a href=\"#3-4-dss\" class=\"headerlink\" title=\"3.4 dss\"></a>3.4 dss</h5><p>&emsp;&emsp;在drm/的顶层目录下的很多文件就是为了实现DRM和KMS架构，根据Makefile文件得知，DRM架构也需要i2c/、panel/、bridge/等核心模块支撑，其中panel/实现DRM面板驱动程序，最多需要一个调节器和一个GPIO才能运行，i2c/中的驱动是为了那些需要I2C协议的编码器，bridge/中的代码则是为了特殊display架构的需要。</p>\n<p>&emsp;&emsp;最后，剩下的便是各大厂家的驱动，以TI为例，TI实现了两种显示驱动的框架，一种是以LCDC作为显示控制器的显示架构，分布在tilcdc/中。另一种则是以gpu作为显示控制器的显示架构，分布在omapdrm/中。</p>\n<p>&emsp;&emsp;AM57xx平台采用gpu作为显示控制器，所以其代码在omapdrm/中，在omapdrm/顶层目录的代码实现DRM架构所需要的内存管理、中断、帧缓存等核心操作，同时在这个层次实现KMS架构中子模块的驱动，包括plane、crtc、encoder、connector。从drm_driver结构中可以看到omap_drm_driver所确定的操作，omap_drm_driver的操作会向下调用具体的函数，这些都以函数指针的形式调用。</p>\n<p>&emsp;&emsp;init函数中去注册platform_drivers结</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> * <span class=\"title\">const</span> <span class=\"title\">drivers</span>[] = &#123;</span></span><br><span class=\"line\">\t&amp;omap_dmm_driver,</span><br><span class=\"line\">\t&amp;pdev,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">omap_dmm_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe = omap_dmm_probe,</span><br><span class=\"line\">\t.remove = omap_dmm_remove,</span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.owner = THIS_MODULE,</span><br><span class=\"line\">\t\t.name = DMM_DRIVER_NAME,</span><br><span class=\"line\">\t\t.of_match_table = of_match_ptr(dmm_of_match),</span><br><span class=\"line\">\t\t.pm = &amp;omap_dmm_pm_ops,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">pdev</span> = &#123;</span></span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.name = DRIVER_NAME,</span><br><span class=\"line\">\t\t.pm = &amp;omapdrm_pm_ops,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t.probe = pdev_probe,</span><br><span class=\"line\">\t.remove = pdev_remove,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> <span class=\"title\">dmm_of_match</span>[] = &#123;</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,omap4-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_omap4_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,omap5-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_omap5_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,dra7-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_dra7_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;dss在设备树中的节点：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dss@<span class=\"number\">58000000</span> &#123;</span><br><span class=\"line\">\t\t\tcompatible = <span class=\"string\">\"ti,dra7-dss\"</span>;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"ok\"</span>;</span><br><span class=\"line\">\t\t\tti,hwmods = <span class=\"string\">\"dss_core\"</span>;</span><br><span class=\"line\">\t\t\tsyscon-pll-ctrl = &lt;<span class=\"number\">0x8</span> <span class=\"number\">0x538</span>&gt;;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">#address-cells = <span class=\"meta-string\">&lt;0x1&gt;;</span></span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">#size-cells = <span class=\"meta-string\">&lt;0x1&gt;;</span></span></span><br><span class=\"line\">\t\t\tranges;</span><br><span class=\"line\">\t\t\treg = &lt;<span class=\"number\">0x58000000</span> <span class=\"number\">0x80</span> <span class=\"number\">0x58004054</span> <span class=\"number\">0x4</span> <span class=\"number\">0x58004300</span> <span class=\"number\">0x20</span> <span class=\"number\">0x58009054</span> <span class=\"number\">0x4</span> <span class=\"number\">0x58009300</span> <span class=\"number\">0x20</span>&gt;;</span><br><span class=\"line\">\t\t\treg-names = <span class=\"string\">\"dss\"</span>, <span class=\"string\">\"pll1_clkctrl\"</span>, <span class=\"string\">\"pll1\"</span>, <span class=\"string\">\"pll2_clkctrl\"</span>, <span class=\"string\">\"pll2\"</span>;</span><br><span class=\"line\">\t\t\tclocks = &lt;<span class=\"number\">0x10f</span> <span class=\"number\">0x110</span> <span class=\"number\">0x111</span>&gt;;</span><br><span class=\"line\">\t\t\tclock-names = <span class=\"string\">\"fck\"</span>, <span class=\"string\">\"video1_clk\"</span>, <span class=\"string\">\"video2_clk\"</span>;</span><br><span class=\"line\">\t\t\tvdda_video-supply = &lt;<span class=\"number\">0x112</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdispc@<span class=\"number\">58001000</span> &#123;</span><br><span class=\"line\">\t\t\t\tcompatible = <span class=\"string\">\"ti,dra7-dispc\"</span>;</span><br><span class=\"line\">\t\t\t\treg = &lt;<span class=\"number\">0x58001000</span> <span class=\"number\">0x1000</span>&gt;;</span><br><span class=\"line\">\t\t\t\tinterrupts = &lt;<span class=\"number\">0x0</span> <span class=\"number\">0x14</span> <span class=\"number\">0x4</span>&gt;;</span><br><span class=\"line\">\t\t\t\tti,hwmods = <span class=\"string\">\"dss_dispc\"</span>;</span><br><span class=\"line\">\t\t\t\tclocks = &lt;<span class=\"number\">0x10f</span>&gt;;</span><br><span class=\"line\">\t\t\t\tclock-names = <span class=\"string\">\"fck\"</span>;</span><br><span class=\"line\">\t\t\t\tsyscon-pol = &lt;<span class=\"number\">0x8</span> <span class=\"number\">0x534</span>&gt;;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tencoder@<span class=\"number\">58060000</span> &#123;</span><br><span class=\"line\">\t\t\t\tcompatible = <span class=\"string\">\"ti,dra7-hdmi\"</span>;</span><br><span class=\"line\">\t\t\t\treg = &lt;<span class=\"number\">0x58040000</span> <span class=\"number\">0x200</span> <span class=\"number\">0x58040200</span> <span class=\"number\">0x80</span> <span class=\"number\">0x58040300</span> <span class=\"number\">0x80</span> <span class=\"number\">0x58060000</span> <span class=\"number\">0x19000</span>&gt;;</span><br><span class=\"line\">\t\t\t\treg-names = <span class=\"string\">\"wp\"</span>, <span class=\"string\">\"pll\"</span>, <span class=\"string\">\"phy\"</span>, <span class=\"string\">\"core\"</span>;</span><br><span class=\"line\">\t\t\t\tinterrupts = &lt;<span class=\"number\">0x0</span> <span class=\"number\">0x60</span> <span class=\"number\">0x4</span>&gt;;</span><br><span class=\"line\">\t\t\t\tstatus = <span class=\"string\">\"disabled\"</span>;</span><br><span class=\"line\">\t\t\t\tti,hwmods = <span class=\"string\">\"dss_hdmi\"</span>;</span><br><span class=\"line\">\t\t\t\tclocks = &lt;<span class=\"number\">0x113</span> <span class=\"number\">0x114</span>&gt;;</span><br><span class=\"line\">\t\t\t\tclock-names = <span class=\"string\">\"fck\"</span>, <span class=\"string\">\"sys_clk\"</span>;</span><br><span class=\"line\">\t\t\t\tdmas = &lt;<span class=\"number\">0xd3</span> <span class=\"number\">0x4c</span>&gt;;</span><br><span class=\"line\">\t\t\t\tdma-names = <span class=\"string\">\"audio_tx\"</span>;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t\t&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;dss/目录中实现了TI DSS显示子系统的驱动，包括其中的dispc、hdmi engine以及支持的接口，在omap2系列平台中支持dpi接口、dsi接口、rfbi接口、venc接口、sdi接口，omap4以及以上平台支持hdmi接口，它们的驱动分别在具体的文件中，根据CONFIG_OMAPx_DSS_xxx来决定使用哪个接口。AM57xx平台当前配置为DPI接口和hdmi接口。</p>\n<p>&emsp;&emsp;DSS部分的代码可以分成四部分，omapdss_boot_init、omapdss_base、omapdss、omapdss6</p>\n<ul>\n<li><p>omapdss_boot_init</p>\n<p>这部分代码主要进行初始化，根据从设备树上匹配的dss节点进行配置数据，主要是通过“ti,dra7-dss”属性找到dss节点，再遍历其中的子节点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> <span class=\"title\">omapdss_of_match</span>[] __<span class=\"title\">initconst</span> = &#123;</span></span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap2-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap3-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap4-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap5-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,dra7-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,k2g-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">omapdss_boot_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span> *<span class=\"title\">dss</span>, *<span class=\"title\">child</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;dss_conv_list);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdss = of_find_matching_node(<span class=\"literal\">NULL</span>, omapdss_of_match);</span><br><span class=\"line\"></span><br><span class=\"line\">\tomapdss_walk_device(dss, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor_each_available_child_of_node(dss, child) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!of_find_property(child, <span class=\"string\">\"compatible\"</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\tomapdss_walk_device(child, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!list_empty(&amp;dss_conv_list)) &#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dss_conv_node</span> *<span class=\"title\">n</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tn = list_first_entry(&amp;dss_conv_list, struct dss_conv_node, <span class=\"built_in\">list</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!n-&gt;root)</span><br><span class=\"line\">\t\t\tomapdss_omapify_node(n-&gt;node);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlist_del(&amp;n-&gt;<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\t\tof_node_put(n-&gt;node);</span><br><span class=\"line\">\t\tkfree(n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>omapdss_base</p>\n<p>base部分代码由四部分组成，base、display、dss-of、output，每一部分都是实现DRM的基础，所以也是dss的基础，只列举其中的两个函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">omapdss_walk_device</span><span class=\"params\">(struct device *dev, struct device_node *node,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t<span class=\"keyword\">bool</span> dss_core)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span> *<span class=\"title\">n</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">omapdss_comp_node</span> *<span class=\"title\">comp</span> = <span class=\"title\">devm_kzalloc</span>(<span class=\"title\">dev</span>, <span class=\"title\">sizeof</span>(*<span class=\"title\">comp</span>),</span></span><br><span class=\"line\"><span class=\"class\">\t\t\t\t\t\t      <span class=\"title\">GFP_KERNEL</span>);</span></span><br><span class=\"line\">\tn = of_get_child_by_name(node, <span class=\"string\">\"ports\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tof_node_put(n);</span><br><span class=\"line\"></span><br><span class=\"line\">\tn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((n = of_graph_get_next_endpoint(node, n)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span> *<span class=\"title\">pn</span> = <span class=\"title\">of_graph_get_remote_port_parent</span>(<span class=\"title\">n</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!pn)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!of_device_is_available(pn) || omapdss_list_contains(pn)) &#123;</span><br><span class=\"line\">\t\t\tof_node_put(pn);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tomapdss_walk_device(dev, pn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">omapdss_stack_is_ready</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">omapdss_comp_node</span> *<span class=\"title\">comp</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlist_for_each_entry(comp, &amp;omapdss_comp_list, <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!omapdss_component_is_loaded(comp))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>omapdss</p>\n<p>这部分是TI dss架构的核心驱动代码，为了能够支持更多的设备和方便管理，这里同样抽象出核心层来对具体的驱动进行管理，这部分主要是dispc驱动代码以及具体的接口的驱动</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> <span class=\"title\">dispc_of_match</span>[] = &#123;</span></span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap2-dispc\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap3-dispc\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap4-dispc\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap5-dispc\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,dra7-dispc\"</span>, &#125;,</span><br><span class=\"line\">\t&#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">omap_dispchw_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe\t\t= dispc_probe,</span><br><span class=\"line\">\t.remove         = dispc_remove,</span><br><span class=\"line\">\t.driver         = &#123;</span><br><span class=\"line\">\t\t.name   = <span class=\"string\">\"omapdss_dispc\"</span>,</span><br><span class=\"line\">\t\t.pm\t= &amp;dispc_pm_ops,</span><br><span class=\"line\">\t\t.of_match_table = dispc_of_match,</span><br><span class=\"line\">\t\t.suppress_bind_attrs = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">dispc_init_platform_driver</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> platform_driver_register(&amp;omap_dispchw_driver);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispc_uninit_platform_driver</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tplatform_driver_unregister(&amp;omap_dispchw_driver);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>omapdss6</p>\n<p>对比可以发现，omapdss6是TI为了对自己家新平台k2g的支持，原理和前面dss架构相同</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">dss6_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe\t\t= dss6_probe,</span><br><span class=\"line\">\t.remove\t\t= dss6_remove,</span><br><span class=\"line\">\t.driver         = &#123;</span><br><span class=\"line\">\t\t.name   = <span class=\"string\">\"omap_dss6\"</span>,</span><br><span class=\"line\">\t\t.pm\t= &amp;dss6_pm_ops,</span><br><span class=\"line\">\t\t.of_match_table = dss6_of_match,</span><br><span class=\"line\">\t\t.suppress_bind_attrs = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-5-displays\"><a href=\"#3-5-displays\" class=\"headerlink\" title=\"3.5 displays\"></a>3.5 displays</h5><p>&emsp;&emsp;display/目录下都是和具体硬件相关的驱动代码，由encoder、connector、panel三部分组成，根据配置CONFIG_DISPLAY_xxx_xx决定使用哪个具体的驱动，如果没有对应的型号可以自己编写对应的驱动</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_OPA362)</span> += encoder-opa362.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_TFP410)</span> += encoder-tfp410.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_TPD12S015)</span> += encoder-tpd12s015.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_DRA7EVM_ENCODER_TPD12S015)</span> += dra7-evm-encoder-tpd12s015.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_SII9022)</span> += encoder-sii9022.o</span><br><span class=\"line\">encoder-sii9022-y += encoder-sii9022-video.o</span><br><span class=\"line\">encoder-sii9022-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_SII9022_AUDIO_CODEC)</span> += encoder-sii9022-audio.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_TC358768)</span> += encoder-tc358768.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_CONNECTOR_DVI)</span> += connector-dvi.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_CONNECTOR_HDMI)</span> += connector-hdmi.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_CONNECTOR_ANALOG_TV)</span> += connector-analog-tv.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_DPI)</span> += panel-dpi.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_DSI_CM)</span> += panel-dsi-cm.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_SONY_ACX565AKM)</span> += panel-sony-acx565akm.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_LGPHILIPS_LB035Q02)</span> += panel-lgphilips-lb035q02.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_SHARP_LS037V7DW01)</span> += panel-sharp-ls037v7dw01.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_TPO_TD028TTEC1)</span> += panel-tpo-td028ttec1.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_TPO_TD043MTEA1)</span> += panel-tpo-td043mtea1.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_NEC_NL8048HL11)</span> += panel-nec-nl8048hl11.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_TLC59108)</span> += panel-tlc59108.o</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;displays部分代码包含三部分，encoder、connector、panel，encoder部分包含了三种编码器，tpd12s015、sii9022、tc358768，connector使用hdmi，panel使用dpi</p>\n<p>encoder：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">i2c_driver</span> <span class=\"title\">sii9022_driver</span> = &#123;</span></span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.name  = <span class=\"string\">\"sii9022\"</span>,</span><br><span class=\"line\">\t\t.owner = THIS_MODULE,</span><br><span class=\"line\">\t\t.of_match_table = sii9022_of_match,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t.probe\t\t= sii9022_probe,</span><br><span class=\"line\">\t.remove\t\t= sii9022_remove,</span><br><span class=\"line\">\t.id_table\t= sii9022_id,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">tpd_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe\t= tpd_probe,</span><br><span class=\"line\">\t.remove\t= __exit_p(tpd_remove),</span><br><span class=\"line\">\t.driver\t= &#123;</span><br><span class=\"line\">\t\t.name\t= <span class=\"string\">\"tpd12s015\"</span>,</span><br><span class=\"line\">\t\t.of_match_table = tpd_of_match,</span><br><span class=\"line\">\t\t.suppress_bind_attrs = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">i2c_driver</span> <span class=\"title\">tc358768_i2c_driver</span> = &#123;</span></span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.owner\t\t= THIS_MODULE,</span><br><span class=\"line\">\t\t.name\t\t= TC358768_NAME,</span><br><span class=\"line\">\t\t.of_match_table\t= tc358768_of_match,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t.id_table\t= tc358768_id,</span><br><span class=\"line\">\t.probe\t\t= tc358768_i2c_probe,</span><br><span class=\"line\">\t.remove\t\t= tc358768_i2c_remove,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;connector &amp; panel：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">hdmi_connector_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe\t= hdmic_probe,</span><br><span class=\"line\">\t.remove\t= __exit_p(hdmic_remove),</span><br><span class=\"line\">\t.driver\t= &#123;</span><br><span class=\"line\">\t\t.name\t= <span class=\"string\">\"connector-hdmi\"</span>,</span><br><span class=\"line\">\t\t.of_match_table = hdmic_of_match,</span><br><span class=\"line\">\t\t.suppress_bind_attrs = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">panel_dpi_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe = panel_dpi_probe,</span><br><span class=\"line\">\t.remove = __exit_p(panel_dpi_remove),</span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.name = <span class=\"string\">\"panel-dpi\"</span>,</span><br><span class=\"line\">\t\t.of_match_table = panel_dpi_of_match,</span><br><span class=\"line\">\t\t.suppress_bind_attrs = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">i2c_driver</span> <span class=\"title\">tlc59108_i2c_driver</span> = &#123;</span></span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.owner\t= THIS_MODULE,</span><br><span class=\"line\">\t\t.name\t= TLC_NAME,</span><br><span class=\"line\">\t\t.of_match_table = tlc59108_of_match,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t.id_table\t= tlc59108_id,</span><br><span class=\"line\">\t.probe\t\t= tlc59108_i2c_probe,</span><br><span class=\"line\">\t.remove\t\t= tlc59108_i2c_remove,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;最终，pixel数据通过connector和panel转换成屏幕设备可以识别的格式，再通过自身的解码器将图像数据显示在屏幕上。</p>\n<h4 id=\"四-驱动分析\"><a href=\"#四-驱动分析\" class=\"headerlink\" title=\"四. 驱动分析\"></a>四. 驱动分析</h4><h5 id=\"omap-drm-driver\"><a href=\"#omap-drm-driver\" class=\"headerlink\" title=\"omap_drm_driver\"></a>omap_drm_driver</h5><p>&emsp;&emsp;下面具体分析gpu/目录下整个TI SOC显示架构驱动，在最顶层是drm/、vga/、host1x/、ipu-v3/四个目录，其中drm/和vga/是无条件必须支持的模块，但vga模块这里没有使用到，因为我们使用的是MIPI DPI接口以及HDMI接口，DRM则是支撑整个显示子系统的核心，ipu模块则需要根据硬件平台是否启用， host1x模块是DMA引擎，用于对Tegra的图形和多媒体相关模块进行寄存器访问。所以重点在drm/目录。</p>\n<p>&emsp;&emsp;在drm/的顶层目录下的很多文件就是为了实现DRM和KMS架构，根据Makefile文件得知，DRM架构也需要i2c/、panel/、bridge/等核心模块支撑，其中panel/实现DRM面板驱动程序，最多需要一个调节器和一个GPIO才能运行，i2c/中的驱动是为了那些需要I2C协议的编码器，bridge/中的代码则是为了特殊display架构的需要。</p>\n<p>&emsp;&emsp;最后，剩下的便是各大厂家的驱动，以TI为例，TI实现了两种显示驱动的框架，一种是以LCDC作为显示控制器的显示架构，分布在tilcdc/中。另一种则是以gpu作为显示控制器的显示架构，分布在omapdrm/中。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/ti_display_cy7yuz.png\" alt=\"ti_display\" style=\"zoom:30%;\"></p>\n<p>&emsp;&emsp;AM57xx平台采用gpu作为显示控制器，所以其代码在omapdrm/中，在omapdrm/顶层目录的代码实现DRM架构所需要的内存管理、中断、帧缓存等核心操作，同时在这个层次实现KMS架构中子模块的驱动，包括plane、crtc、encoder、connector。从drm_driver结构中可以看到omap_drm_driver所确定的操作，omap_drm_driver的操作会向下调用具体的函数，这些都以函数指针的形式调用。</p>\n<p>&emsp;&emsp;init函数中去注册platform_drivers结构</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> * <span class=\"title\">const</span> <span class=\"title\">drivers</span>[] = &#123;</span></span><br><span class=\"line\">\t&amp;omap_dmm_driver,</span><br><span class=\"line\">\t&amp;pdev,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">omap_dmm_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe = omap_dmm_probe,</span><br><span class=\"line\">\t.remove = omap_dmm_remove,</span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.owner = THIS_MODULE,</span><br><span class=\"line\">\t\t.name = DMM_DRIVER_NAME,</span><br><span class=\"line\">\t\t.of_match_table = of_match_ptr(dmm_of_match),</span><br><span class=\"line\">\t\t.pm = &amp;omap_dmm_pm_ops,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">pdev</span> = &#123;</span></span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.name = DRIVER_NAME,</span><br><span class=\"line\">\t\t.pm = &amp;omapdrm_pm_ops,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t.probe = pdev_probe,</span><br><span class=\"line\">\t.remove = pdev_remove,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> <span class=\"title\">dmm_of_match</span>[] = &#123;</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,omap4-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_omap4_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,omap5-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_omap5_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,dra7-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_dra7_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;因为没有具体硬件，这里所分析的都是默认的设备，具体应该根据实际硬件选择具体的设备和驱动程序。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;分析AM57xx系列架构显示原理，分别从硬件和软件两方面入手。总体看来，AM57xx系列芯片在硬件上面将显示部分分成了几大子系统，每个子系统负责相应的部分，而显示最基础的子系统就是DSS（Display Subsystem），它负责将frame buffer中图像数据真正的显示在显示器上。目前需求仅为显示静态图像，所以只分析这个子系统。</p>","more":"<h4 id=\"一-显示基础\"><a href=\"#一-显示基础\" class=\"headerlink\" title=\"一. 显示基础\"></a>一. 显示基础</h4><p>&emsp;&emsp;显示最基础的部件就是显示器/显示屏，而显示器由显示面板（display panel）和显示驱动器（display driver）组成，display panel负责发光，这也就是显示器的显示原理，根据其显示原理的不同，可以分为CRT、LED、OLED、LCD等显示器，其中CRT为阴极射线管发光显示，主要应用为上世纪的电视机显示，LED利用发光二极管显示，主要应用在广场中广告屏的显示，OLED为有机发光二极管，是目前娱乐设备的主要显示载体，主要用于超薄柔性显示，而LCD是液晶显示，目前主流的显示器，应用在各行各业。而display driver一是负责接收显示数据，二是控制控制面板发光。</p>\n<p>&emsp;&emsp;连接显示器的接口叫display interface，目前主流的display interface有VGA、DVI、HDMI、DP、雷电等接口，首先是VGA接口，CPU使用的是TTL电平，通过VGA接口则直接连接，因为其传输的是模拟信号。DVI传输的是数字信号，高分辨率下更加清晰并且失真会更少。HDMI接口（High Definition Multimedia Interface）是一种全数字化影像和声音传送接口，可以传送未压缩的音讯及视频信号，目前最流行的接口。DP接口（Display Port）具有上面所有显示器接口的一切优点，但目前成本较高。雷电接口融合了PCI Express和DisplayPort接口两种通信协议，PCI Express用于数据传输，DisplayPort用于显示，能同步传输1080p乃至4K视频和最多八声道音频，最高可达到40Gbps。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20200929164811165_skvhtc.png\" alt=\"image-20200929164811165\" style=\"zoom:67%;\"></p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201008190149500_xmw3h4.png\" alt=\"image-20201008190149500\"></p>\n<p>&emsp;&emsp;MIPI （Mobile Industry Processor Interface） 是2003年由ARM， Nokia， ST ，TI等公司成立的一个联盟，目的是把手机内部的接口如摄像头、显示屏接口、射频/基带接口等标准化，从而减少手机设计的复杂程度和增加设计灵活性。MIPI信号是成对传输的，主要是为了减少干扰，MIPI信号成对走线，两根线从波形看是成反相，所以有外部干扰过来，就会被抵消很大部分。主要用在平板和手机上使用。</p>\n<p>&emsp;&emsp;MIPI接口LCD包括1对差分时钟（CLKP，CLKN），4对数据差分线（D0P，D0N；D1P，D1N；D2P，D2N；D3P，D3N），每一对之间有GND线，4对数据差分线并不一定要全部使用，很多屏只需要2对就可以了；RESET（复位脚），STBYB（高电平有效），VGL，VGH（像素点上开关管的开启关闭电压，加在开关管的栅极上，VGH 高电平打开给像素点电容充电， VGL 负电压 关闭开关管），VCOM（ 液晶像素点的存储电容共用电极），VLED-（背光负极），VLED+（背光正极），电源有1.8V和3.3V。</p>\n<p>&emsp;&emsp;MIPI的液晶数据传输中涉及到是DWG（Display Working Group）工作组，该工作组提出了4种液晶规范分别为DCS（Display Command Set）、DBI（Display Bus Interface）、DPI（Display Pixel Interface）、DSI（Display Serial Interface）。DPI接口也可称为RGB接口，DBI接口可称为MCU接口</p>\n<ol>\n<li><p><strong>MIPI DCS（Display Command Set）</strong></p>\n<p>&emsp;&emsp;规范中规定了显示命令设置的一些规范，它并没有说明它具体的硬件连接方式，规定了液晶传输中各个命令的值和意义以及命令说明，主要是为了配合DBI规范、DSI规范来使用的。</p>\n</li>\n<li><p><strong>MIPI DBI（Display Bus Interface）</strong></p>\n<p>&emsp;&emsp;规范中规定了它的硬件接口方式，它是液晶数据总线接口，可细分为MIPI DBI Type A、MIPI DBI TypeB、MIPI DBI Type C这三种不同的模式，不同模式下的硬件接口以及数据的采样都有所不同，如在MIPI DBI Type A规范中规定是下降沿采样数据值（摩托罗拉6800接口 ），MIPI DBI Type B规范中规定是上升沿采样数据（英特尔8080接口 ）。<br>&emsp;&emsp;MIPI DBI Type A和MIPI DBI Type B同时又可细分为5种不同数据接口模式，分别为8位数据接口、9位数据接口、16位数据接口、18位数据接口、24位数据接口。不过市面上支持9位数据接口的液晶驱动IC并不多见，当然数据接口越大那么相同一个周期内数据接口越大，所传输的数据越多。而MIPI DBI Type C 只适用于传输于DCS规范中规定的命令和该命令所需要的参数值，不能传输液晶像素的颜色值（虽然DBI规范中规定能传输颜色值，不过市面上的液晶驱动IC是用来传输命令和命令所需的参数值）。<br>&emsp;&emsp;同样在DBI（Display Bus Interface）规范中规定不同数据接口所支持颜色位数。具体还是要参考所使用的液晶驱动IC资料来确定。<br>&emsp;&emsp;谈到颜色位数，需要说一下何谓颜色位数，颜色位数也称色彩位数，位图或者视频帧缓冲区中储存1像素的颜色所用的位数,它也称为位/像素(bpp)。色彩深度越高,可用的颜色就越多。市面常用液晶驱动IC支持的颜色位数有16、18、24这三种。</p>\n</li>\n<li><p><strong>MIPI DPI（Display Pixel Interface）</strong></p>\n<p>&emsp;&emsp;规范中所规定的硬件接口跟DBI规范中并不相同，它不是像DBI规范用Command/Data配置液晶驱动IC的寄存器再进行操作。某种程度上，DPI与DBI的最大差别是DPI的数据线和控制线分离，而DBI是复用的。同样使用DBI接口的液晶很少有大屏幕的，因为需要更多的GRAM从而提高了生产成本，而DPI接口即不需要，因为它是直接写屏，速度快，常用于显示视频或动画用。<br>&emsp;&emsp;DPI从它的名称中就可以看出它是直接对液晶的各像素点进行操作的，它是利用（H，V）这两个行场信号进行对各像素点进行颜色填充操作。填充速度快，可用于动画显示，目前手机液晶屏所用的接口就是这一类。H（H-SYNC）称为行同步信号；V（V-SYNC）称为场同步信号。它像模拟电视机那样用电子枪那样进行扫频显示，不过它对时序控制要求很高。因此一般的MCU芯片很难支持。</p>\n</li>\n<li><p><strong>MIPI DSI(Display Serial Interface)</strong></p>\n<p>符合MIPI协定的串列显示器界面协议，主机与显示器之间用差分信号线连接。<br>一对clock信号和1~4对data信号<br>一般情况下data0可以配置成双向传输<br>一个主机端可以允许同时与多个从属端进行通信</p>\n</li>\n</ol>\n<p>&emsp;&emsp;最后就是display controller，也就是显示控制器，显示控制器如果在系统中配置使用了，则与其他设备一样挂载到总线上，最后，三者关系如下</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877433/samples/display/display_feyrnx.png\" alt=\"display\" style=\"zoom:30%;\"></p>\n<h4 id=\"二-AM57xx-DSS\"><a href=\"#二-AM57xx-DSS\" class=\"headerlink\" title=\"二. AM57xx DSS\"></a>二. AM57xx DSS</h4><p>&emsp;&emsp;AM57xx系列芯片都有一个显示子系统DSS（Display Subsystem），总体架构为</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201019110632743_unug6k.png\" alt=\"image-20201019110632743\"></p>\n<p>&emsp;&emsp;DSS主要由DISPC（Display controller）和HDMI protocol engine组成，DISPC又由DMA、LCD/TV outputs、GFX（graphics pipeline）、video pipelines、write-back pipeline组成。</p>\n<h5 id=\"2-1-DISPC\"><a href=\"#2-1-DISPC\" class=\"headerlink\" title=\"2.1 DISPC\"></a>2.1 DISPC</h5><p>&emsp;&emsp;在显示过程中必须得去配置DISPC使其工作起来，五个管道（pipelines）中，VIDx和GFX负责图像数据的输出，WB负责数据的反馈以进行图像数据的处理，三个LCD outputs则负责将输入的ARGB32-8888格式像素数据转换成 RGB24-888 或 YUV4:2:2 格式像素数据，TV out负责将ARGB40-10.10.10.10格式像素数据直接输出，支持MIPI DPI协议。</p>\n<p>​        数据的源头都是通过DMA搬运，节省CPU的开销。架构为：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201019171629011_sgf49x.png\" alt=\"image-20201019171629011\"></p>\n<h5 id=\"2-2-HDMI\"><a href=\"#2-2-HDMI\" class=\"headerlink\" title=\"2.2 HDMI\"></a>2.2 HDMI</h5><p>&emsp;&emsp;HDMI总体架构：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/image-20201019172746174_psdzlx.png\" alt=\"image-20201019172746174\" style=\"zoom:100%;\"></p>\n<p>&emsp;&emsp;当DISPC处理好数据格式，将数据发送给HDMI模块，而HDMI模块再将数据传送给HDMI_PHY，HDMI_PHY负责将数据输出显示，当配置HDMI接口时需要配置HDCP、HDMI模块、HDMI_PHY、PLLTRL_HDMI四个模块才能使其工作。工作时也需遵循HDMI接口标准。</p>\n<h4 id=\"三-显示子系统\"><a href=\"#三-显示子系统\" class=\"headerlink\" title=\"三. 显示子系统\"></a>三. 显示子系统</h4><h5 id=\"3-1-总览\"><a href=\"#3-1-总览\" class=\"headerlink\" title=\"3.1 总览\"></a>3.1 总览</h5><p>&emsp;&emsp;显示子系统是Linux系统中最复杂的子系统之一，因为其操作的复杂性，GPU工作的特殊性和重要性，导致整个显示子系统的层次关系很多，我们只关注kernel部分。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/seq_dispaly_gzylbc.png\" alt=\"seq_dispaly\" style=\"zoom:18%;\"></p>\n<p>&emsp;&emsp;在Linux内核中对于显示部分的驱动被分成了两部分，一部分是gpu目录下的显卡的驱动，另一部分是video目录下视频相关的驱动，二者都是基于frame buffer（帧缓存），在gpu/目录中，最外层的各种drm_xxx文件实现了DRI（Direct Render Infrastructure），通过这些接口能够直接访问底层的图形设备，例如LCDC、GPU等，而具体的硬件驱动在更具体的下一级目录中。通过Makefile文件可以梳理出DRM架构各个文件之间的关系：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drm-y       :=\tdrm_auth.o drm_bufs.o drm_cache.o \\</span><br><span class=\"line\">\t\tdrm_context.o drm_dma.o \\</span><br><span class=\"line\">\t\tdrm_fops.o drm_gem.o drm_ioctl.o drm_irq.o \\</span><br><span class=\"line\">\t\tdrm_lock.o drm_memory.o drm_drv.o drm_vm.o \\</span><br><span class=\"line\">\t\tdrm_scatter.o drm_pci.o \\</span><br><span class=\"line\">\t\tdrm_platform.o drm_sysfs.o drm_hashtab.o drm_mm.o \\</span><br><span class=\"line\">\t\tdrm_crtc.o drm_modes.o drm_edid.o \\</span><br><span class=\"line\">\t\tdrm_info.o drm_debugfs.o drm_encoder_slave.o \\</span><br><span class=\"line\">\t\tdrm_trace_points.o drm_global.o drm_prime.o \\</span><br><span class=\"line\">\t\tdrm_rect.o drm_vma_manager.o drm_flip_work.o \\</span><br><span class=\"line\">\t\tdrm_modeset_lock.o drm_atomic.o drm_bridge.o</span><br><span class=\"line\"></span><br><span class=\"line\">drm-<span class=\"variable\">$(CONFIG_DRM_GEM_CMA_HELPER)</span> += drm_gem_cma_helper.o</span><br><span class=\"line\">drm-<span class=\"variable\">$(CONFIG_PCI)</span> += ati_pcigart.o</span><br><span class=\"line\">drm-<span class=\"variable\">$(CONFIG_OF)</span> += drm_of.o</span><br><span class=\"line\"></span><br><span class=\"line\">drm-y += $(drm-m)</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;内核中的DRM为X server或Mesa 实现了操作操作硬件的接口，从而保证图像数据传输的低延迟。在同一文件夹下还存在着另外一种架构，这种架构主要是将用于控制显示设备属性的操作提供给上层直接使用，KMS（Kernel Mode Set）就是为了实现这种操作。在gpu/drm/目录中，实现KMS的文件有：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drm_kms_helper-y := drm_crtc_helper.o drm_dp_helper.o drm_probe_helper.o \\</span><br><span class=\"line\">\t\tdrm_plane_helper.o drm_dp_mst_topology.o drm_atomic_helper.o</span><br><span class=\"line\">drm_kms_helper-<span class=\"variable\">$(CONFIG_DRM_FBDEV_EMULATION)</span> += drm_fb_helper.o</span><br><span class=\"line\">drm_kms_helper-<span class=\"variable\">$(CONFIG_DRM_KMS_CMA_HELPER)</span> += drm_fb_cma_helper.o</span><br><span class=\"line\"></span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DRM_KMS_HELPER)</span> += drm_kms_helper.o</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;通过DRM和KMS的封装，他们向上提供接口，向下协调硬件驱动。下面分析AM57xx系列芯片的显示驱动，同样是Makefile文件：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj-y\t\t\t+= omapdrm/</span><br><span class=\"line\">obj-y\t\t\t+= tilcdc/</span><br><span class=\"line\">obj-y\t\t\t+= i2c/</span><br><span class=\"line\">obj-y\t\t\t+= panel/</span><br><span class=\"line\">obj-y\t\t\t+= bridge/</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;其中，omapdrm/目录中实现AM57xx系列芯片上面对应的显示子系统，tilcdc/目录则是LCD controller下面抽象层次的实现，i2c/、panel/、bridge/目录则是关系具体的显示驱动底层的代码，默认的是NXP_TDA998X，后续需要根据具体显示设备具体分析，各个目录中的显示驱动程序所需要调用通用函数则都是在当前目录中实现，在当前目录还实现了DRM的核心层。</p>\n<h5 id=\"3-2-DRM\"><a href=\"#3-2-DRM\" class=\"headerlink\" title=\"3.2 DRM\"></a>3.2 DRM</h5><p>&emsp;&emsp;DRM（Direct Render Manager）站在所有图形驱动的上层，为图形驱动程序提供了多种服务，同时向上通过libdrm提供应用程序接口，libdrm是包装大多数DRM ioctl的库。DRM提供的服务包括vblank事件处理，内存管理，输出管理，帧缓冲区管理，命令提交和防护，挂起/恢复支持以及DMA传输。</p>\n<p>&emsp;&emsp;其驱动代码在gpu/omapdrm/omap_drv.c中，主要结构是drm_driver</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">drm_driver</span> <span class=\"title\">omap_drm_driver</span> = &#123;</span></span><br><span class=\"line\">\t.driver_features = DRIVER_MODESET | DRIVER_GEM  | DRIVER_PRIME |</span><br><span class=\"line\">\t\tDRIVER_ATOMIC | DRIVER_RENDER,</span><br><span class=\"line\">\t.load = dev_load,</span><br><span class=\"line\">\t.unload = dev_unload,</span><br><span class=\"line\">\t.open = dev_open,</span><br><span class=\"line\">\t.lastclose = dev_lastclose,</span><br><span class=\"line\">\t.preclose = dev_preclose,</span><br><span class=\"line\">\t.postclose = dev_postclose,</span><br><span class=\"line\">\t.set_busid = drm_platform_set_busid,</span><br><span class=\"line\">\t.get_vblank_counter = drm_vblank_no_hw_counter,</span><br><span class=\"line\">\t.enable_vblank = omap_irq_enable_vblank,</span><br><span class=\"line\">\t.disable_vblank = omap_irq_disable_vblank,</span><br><span class=\"line\">#ifdef CONFIG_DEBUG_FS</span><br><span class=\"line\">\t.debugfs_init = omap_debugfs_init,</span><br><span class=\"line\">\t.debugfs_cleanup = omap_debugfs_cleanup,</span><br><span class=\"line\">#endif</span><br><span class=\"line\">\t.prime_handle_to_fd = drm_gem_prime_handle_to_fd,</span><br><span class=\"line\">\t.prime_fd_to_handle = drm_gem_prime_fd_to_handle,</span><br><span class=\"line\">\t.gem_prime_export = omap_gem_prime_export,</span><br><span class=\"line\">\t.gem_prime_import = omap_gem_prime_import,</span><br><span class=\"line\">\t.gem_free_object = omap_gem_free_object,</span><br><span class=\"line\">\t.gem_vm_ops = &amp;omap_gem_vm_ops,</span><br><span class=\"line\">\t.dumb_create = omap_gem_dumb_create,</span><br><span class=\"line\">\t.dumb_map_offset = omap_gem_dumb_map_offset,</span><br><span class=\"line\">\t.dumb_destroy = drm_gem_dumb_destroy,</span><br><span class=\"line\">\t.ioctls = ioctls,</span><br><span class=\"line\">\t.num_ioctls = DRM_OMAP_NUM_IOCTLS,</span><br><span class=\"line\">\t.fops = &amp;omapdriver_fops,</span><br><span class=\"line\">\t.name = DRIVER_NAME,</span><br><span class=\"line\">\t.desc = DRIVER_DESC,</span><br><span class=\"line\">\t.date = DRIVER_DATE,</span><br><span class=\"line\">\t.major = DRIVER_MAJOR,</span><br><span class=\"line\">\t.minor = DRIVER_MINOR,</span><br><span class=\"line\">\t.patchlevel = DRIVER_PATCHLEVEL,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在Linux系统中需要大量的图形内存来存储与图形有关的数据，因此内存管理在DRM中至关重要，而且在DRM基础架构中发挥着核心作用。在DRM的内存管理核心子模块中包含两个内存管理器，Translation Table Manager（TTM）和Graphics Execution Manager（GEM）。</p>\n<p>&emsp;&emsp;TTM提供一个单一的用户空间API，可以满足所用硬件的要求，同时支持统一内存体系结构（UMA）设备和具有专用视频RAM的设备，同时也导致代码庞大而复杂。GEM为应对TTM的复杂性，没有为每个与图形内存相关的问题提供解决方案，而是确定驱动程序之间的通用代码，并创建一个共享的支持库，从而使初始化和执行要求更简单，但是不具有RAM管理功能，也仅限于UMA设备。</p>\n<p>&emsp;&emsp;vma-manager负责将依赖于驱动程序的任意内存区域映射到线性用户地址空间。</p>\n<p>&emsp;&emsp;PRIME是drm中的跨设备缓冲区共享框架，对于用户空间，PRIME缓冲区是基于dma-buf的文件描述符。</p>\n<p>&emsp;&emsp;drm_mm提供了一个简单的范围分配器。如果驱动程序合适的话，可以自由使用Linux内核中的资源分配器，drm_mm的好处是它位于DRM内核中，这意味着可以更容易满足gpu的一些特殊用途需求。</p>\n<h5 id=\"3-3-KMS\"><a href=\"#3-3-KMS\" class=\"headerlink\" title=\"3.3 KMS\"></a>3.3 KMS</h5><p>&emsp;&emsp;KMS通过frame buffer提供给用户空间，而frame buffer结构嵌入到plane（面）结构中构成KMS的基本对象，面结构用drm_plane表示，之后plane再将像素数据传入crtc。crtc代表整个显示管道，从drm_plane接收像素数据，并将数据混合到一起，之后crtc将数据输出到多个编码器，用drm_encoder表示，当crtc在运行时则至少有一个drm_encoder，每个编码器再将数据输出到连接器，drm_connector，连接器与编码器的连接可以通过软件指定。一个编码器可以驱动多个连接器，但一个连接器只能有一个编码器。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877431/samples/display/image-20201026195531904_cuif1i.png\" alt=\"image-20201026195531904\"></p>\n<p>&emsp;&emsp;为了能够共享编码器的代码，可以将一个或多个Framebuffer GEM Helper Reference（由struct drm_bridge表示）链接到编码器。该链接是静态的，无法更改，这意味着需要在CRTC和任何编码器之间打开交叉映射开关。另一个对象是面板（drm_panel），它的存在是为了以某种形式显示像素的其他东西，通常嵌入到连接器中。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/image-20201027092623444_jbr83g.png\" alt=\"image-20201027092623444\"></p>\n<p>&emsp;&emsp;最后，通过连接器抽象实际的接收器，暴露给用户空间，通过这些KMS对象来完成数据的转换和输出。</p>\n<h5 id=\"3-4-dss\"><a href=\"#3-4-dss\" class=\"headerlink\" title=\"3.4 dss\"></a>3.4 dss</h5><p>&emsp;&emsp;在drm/的顶层目录下的很多文件就是为了实现DRM和KMS架构，根据Makefile文件得知，DRM架构也需要i2c/、panel/、bridge/等核心模块支撑，其中panel/实现DRM面板驱动程序，最多需要一个调节器和一个GPIO才能运行，i2c/中的驱动是为了那些需要I2C协议的编码器，bridge/中的代码则是为了特殊display架构的需要。</p>\n<p>&emsp;&emsp;最后，剩下的便是各大厂家的驱动，以TI为例，TI实现了两种显示驱动的框架，一种是以LCDC作为显示控制器的显示架构，分布在tilcdc/中。另一种则是以gpu作为显示控制器的显示架构，分布在omapdrm/中。</p>\n<p>&emsp;&emsp;AM57xx平台采用gpu作为显示控制器，所以其代码在omapdrm/中，在omapdrm/顶层目录的代码实现DRM架构所需要的内存管理、中断、帧缓存等核心操作，同时在这个层次实现KMS架构中子模块的驱动，包括plane、crtc、encoder、connector。从drm_driver结构中可以看到omap_drm_driver所确定的操作，omap_drm_driver的操作会向下调用具体的函数，这些都以函数指针的形式调用。</p>\n<p>&emsp;&emsp;init函数中去注册platform_drivers结</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> * <span class=\"title\">const</span> <span class=\"title\">drivers</span>[] = &#123;</span></span><br><span class=\"line\">\t&amp;omap_dmm_driver,</span><br><span class=\"line\">\t&amp;pdev,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">omap_dmm_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe = omap_dmm_probe,</span><br><span class=\"line\">\t.remove = omap_dmm_remove,</span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.owner = THIS_MODULE,</span><br><span class=\"line\">\t\t.name = DMM_DRIVER_NAME,</span><br><span class=\"line\">\t\t.of_match_table = of_match_ptr(dmm_of_match),</span><br><span class=\"line\">\t\t.pm = &amp;omap_dmm_pm_ops,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">pdev</span> = &#123;</span></span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.name = DRIVER_NAME,</span><br><span class=\"line\">\t\t.pm = &amp;omapdrm_pm_ops,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t.probe = pdev_probe,</span><br><span class=\"line\">\t.remove = pdev_remove,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> <span class=\"title\">dmm_of_match</span>[] = &#123;</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,omap4-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_omap4_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,omap5-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_omap5_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,dra7-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_dra7_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;dss在设备树中的节点：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dss@<span class=\"number\">58000000</span> &#123;</span><br><span class=\"line\">\t\t\tcompatible = <span class=\"string\">\"ti,dra7-dss\"</span>;</span><br><span class=\"line\">\t\t\tstatus = <span class=\"string\">\"ok\"</span>;</span><br><span class=\"line\">\t\t\tti,hwmods = <span class=\"string\">\"dss_core\"</span>;</span><br><span class=\"line\">\t\t\tsyscon-pll-ctrl = &lt;<span class=\"number\">0x8</span> <span class=\"number\">0x538</span>&gt;;</span><br><span class=\"line\">\t\t\t<span class=\"meta\">#address-cells = <span class=\"meta-string\">&lt;0x1&gt;;</span></span></span><br><span class=\"line\">\t\t\t<span class=\"meta\">#size-cells = <span class=\"meta-string\">&lt;0x1&gt;;</span></span></span><br><span class=\"line\">\t\t\tranges;</span><br><span class=\"line\">\t\t\treg = &lt;<span class=\"number\">0x58000000</span> <span class=\"number\">0x80</span> <span class=\"number\">0x58004054</span> <span class=\"number\">0x4</span> <span class=\"number\">0x58004300</span> <span class=\"number\">0x20</span> <span class=\"number\">0x58009054</span> <span class=\"number\">0x4</span> <span class=\"number\">0x58009300</span> <span class=\"number\">0x20</span>&gt;;</span><br><span class=\"line\">\t\t\treg-names = <span class=\"string\">\"dss\"</span>, <span class=\"string\">\"pll1_clkctrl\"</span>, <span class=\"string\">\"pll1\"</span>, <span class=\"string\">\"pll2_clkctrl\"</span>, <span class=\"string\">\"pll2\"</span>;</span><br><span class=\"line\">\t\t\tclocks = &lt;<span class=\"number\">0x10f</span> <span class=\"number\">0x110</span> <span class=\"number\">0x111</span>&gt;;</span><br><span class=\"line\">\t\t\tclock-names = <span class=\"string\">\"fck\"</span>, <span class=\"string\">\"video1_clk\"</span>, <span class=\"string\">\"video2_clk\"</span>;</span><br><span class=\"line\">\t\t\tvdda_video-supply = &lt;<span class=\"number\">0x112</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdispc@<span class=\"number\">58001000</span> &#123;</span><br><span class=\"line\">\t\t\t\tcompatible = <span class=\"string\">\"ti,dra7-dispc\"</span>;</span><br><span class=\"line\">\t\t\t\treg = &lt;<span class=\"number\">0x58001000</span> <span class=\"number\">0x1000</span>&gt;;</span><br><span class=\"line\">\t\t\t\tinterrupts = &lt;<span class=\"number\">0x0</span> <span class=\"number\">0x14</span> <span class=\"number\">0x4</span>&gt;;</span><br><span class=\"line\">\t\t\t\tti,hwmods = <span class=\"string\">\"dss_dispc\"</span>;</span><br><span class=\"line\">\t\t\t\tclocks = &lt;<span class=\"number\">0x10f</span>&gt;;</span><br><span class=\"line\">\t\t\t\tclock-names = <span class=\"string\">\"fck\"</span>;</span><br><span class=\"line\">\t\t\t\tsyscon-pol = &lt;<span class=\"number\">0x8</span> <span class=\"number\">0x534</span>&gt;;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tencoder@<span class=\"number\">58060000</span> &#123;</span><br><span class=\"line\">\t\t\t\tcompatible = <span class=\"string\">\"ti,dra7-hdmi\"</span>;</span><br><span class=\"line\">\t\t\t\treg = &lt;<span class=\"number\">0x58040000</span> <span class=\"number\">0x200</span> <span class=\"number\">0x58040200</span> <span class=\"number\">0x80</span> <span class=\"number\">0x58040300</span> <span class=\"number\">0x80</span> <span class=\"number\">0x58060000</span> <span class=\"number\">0x19000</span>&gt;;</span><br><span class=\"line\">\t\t\t\treg-names = <span class=\"string\">\"wp\"</span>, <span class=\"string\">\"pll\"</span>, <span class=\"string\">\"phy\"</span>, <span class=\"string\">\"core\"</span>;</span><br><span class=\"line\">\t\t\t\tinterrupts = &lt;<span class=\"number\">0x0</span> <span class=\"number\">0x60</span> <span class=\"number\">0x4</span>&gt;;</span><br><span class=\"line\">\t\t\t\tstatus = <span class=\"string\">\"disabled\"</span>;</span><br><span class=\"line\">\t\t\t\tti,hwmods = <span class=\"string\">\"dss_hdmi\"</span>;</span><br><span class=\"line\">\t\t\t\tclocks = &lt;<span class=\"number\">0x113</span> <span class=\"number\">0x114</span>&gt;;</span><br><span class=\"line\">\t\t\t\tclock-names = <span class=\"string\">\"fck\"</span>, <span class=\"string\">\"sys_clk\"</span>;</span><br><span class=\"line\">\t\t\t\tdmas = &lt;<span class=\"number\">0xd3</span> <span class=\"number\">0x4c</span>&gt;;</span><br><span class=\"line\">\t\t\t\tdma-names = <span class=\"string\">\"audio_tx\"</span>;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t\t&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;dss/目录中实现了TI DSS显示子系统的驱动，包括其中的dispc、hdmi engine以及支持的接口，在omap2系列平台中支持dpi接口、dsi接口、rfbi接口、venc接口、sdi接口，omap4以及以上平台支持hdmi接口，它们的驱动分别在具体的文件中，根据CONFIG_OMAPx_DSS_xxx来决定使用哪个接口。AM57xx平台当前配置为DPI接口和hdmi接口。</p>\n<p>&emsp;&emsp;DSS部分的代码可以分成四部分，omapdss_boot_init、omapdss_base、omapdss、omapdss6</p>\n<ul>\n<li><p>omapdss_boot_init</p>\n<p>这部分代码主要进行初始化，根据从设备树上匹配的dss节点进行配置数据，主要是通过“ti,dra7-dss”属性找到dss节点，再遍历其中的子节点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> <span class=\"title\">omapdss_of_match</span>[] __<span class=\"title\">initconst</span> = &#123;</span></span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap2-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap3-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap4-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap5-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,dra7-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,k2g-dss\"</span>, &#125;,</span><br><span class=\"line\">\t&#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">omapdss_boot_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span> *<span class=\"title\">dss</span>, *<span class=\"title\">child</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;dss_conv_list);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdss = of_find_matching_node(<span class=\"literal\">NULL</span>, omapdss_of_match);</span><br><span class=\"line\"></span><br><span class=\"line\">\tomapdss_walk_device(dss, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor_each_available_child_of_node(dss, child) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!of_find_property(child, <span class=\"string\">\"compatible\"</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\tomapdss_walk_device(child, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (!list_empty(&amp;dss_conv_list)) &#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dss_conv_node</span> *<span class=\"title\">n</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tn = list_first_entry(&amp;dss_conv_list, struct dss_conv_node, <span class=\"built_in\">list</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!n-&gt;root)</span><br><span class=\"line\">\t\t\tomapdss_omapify_node(n-&gt;node);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlist_del(&amp;n-&gt;<span class=\"built_in\">list</span>);</span><br><span class=\"line\">\t\tof_node_put(n-&gt;node);</span><br><span class=\"line\">\t\tkfree(n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>omapdss_base</p>\n<p>base部分代码由四部分组成，base、display、dss-of、output，每一部分都是实现DRM的基础，所以也是dss的基础，只列举其中的两个函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">omapdss_walk_device</span><span class=\"params\">(struct device *dev, struct device_node *node,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t<span class=\"keyword\">bool</span> dss_core)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span> *<span class=\"title\">n</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">omapdss_comp_node</span> *<span class=\"title\">comp</span> = <span class=\"title\">devm_kzalloc</span>(<span class=\"title\">dev</span>, <span class=\"title\">sizeof</span>(*<span class=\"title\">comp</span>),</span></span><br><span class=\"line\"><span class=\"class\">\t\t\t\t\t\t      <span class=\"title\">GFP_KERNEL</span>);</span></span><br><span class=\"line\">\tn = of_get_child_by_name(node, <span class=\"string\">\"ports\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tof_node_put(n);</span><br><span class=\"line\"></span><br><span class=\"line\">\tn = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((n = of_graph_get_next_endpoint(node, n)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span> *<span class=\"title\">pn</span> = <span class=\"title\">of_graph_get_remote_port_parent</span>(<span class=\"title\">n</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!pn)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!of_device_is_available(pn) || omapdss_list_contains(pn)) &#123;</span><br><span class=\"line\">\t\t\tof_node_put(pn);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tomapdss_walk_device(dev, pn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">omapdss_stack_is_ready</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">omapdss_comp_node</span> *<span class=\"title\">comp</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlist_for_each_entry(comp, &amp;omapdss_comp_list, <span class=\"built_in\">list</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!omapdss_component_is_loaded(comp))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>omapdss</p>\n<p>这部分是TI dss架构的核心驱动代码，为了能够支持更多的设备和方便管理，这里同样抽象出核心层来对具体的驱动进行管理，这部分主要是dispc驱动代码以及具体的接口的驱动</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> <span class=\"title\">dispc_of_match</span>[] = &#123;</span></span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap2-dispc\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap3-dispc\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap4-dispc\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,omap5-dispc\"</span>, &#125;,</span><br><span class=\"line\">\t&#123; .compatible = <span class=\"string\">\"ti,dra7-dispc\"</span>, &#125;,</span><br><span class=\"line\">\t&#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">omap_dispchw_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe\t\t= dispc_probe,</span><br><span class=\"line\">\t.remove         = dispc_remove,</span><br><span class=\"line\">\t.driver         = &#123;</span><br><span class=\"line\">\t\t.name   = <span class=\"string\">\"omapdss_dispc\"</span>,</span><br><span class=\"line\">\t\t.pm\t= &amp;dispc_pm_ops,</span><br><span class=\"line\">\t\t.of_match_table = dispc_of_match,</span><br><span class=\"line\">\t\t.suppress_bind_attrs = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">dispc_init_platform_driver</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> platform_driver_register(&amp;omap_dispchw_driver);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispc_uninit_platform_driver</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tplatform_driver_unregister(&amp;omap_dispchw_driver);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>omapdss6</p>\n<p>对比可以发现，omapdss6是TI为了对自己家新平台k2g的支持，原理和前面dss架构相同</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">dss6_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe\t\t= dss6_probe,</span><br><span class=\"line\">\t.remove\t\t= dss6_remove,</span><br><span class=\"line\">\t.driver         = &#123;</span><br><span class=\"line\">\t\t.name   = <span class=\"string\">\"omap_dss6\"</span>,</span><br><span class=\"line\">\t\t.pm\t= &amp;dss6_pm_ops,</span><br><span class=\"line\">\t\t.of_match_table = dss6_of_match,</span><br><span class=\"line\">\t\t.suppress_bind_attrs = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-5-displays\"><a href=\"#3-5-displays\" class=\"headerlink\" title=\"3.5 displays\"></a>3.5 displays</h5><p>&emsp;&emsp;display/目录下都是和具体硬件相关的驱动代码，由encoder、connector、panel三部分组成，根据配置CONFIG_DISPLAY_xxx_xx决定使用哪个具体的驱动，如果没有对应的型号可以自己编写对应的驱动</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_OPA362)</span> += encoder-opa362.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_TFP410)</span> += encoder-tfp410.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_TPD12S015)</span> += encoder-tpd12s015.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_DRA7EVM_ENCODER_TPD12S015)</span> += dra7-evm-encoder-tpd12s015.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_SII9022)</span> += encoder-sii9022.o</span><br><span class=\"line\">encoder-sii9022-y += encoder-sii9022-video.o</span><br><span class=\"line\">encoder-sii9022-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_SII9022_AUDIO_CODEC)</span> += encoder-sii9022-audio.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_ENCODER_TC358768)</span> += encoder-tc358768.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_CONNECTOR_DVI)</span> += connector-dvi.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_CONNECTOR_HDMI)</span> += connector-hdmi.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_CONNECTOR_ANALOG_TV)</span> += connector-analog-tv.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_DPI)</span> += panel-dpi.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_DSI_CM)</span> += panel-dsi-cm.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_SONY_ACX565AKM)</span> += panel-sony-acx565akm.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_LGPHILIPS_LB035Q02)</span> += panel-lgphilips-lb035q02.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_SHARP_LS037V7DW01)</span> += panel-sharp-ls037v7dw01.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_TPO_TD028TTEC1)</span> += panel-tpo-td028ttec1.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_TPO_TD043MTEA1)</span> += panel-tpo-td043mtea1.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_NEC_NL8048HL11)</span> += panel-nec-nl8048hl11.o</span><br><span class=\"line\">obj-<span class=\"variable\">$(CONFIG_DISPLAY_PANEL_TLC59108)</span> += panel-tlc59108.o</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;displays部分代码包含三部分，encoder、connector、panel，encoder部分包含了三种编码器，tpd12s015、sii9022、tc358768，connector使用hdmi，panel使用dpi</p>\n<p>encoder：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">i2c_driver</span> <span class=\"title\">sii9022_driver</span> = &#123;</span></span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.name  = <span class=\"string\">\"sii9022\"</span>,</span><br><span class=\"line\">\t\t.owner = THIS_MODULE,</span><br><span class=\"line\">\t\t.of_match_table = sii9022_of_match,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t.probe\t\t= sii9022_probe,</span><br><span class=\"line\">\t.remove\t\t= sii9022_remove,</span><br><span class=\"line\">\t.id_table\t= sii9022_id,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">tpd_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe\t= tpd_probe,</span><br><span class=\"line\">\t.remove\t= __exit_p(tpd_remove),</span><br><span class=\"line\">\t.driver\t= &#123;</span><br><span class=\"line\">\t\t.name\t= <span class=\"string\">\"tpd12s015\"</span>,</span><br><span class=\"line\">\t\t.of_match_table = tpd_of_match,</span><br><span class=\"line\">\t\t.suppress_bind_attrs = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">i2c_driver</span> <span class=\"title\">tc358768_i2c_driver</span> = &#123;</span></span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.owner\t\t= THIS_MODULE,</span><br><span class=\"line\">\t\t.name\t\t= TC358768_NAME,</span><br><span class=\"line\">\t\t.of_match_table\t= tc358768_of_match,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t.id_table\t= tc358768_id,</span><br><span class=\"line\">\t.probe\t\t= tc358768_i2c_probe,</span><br><span class=\"line\">\t.remove\t\t= tc358768_i2c_remove,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;connector &amp; panel：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">hdmi_connector_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe\t= hdmic_probe,</span><br><span class=\"line\">\t.remove\t= __exit_p(hdmic_remove),</span><br><span class=\"line\">\t.driver\t= &#123;</span><br><span class=\"line\">\t\t.name\t= <span class=\"string\">\"connector-hdmi\"</span>,</span><br><span class=\"line\">\t\t.of_match_table = hdmic_of_match,</span><br><span class=\"line\">\t\t.suppress_bind_attrs = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">panel_dpi_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe = panel_dpi_probe,</span><br><span class=\"line\">\t.remove = __exit_p(panel_dpi_remove),</span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.name = <span class=\"string\">\"panel-dpi\"</span>,</span><br><span class=\"line\">\t\t.of_match_table = panel_dpi_of_match,</span><br><span class=\"line\">\t\t.suppress_bind_attrs = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">i2c_driver</span> <span class=\"title\">tlc59108_i2c_driver</span> = &#123;</span></span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.owner\t= THIS_MODULE,</span><br><span class=\"line\">\t\t.name\t= TLC_NAME,</span><br><span class=\"line\">\t\t.of_match_table = tlc59108_of_match,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t.id_table\t= tlc59108_id,</span><br><span class=\"line\">\t.probe\t\t= tlc59108_i2c_probe,</span><br><span class=\"line\">\t.remove\t\t= tlc59108_i2c_remove,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;最终，pixel数据通过connector和panel转换成屏幕设备可以识别的格式，再通过自身的解码器将图像数据显示在屏幕上。</p>\n<h4 id=\"四-驱动分析\"><a href=\"#四-驱动分析\" class=\"headerlink\" title=\"四. 驱动分析\"></a>四. 驱动分析</h4><h5 id=\"omap-drm-driver\"><a href=\"#omap-drm-driver\" class=\"headerlink\" title=\"omap_drm_driver\"></a>omap_drm_driver</h5><p>&emsp;&emsp;下面具体分析gpu/目录下整个TI SOC显示架构驱动，在最顶层是drm/、vga/、host1x/、ipu-v3/四个目录，其中drm/和vga/是无条件必须支持的模块，但vga模块这里没有使用到，因为我们使用的是MIPI DPI接口以及HDMI接口，DRM则是支撑整个显示子系统的核心，ipu模块则需要根据硬件平台是否启用， host1x模块是DMA引擎，用于对Tegra的图形和多媒体相关模块进行寄存器访问。所以重点在drm/目录。</p>\n<p>&emsp;&emsp;在drm/的顶层目录下的很多文件就是为了实现DRM和KMS架构，根据Makefile文件得知，DRM架构也需要i2c/、panel/、bridge/等核心模块支撑，其中panel/实现DRM面板驱动程序，最多需要一个调节器和一个GPIO才能运行，i2c/中的驱动是为了那些需要I2C协议的编码器，bridge/中的代码则是为了特殊display架构的需要。</p>\n<p>&emsp;&emsp;最后，剩下的便是各大厂家的驱动，以TI为例，TI实现了两种显示驱动的框架，一种是以LCDC作为显示控制器的显示架构，分布在tilcdc/中。另一种则是以gpu作为显示控制器的显示架构，分布在omapdrm/中。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614877432/samples/display/ti_display_cy7yuz.png\" alt=\"ti_display\" style=\"zoom:30%;\"></p>\n<p>&emsp;&emsp;AM57xx平台采用gpu作为显示控制器，所以其代码在omapdrm/中，在omapdrm/顶层目录的代码实现DRM架构所需要的内存管理、中断、帧缓存等核心操作，同时在这个层次实现KMS架构中子模块的驱动，包括plane、crtc、encoder、connector。从drm_driver结构中可以看到omap_drm_driver所确定的操作，omap_drm_driver的操作会向下调用具体的函数，这些都以函数指针的形式调用。</p>\n<p>&emsp;&emsp;init函数中去注册platform_drivers结构</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> * <span class=\"title\">const</span> <span class=\"title\">drivers</span>[] = &#123;</span></span><br><span class=\"line\">\t&amp;omap_dmm_driver,</span><br><span class=\"line\">\t&amp;pdev,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">omap_dmm_driver</span> = &#123;</span></span><br><span class=\"line\">\t.probe = omap_dmm_probe,</span><br><span class=\"line\">\t.remove = omap_dmm_remove,</span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.owner = THIS_MODULE,</span><br><span class=\"line\">\t\t.name = DMM_DRIVER_NAME,</span><br><span class=\"line\">\t\t.of_match_table = of_match_ptr(dmm_of_match),</span><br><span class=\"line\">\t\t.pm = &amp;omap_dmm_pm_ops,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">platform_driver</span> <span class=\"title\">pdev</span> = &#123;</span></span><br><span class=\"line\">\t.driver = &#123;</span><br><span class=\"line\">\t\t.name = DRIVER_NAME,</span><br><span class=\"line\">\t\t.pm = &amp;omapdrm_pm_ops,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t.probe = pdev_probe,</span><br><span class=\"line\">\t.remove = pdev_remove,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> <span class=\"title\">dmm_of_match</span>[] = &#123;</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,omap4-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_omap4_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,omap5-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_omap5_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t.compatible = <span class=\"string\">\"ti,dra7-dmm\"</span>,</span><br><span class=\"line\">\t\t.data = &amp;dmm_dra7_platform_data,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;因为没有具体硬件，这里所分析的都是默认的设备，具体应该根据实际硬件选择具体的设备和驱动程序。</p>"},{"title":"hexo将Blog转到Linux","date":"2021-04-14T16:49:49.000Z","_content":"\n>   记录将blog从windows搬到linux\n\n<!-- more -->\n\n### 安装软件\n\n```sh\nsudo apt-get install -y git\nsudo apt-get install -y nodejs\nsudo apt-get install -y build-essential\nsudo apt-get install -y npm\n```\n\n### 配置Git\n\n```\njian@host:~$ ssh -T git@github.com\nHi FlyingCatZ! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n&emsp;&emsp;如果当前github上没有当前linux系统的ssh秘匙就需要生成并添加\n\n```\nssh-keygen -t rsa -C \"邮箱地址\"\n```\n\n&emsp;&emsp;接着敲３次回车，完成之后在/home/xxx/.ssh/下面可以看到秘钥，将其添加到github上即可\n\n### 拷贝源文件\n\n&emsp;&emsp;核心文件是这些文件和文件夹\n\n```\n_config.yml\npackage.json\nnode_modules\nscaffolds\nsource\nthemes\n```\n\n### 安装hexo和相关模块\n\n```\nsudo npm install hexo-cli -g\n```\n\n&emsp;&emsp;遇到错误，使用`--force`参数强制写入覆盖\n\n```\nnpm install\nnpm install hexo-deployer-git --save  // 文章部署到 git 的模块\n（下面为选择安装）\nnpm install hexo-generator-feed --save  // 建立 RSS 订阅\nnpm install hexo-generator-sitemap --save // 建立站点地图\n```\n\n&emsp;&emsp;大功告成\n\n![Screenshot from 2021-04-15 01-20-27](https://res.cloudinary.com/flyingcatz/image/upload/v1618421362/samples/hexo/Screenshot_from_2021-04-15_01-20-27_wkmpgq.png)\n\n参考：https://smelond.com/2018/06/21/hexo%E4%BB%8Ewindows%E6%90%AC%E5%AE%B6%E5%88%B0deepin/\n\n\n\n","source":"_posts/hexo将Blog转到Linux.md","raw":"---\ntitle: hexo将Blog转到Linux\ndate: 2021-04-15 00:49:49\ntags: [hexo,博客]\ncategories: 博客\n---\n\n>   记录将blog从windows搬到linux\n\n<!-- more -->\n\n### 安装软件\n\n```sh\nsudo apt-get install -y git\nsudo apt-get install -y nodejs\nsudo apt-get install -y build-essential\nsudo apt-get install -y npm\n```\n\n### 配置Git\n\n```\njian@host:~$ ssh -T git@github.com\nHi FlyingCatZ! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n&emsp;&emsp;如果当前github上没有当前linux系统的ssh秘匙就需要生成并添加\n\n```\nssh-keygen -t rsa -C \"邮箱地址\"\n```\n\n&emsp;&emsp;接着敲３次回车，完成之后在/home/xxx/.ssh/下面可以看到秘钥，将其添加到github上即可\n\n### 拷贝源文件\n\n&emsp;&emsp;核心文件是这些文件和文件夹\n\n```\n_config.yml\npackage.json\nnode_modules\nscaffolds\nsource\nthemes\n```\n\n### 安装hexo和相关模块\n\n```\nsudo npm install hexo-cli -g\n```\n\n&emsp;&emsp;遇到错误，使用`--force`参数强制写入覆盖\n\n```\nnpm install\nnpm install hexo-deployer-git --save  // 文章部署到 git 的模块\n（下面为选择安装）\nnpm install hexo-generator-feed --save  // 建立 RSS 订阅\nnpm install hexo-generator-sitemap --save // 建立站点地图\n```\n\n&emsp;&emsp;大功告成\n\n![Screenshot from 2021-04-15 01-20-27](https://res.cloudinary.com/flyingcatz/image/upload/v1618421362/samples/hexo/Screenshot_from_2021-04-15_01-20-27_wkmpgq.png)\n\n参考：https://smelond.com/2018/06/21/hexo%E4%BB%8Ewindows%E6%90%AC%E5%AE%B6%E5%88%B0deepin/\n\n\n\n","slug":"hexo将Blog转到Linux","published":1,"updated":"2021-04-14T17:29:59.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8y70006q5di14rpgend","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>  记录将blog从windows搬到linux</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y git</span><br><span class=\"line\">sudo apt-get install -y nodejs</span><br><span class=\"line\">sudo apt-get install -y build-essential</span><br><span class=\"line\">sudo apt-get install -y npm</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Git\"><a href=\"#配置Git\" class=\"headerlink\" title=\"配置Git\"></a>配置Git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jian@host:~$ ssh -T git@github.com</span><br><span class=\"line\">Hi FlyingCatZ! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;如果当前github上没有当前linux系统的ssh秘匙就需要生成并添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;接着敲３次回车，完成之后在/home/xxx/.ssh/下面可以看到秘钥，将其添加到github上即可</p>\n<h3 id=\"拷贝源文件\"><a href=\"#拷贝源文件\" class=\"headerlink\" title=\"拷贝源文件\"></a>拷贝源文件</h3><p>&emsp;&emsp;核心文件是这些文件和文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\">package.json</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">scaffolds</span><br><span class=\"line\">source</span><br><span class=\"line\">themes</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo和相关模块\"><a href=\"#安装hexo和相关模块\" class=\"headerlink\" title=\"安装hexo和相关模块\"></a>安装hexo和相关模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;遇到错误，使用<code>--force</code>参数强制写入覆盖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git --save  // 文章部署到 git 的模块</span><br><span class=\"line\">（下面为选择安装）</span><br><span class=\"line\">npm install hexo-generator-feed --save  // 建立 RSS 订阅</span><br><span class=\"line\">npm install hexo-generator-sitemap --save // 建立站点地图</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;大功告成</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1618421362/samples/hexo/Screenshot_from_2021-04-15_01-20-27_wkmpgq.png\" alt=\"Screenshot from 2021-04-15 01-20-27\"></p>\n<p>参考：<a href=\"https://smelond.com/2018/06/21/hexo%E4%BB%8Ewindows%E6%90%AC%E5%AE%B6%E5%88%B0deepin/\" target=\"_blank\" rel=\"noopener\">https://smelond.com/2018/06/21/hexo%E4%BB%8Ewindows%E6%90%AC%E5%AE%B6%E5%88%B0deepin/</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>  记录将blog从windows搬到linux</p>\n</blockquote>","more":"<h3 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y git</span><br><span class=\"line\">sudo apt-get install -y nodejs</span><br><span class=\"line\">sudo apt-get install -y build-essential</span><br><span class=\"line\">sudo apt-get install -y npm</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Git\"><a href=\"#配置Git\" class=\"headerlink\" title=\"配置Git\"></a>配置Git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jian@host:~$ ssh -T git@github.com</span><br><span class=\"line\">Hi FlyingCatZ! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;如果当前github上没有当前linux系统的ssh秘匙就需要生成并添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;接着敲３次回车，完成之后在/home/xxx/.ssh/下面可以看到秘钥，将其添加到github上即可</p>\n<h3 id=\"拷贝源文件\"><a href=\"#拷贝源文件\" class=\"headerlink\" title=\"拷贝源文件\"></a>拷贝源文件</h3><p>&emsp;&emsp;核心文件是这些文件和文件夹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\">package.json</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">scaffolds</span><br><span class=\"line\">source</span><br><span class=\"line\">themes</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo和相关模块\"><a href=\"#安装hexo和相关模块\" class=\"headerlink\" title=\"安装hexo和相关模块\"></a>安装hexo和相关模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;遇到错误，使用<code>--force</code>参数强制写入覆盖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git --save  // 文章部署到 git 的模块</span><br><span class=\"line\">（下面为选择安装）</span><br><span class=\"line\">npm install hexo-generator-feed --save  // 建立 RSS 订阅</span><br><span class=\"line\">npm install hexo-generator-sitemap --save // 建立站点地图</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;大功告成</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1618421362/samples/hexo/Screenshot_from_2021-04-15_01-20-27_wkmpgq.png\" alt=\"Screenshot from 2021-04-15 01-20-27\"></p>\n<p>参考：<a href=\"https://smelond.com/2018/06/21/hexo%E4%BB%8Ewindows%E6%90%AC%E5%AE%B6%E5%88%B0deepin/\" target=\"_blank\" rel=\"noopener\">https://smelond.com/2018/06/21/hexo%E4%BB%8Ewindows%E6%90%AC%E5%AE%B6%E5%88%B0deepin/</a></p>"},{"title":"dma","date":"2021-03-04T15:08:25.000Z","_content":"\n### 前言\n\n&emsp;&emsp;Linux中关于dma的操作非常常见，一些dma驱动独立到drivers/dma/目录下，架构相关的dma操作放在arch/arm/mm/目录下，还有在drivers/base/目录下也有关于dma的驱动，以及drivers/dma-buf/目录下所形成的dma-buf架构，因此有必要梳理一下dma的框架\n\n<!-- more -->\n\n&emsp;&emsp;DMA（Direct Memory Access）用于在设备和内存之间直接进行数据传输而不经过CPU的一种方式，主要通过DMA控制器来实现，而DMA控制器也主要分为两种，一种是嵌入到SOC上的外部DMA控制器，另一种是设备自带的DMA控制器。\n\n&emsp;&emsp;首先是SOC上的DMA控制器，这个控制器主要是为了解决那些自身不带DMA控制器的设备也能进行DMA传输，其他的设备通过向这个总DMA控制器注册来实现DMA传输。\n\n![DMA](https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/DMA_ut94kz.png)\n\n&emsp;&emsp;而对于那些自身携带DMA控制器的设备来说，他们可以独自实现DMA传输。\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/DMA_device_oxv55a.png\" alt=\"DMA_device\" style=\"zoom: 25%;\" />\n\n&emsp;&emsp;其中，Descriptor描述DMA传输过程中的各种属性。DMA传输使用的是物理地址，而且所处理的buffer必须是物理上连续的。且CPU访问内存都是通过cache，但DMA不能访问cache，所以需要注意cache一致性，ARM架构通过clean、invalid操作来完成。在进行内存到设备传输时，要确保已经将cache中的内容写到内存上；在进行设备到内存传输时，从内存上读取数据之前需要确保将cache中对应的数据无效。\n\n\n\n### 一、总体分析\n\n&emsp;&emsp;内核通常使用的地址是虚拟地址。我们调用kmalloc()、vmalloc()或者类似的接口返回的地址都是虚拟地址，保存在\"void *\"的变量中。虚拟内存系统（TLB、页表等）将虚拟地址（程序角度）翻译成物理地址（CPU角度），物理地址保存在“phys_addr_t”或“resource_size_t”的变量中。对于一个硬件设备上的寄存器等设备资源，内核是按照物理地址来管理的。驱动并不能直接使用这些物理地址，必须首先通过ioremap()接口将这些物理地址映射到内核虚拟地址空间上去。\n\n&emsp;&emsp;I/O设备使用第三种地址：“总线地址”。如果设备在MMIO地址空间（MMIO是物理地址空间的子集）中有若干的寄存器，或者该设备足够的智能，可以通过DMA执行读写系统内存的操作，这些情况下，设备使用的地址就是总线地址。在某些系统中，总线地址与CPU物理地址相同，但一般来说不同。iommus和host bridge可以在物理地址和总线地址之间进行映射。\n\n&emsp;&emsp;下图中对应了驱动程序访问总线地址的两种方案：\n\n![image-20200827101651829](https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/image-20200827101651829_ynif9a.png)\n\n1. 在设备初始化过程中，内核了解了所有的IO device及其对应的MMIO地址空间，CPU并不能通过总线地址A直接访问总线上的设备，host bridge会在MMIO（即物理地址）和总线地址之间进行mapping，因此，对于CPU，它实际上是可以通过B地址（位于MMIO地址空间）访问设备。驱动程序通过ioremap()把物理地址B映射成虚拟地址C，这时候，驱动程序就可以通过虚拟地址C来访问总线上的地址A了。\n\n2. 如果设备支持DMA，那么在驱动中可以通过kmalloc或者其他类似接口分配一个DMA buffer，并且返回了虚拟地址X，MMU将X地址映射成了物理地址Y，从而定位了DMA buffer在系统内存中的位置，驱动可以通过访问地址X来操作DMA buffer。但是设备不能通过X地址来访问DMA buffer，因为MMU对设备不可见，而且系统内存所在的系统总线和PCI总线属于不同的地址空间。在一些简单的系统中，设备可以通过DMA直接访问物理地址Y，但是在大多数的系统中，有一个IOMMU的硬件用来将DMA可访问的总线地址翻译成物理地址，也就是把上图中的地址Z翻译成Y。驱动在调用dma_map_single这样的接口函数的时候会传递一个虚拟地址X，在这个函数中会设定IOMMU的页表，将地址X映射到Z，并且将返回z这个总线地址。驱动可以把Z这个总线地址设定到设备上的DMA相关的寄存器中。这样，当设备发起对地址Z开始的DMA操作的时候，IOMMU可以进行地址映射，并将DMA操作定位到Y地址开始的DMA buffer。\n\n\n\n### 二、DMA访问限制\n\n&emsp;&emsp;如果驱动是通过伙伴系统的接口（例如__get_free_page*()）或者类似kmalloc() or kmem_cache_alloc()这样的通用内存分配的接口来分配DMA buffer，那么这些接口函数返回的虚拟地址可以直接用于DMA mapping接口API，并通过DMA操作在外设和dma buffer中交换数据。但vmalloc()接口分配的DMA buffer不能直接使用，因为其物理内存不连续。\n\n&emsp;&emsp;驱动中定义的全局变量如果编译到内核则可以用于DMA操作，因为全局变量位于内核的数据段或者bss段。在内核初始化的时候，会建立kernel image mapping，因此全局变量所占据的内存都是连续的，并且VA和PA是有固定偏移的线性关系，因此可以用于DMA操作。在定义这些全局变量的DMA buffer的时候，要小心的进行cacheline的对齐，并且要处理CPU和DMA controller之间的操作同步，以避免cache coherence问题。\n\n&emsp;&emsp;如果驱动编译成模块全局变量则不能用于DMA操作，因为驱动中全局定义的DMA buffer不在内核的线性映射区域，其虚拟地址是在模块加载的时候，通过vmalloc分配，这时候DMA buffer如果大于一个page frame，那么实际上是无法保证其底层物理地址的连续性，也无法保证VA和PA的线性关系。\n\n&emsp;&emsp;通过kmap接口返回的内存也是不可以做DMA buffer，其原理类似vmalloc。块设备I/O子系统和网络子系统在分配buffer的时候则会确保其内存是可以进行DMA操作的。\n\n&emsp;&emsp;根据DMA buffer的特性，DMA操作有两种：一种是streaming，DMA buffer是一次性的，用完就销毁。这种DMA buffer需要自己考虑cache一致性。另外一种是DMA buffer是cache coherent的，软件实现上比较简单，更重要的是这种DMA buffer往往是静态的、长时间存在的。有些设备有DMA寻址限制，不同的硬件平台有不同的配置方式，有的平台没有限制，外设可以访问系统内存的每一个Byte，有些则不可以。\n\n&emsp;&emsp;不同类型的DMA操作可能有有不同的寻址限制，也可能相同。如果相同，我们可以用第一组接口设定streaming和coherent两种DMA 操作的地址掩码。如果不同，可以使用第二组的接口进行设定：\n\n> int dma_set_mask_and_coherent(struct device *dev, u64 mask);\n\n> int dma_set_mask(struct device *dev, u64 mask);\n>\n> int dma_set_coherent_mask(struct device *dev, u64 mask);\n\n\n\n### 三、DMA映射\n\n&emsp;&emsp;DMA映射分为两种，一种是一致性DMA映射（Consistent DMA mappings），另一种则是流式DMA映射（Streaming DMA mapping）。\n\n1. 一致性DMA映射\n\n   一致性DMA映射有两种特点：\n\n   （1）持续使用该DMA buffer，初始化的时候map，系统结束时unmap。\n\n   （2）CPU和DMA controller在发起对DMA buffer的并行访问的时候不需要考虑cache操作，CPU和DMA controller都可以看到对方对DMA buffer的更新。\n\n2. 流式DMA映射\n\n   流式DMA映射是一次性的，一般是在DMA传输的时候才进行map，一旦DMA传输完成就立刻unmap。\n\n   \n\n   ![image-20200829090605153](https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/image-20200829090605153_l6swsx.png)\n\n&emsp;&emsp;可以看到，cmem驱动中所采用的就是这种一致性DMA映射。通过dma_alloc_coherent()函数接口分配并映射了一个较大（page大小或类似）的coherent DMA memory。其中dev参数就是执行该设备的struct device对象的，size参数指明了需要分配DMA buffer的大小，以字节为单位，dma参数为返回的总线地址，最后一个参数为分配内存的标志，返回的参数为此块buffer的虚拟地址，供CPU使用。\n\n&emsp;&emsp;dma_alloc_coherent()函数所申请的内存是PAGE_SIZE对齐的，以PAGE_SIZE为单位申请buffer，而且此函数可以运行在进程上下文和中断上下文。\n\n![image-20200829092028125](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200829092028125_z3sk9c.png)\n\n&emsp;&emsp;当所申请的buffer已经使用完，需要取消映射并释放此块内存，dma_free_coherent()函数直接取消内存的映射并释放内存，其中第三个参数为内存的虚拟地址，第四个参数为bus addr，与dma_alloc_coherent()函数不同的是，dma_free_coherent()函数只能运行在进程上下文而不能运行在中断上下文，在某些平台释放DMAbuffer的时候会引发TLB维护的操作，从而引起cpu core之间的通信，如果关闭了IRQ会锁死在SMP IPI的代码中。\n\n\n\n&emsp;&emsp;在所申请的大块内存中还会分成很多个pool，这里是通过堆相关的函数来进行管理的，通过HeapMem_alloc()函数从大块内存中申请一个pool，HeapMem_free()则释放一个pool，具体不继续分析。\n\n&emsp;&emsp;这里继续分析流式DMA映射的接口函数，流式DMA映射有两个版本的接口函数，一种是用来map/umap单个dma buffer，另一种用来map/umap形成scatterlist的多个dma buffer。\n\n1. 单个dma buffer映射\n\n   &emsp;&emsp;映射单个dma buffer的接口函数为dma_map_single()，传入的参数为struct device设备结构，虚拟地址，内存大小以及DMA操作的方向。\n\n   ```C\n   dma_handle = dma_map_single(dev, addr, size, direction); \n   ```\n\n   &emsp;&emsp;umap单个dma buffer使用dma_unmap_single()接口函数\n\n   ```C\n   dma_unmap_single(dev, dma_handle, size, direction);\n   ```\n\n2. 多个形成scatterlist的dma buffer\n\n   &emsp;&emsp;在scatterlist的情况下，需要映射的对象是分散的若干段dma buffer，通过dma_map_sg将scatterlist结构中的多个dma buffer映射成一个大块的、连续的bus address region。\n\n   ```C\n   int i, count = dma_map_sg(dev, sglist, nents, direction);\n   struct scatterlist *sg;\n   \n   for_each_sg(sglist, sg, count, i) { \n       hw_address[i] = sg_dma_address(sg); \n       hw_len[i] = sg_dma_len(sg); \n   }\n   ```\n\n   &emsp;&emsp;umap多个形成scatterlist的dma buffer是通过下面的接口实现的\n\n   ```C\n   dma_unmap_sg(dev, sglist, nents, direction);\n   ```\n\n   &emsp;&emsp;调用dma_unmap_sg的时候要确保DMA操作已经完成，另外，传递给dma_unmap_sg的nents参数需要等于传递给dma_map_sg的nents参数，而不是该函数返回的count。\n\n   &emsp;&emsp;执行流式DMA映射的时候需要考虑CPU和设备之间数据的同步问题，以保证设备看到的数据和CPU看到的数据是一样的。所以，在进行映射DMA映射，完成传输之后，需要调用相关的函数来进行同步\n\n   ```C\n   dma_sync_single_for_cpu(dev, dma_handle, size, direction);\n   //或者\n   dma_sync_sg_for_cpu(dev, sglist, nents, direction);\n   ```\n\n   \n\n&emsp;&emsp;由于DMA地址空间在某些CPU架构上是有限的，因此分配并map可能会产生错误，所以需要判断过程中是否产生了错误以及出错之后的处理\n\n* 检查dma_map_single和dma_map_page返回的dma address\n\n  ```C\n  dma_addr_t dma_handle;\n  \n  dma_handle = dma_map_single(dev, addr, size, direction); \n  if (dma_mapping_error(dev, dma_handle)) { \n  \tgoto map_error_handling; \n  }\n  ```\n\n* 当在mapping多个page的时候，如果中间发生了mapping error，那么需要对那些已经mapped的page进行unmap的操作\n\n  ```C\n  dma_addr_t dma_handle1; \n  \n  dma_handle1 = dma_map_single(dev, addr, size, direction); \n  if (dma_mapping_error(dev, dma_handle1)) { \n      goto map_error_handling1; \n  } \n  ```\n\n\n\n\n### 四、DMA驱动分析以及初始化配置\n\n&emsp;&emsp;上面只分析了DMA的执行流程，但是其初始化过程以及驱动的配置方案全都没有分析，接下来会继续分析剩下的部分。下图为DMA框架的大体流程：\n\n\n\n​\t\t![dma框架](https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma%E6%A1%86%E6%9E%B6_ogfn0e.svg)\n\n\n\n&emsp;&emsp;硬件环境为ARMv7架构，SOC为TI的AM5728，SOC上内置一个DMA控制器。Linux内核中对DMA的支持通过DMA ENGINE架构，具体的实现分为Provider、Consumer以及DMA Buffer三个方面。三种抽象为：\n\n&emsp;&emsp;Provider：就是指SOC上的DMA Controller\n\n&emsp;&emsp;Consumer：那些能利用DMA搬移数据的片上外设，例如MMC、USB Controller等\n\n&emsp;&emsp;DMA Buffer：DMA传输过程中需要用到的数据缓冲\n\n#### 4.1 Provider\n\n&emsp;&emsp;Provider所抽象的是SOC上的DMA控制器，它的驱动实现是与具体架构相关，以及传输过程中cache同步问题都在架构相关的文件中，涉及到的文件主要有`arch/arm/mm/dma-mapping.c`、`arch/arm/kernel/dma.c`、`arch/arm/mach-omap2/dma.c`、`arch/arm/plat-omap/dma.c`、`drivers/base/dma-mapping.c`、`drivers/base/dma-coherent.c`、`drivers/base/*`、`drivers/dma/*`等文件\n\n**arch/arm/mm/dma-mapping.c：**主要实现由上层传来的分配buffer、从CMA区域分配buffer、带cache操作的分配buffer等操作的具体实现\n\n**arch/arm/kernel/dma.c：**主要实现dma channel以及channel的各种操作，包括分配channel、释放channel等，其中还包括在procfs中创建接口\n\n**arch/arm/mach-omap2/dma.c：**为设备树文件解析出来的plat-form节点分配内存并映射到内存中，初始化其中的部分数据\n\n**arch/arm/plat-omap/dma.c：**解析出来的plat-form节点驱动和设备节点的初始化以及注册到内核，还包括中断的处理和注册\n\n**drivers/base/dma-mapping.c：**对base目录下的coherent和contiguous两个关于dma文件的抽象，相当于一个核心层\n\n**drivers/base/dma-coherent.c：**对于CMA及其他关于连续内存的操作\n\n**drivers/dma/omap-dma.c：**dma engine驱动的具体实现，根据具体硬件SOC上的DMA控制器实现相应的驱动，包括omap dma驱动、dma-crossbar驱动、virt-dma驱动等\n\n**drivers/dma/dmaengine.c：**抽象出的dmaengine架构，在上层将各种dma控制器的驱动抽象到一起，构成一层核心层\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma_seq_dduobt.png\" alt=\"dma_seq\" style=\"zoom: 25%;\" />\n\n#### 4.2 Consumer\n\n&emsp;&emsp;Consumer则是利用DMA进行传输的其他外设，他们通过dmaengine提供的统一的接口去调用更底层的DMA驱动，如上图中的最上层就是提供给Consumer使用的。Consumer作为slave端，需要遵守一定的规则去进行DMA传输：\n\n1. 分配一个DMA slave channel\n\n2. 设置slave和DMA控制器特殊的参数\n\n3. 获取一个描述DMA传输的descriptor\n\n4. 提交传输\n\n5. 发出DMA请求并等待反馈信息\n\n     \n\n#### 4.3 DMA Buffer\n\n&emsp;&emsp;DMA传输根据方向可以分为device to memory、memory to device、device to device、memory to memory四种，其中memory to memory有自己专有的一套API，以async_开头，最后，因为mem2mem的DMA传输有了比较简洁的API，没必要直接使用dma engine提供的API，最后就导致dma engine所提供的API就特指为Slave-DMA API（即其他三种DMA传输）\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/dma_tx_i7hscd.png\" alt=\"dma_tx\" style=\"zoom: 33%;\" />\n\n&emsp;&emsp;当传输的源或者目的地是memory的时候，为了提高效率，DMA controller不会每一次传输都访问memory，而是在内部开一个buffer，将数据缓存在自己buffer中：\n\n* memory是源的时候，一次从memory读出一批数据保存在自己的buffer中，然后再一点点（以时钟为节拍）传输到目的地\n\n* memory是目的地的时候，先将源的数据传输到自己的buffer中，当累计到一定数量之后，再一次性写入memory\n\n  DMA控制器内部可缓存的数据量的大小称作burst size\n\n  \n\n&emsp;&emsp; 一般的DMA控制器只能访问物理地址连续的内存，但在有些场景下，我们只有一些物理地址不连续的内存块，需要DMA把这些内存块的数据搬移到别处，这种场景称为scatter-gather。\n\n&emsp;&emsp;实现scatter-gather也有两种方式，一种是在DMA核心层提供scatter-gather的能力，用软件去模拟。这种方式需要先将内存块的数据搬移到一个连续的地址，然后让DMA从这个新地址开始搬移。另一种是DMA控制器本身支持scatter-gather，直接配置控制器即可，在软件上需要准备一个table或link-list，这里不继续深入分析。\n\n\n\n### 五代码分析\n\n&emsp;&emsp;linux内核版本4.4.19，分析的方向为自底向上，从最底层架构相关到DMA驱动最后到其他驱动调用DMA接口\n\n#### 5.1 架构相关\n\n&emsp;&emsp;在DMA相关的操作中，有关架构的操作和系统初始化是先于设备初始化的，系统初始化阶段会完成底层架构操作与base层的绑定，具体流程大致为\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma_seq_arch_gse1vd.png\" alt=\"dma_seq_arch\" style=\"zoom: 25%;\" />\n\n&emsp;&emsp;其中，在初始化过程中就会完成DMA操作的定义，主要是完成DMA控制器与架构相关操作的实现，通过上层的调用能够执行最底层的DMA操作，当在驱动中去调用DMA的接口函数时，则直接调用与底层架构相关的函数接口，完成所需动作，具体函数调用流程为：\n\n![func_seq](https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/func_seq_xkxvvq.png)\n\n&emsp;&emsp;这个过程主要是实现最底层的DMA操作，其中最主要的就是arm_dma_ops结构体的实现和注册\n\n![image-20200921145912242](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921145912242_hhyelf.png)\n\n&emsp;&emsp;先分析arm_dma_alloc函数，它主要是获取DMA所需的buffer，这里需要先声明一些关于页表的类型和操作，所有的物理页面都是4k对齐的，因此所有表项的地址只需要高20位，而低12位则用于记录页面的状态信息和访问权限，即pgprot_t类型。\n\n![image-20200921150114291](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921150114291_nijvbe.png)\n\n&emsp;&emsp;这里主要是执行第二个函数\\_\\_dma\\_alloc，根据设备的不同，所分配的页面位置和页面类型也是不同的，如果只是普通的分配页面则执行simple\\_buffer的分配，如果是CMA内存区域则直接从所保留的内存区域分配页面，CMA的分析参考上一篇，如果是流式DMA buffer则和普通的页面分配是一样的，还有一种从pool中分配页面和remap页面，暂不分析其用途\n\n![image-20200921155220167](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921155220167_vziqns.png)\n\n&emsp;&emsp;我们这里是流式DMA，所以所分配的buffer是通过\\_\\_alloc\\_simple\\_buffer函数，传入的参数分别为设备节点、buffer大小、页面标志，\\_\\_alloc\\_simple\\_buffer则继续向下调用\\_\\_dma\\_alloc\\_buffer，其最终通过底层页分配器的接口--alloc_pages实现buffer的分配\n\n![image-20200921161715546](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921161715546_oett5j.png)\n\n&emsp;&emsp;页分配器的工作原理后续再分析，其他函数的实现也暂不继续分析\n\n#### 5.2 DMA驱动\n\n&emsp;&emsp;首先看DMA对应在设备树中的节点\n\n```C\n\t...\n\t\t\t\tsdma_xbar: dma-router@b78 {\n\t\t\t\t\tcompatible = \"ti,dra7-dma-crossbar\";\n\t\t\t\t\treg = <0xb78 0xfc>;\n\t\t\t\t\t#dma-cells = <1>;\n\t\t\t\t\tdma-requests = <205>;\n\t\t\t\t\tti,dma-safe-map = <0>;\n\t\t\t\t\tdma-masters = <&sdma>;\n\t\t\t\t};\n\n\t\t\t\tedma_xbar: dma-router@c78 {\n\t\t\t\t\tcompatible = \"ti,dra7-dma-crossbar\";\n\t\t\t\t\treg = <0xc78 0x7c>;\n\t\t\t\t\t#dma-cells = <2>;\n\t\t\t\t\tdma-requests = <204>;\n\t\t\t\t\tti,dma-safe-map = <0>;\n\t\t\t\t\tdma-masters = <&edma>;\n\t\t\t\t};\n\t...\n\t\tsdma: dma-controller@4a056000 {\n\t\t\tcompatible = \"ti,omap4430-sdma\";\n\t\t\treg = <0x4a056000 0x1000>;\n\t\t\tinterrupts = <GIC_SPI 7 IRQ_TYPE_LEVEL_HIGH>,\n\t\t\t\t     <GIC_SPI 8 IRQ_TYPE_LEVEL_HIGH>,\n\t\t\t\t     <GIC_SPI 9 IRQ_TYPE_LEVEL_HIGH>,\n\t\t\t\t     <GIC_SPI 10 IRQ_TYPE_LEVEL_HIGH>;\n\t\t\t#dma-cells = <1>;\n\t\t\tdma-channels = <32>;\n\t\t\tdma-requests = <127>;\n\t\t};\n\n\t\tedma: edma@43300000 {\n\t\t\tcompatible = \"ti,edma3-tpcc\";\n\t\t\tti,hwmods = \"tpcc\";\n\t\t\treg = <0x43300000 0x100000>;\n\t\t\treg-names = \"edma3_cc\";\n\t\t\tinterrupts = <GIC_SPI 361 IRQ_TYPE_LEVEL_HIGH>,\n\t\t\t\t     <GIC_SPI 360 IRQ_TYPE_LEVEL_HIGH>,\n\t\t\t\t     <GIC_SPI 359 IRQ_TYPE_LEVEL_HIGH>;\n\t\t\tinterrupt-names = \"edma3_ccint\", \"emda3_mperr\",\n\t\t\t\t\t  \"edma3_ccerrint\";\n\t\t\tdma-requests = <64>;\n\t\t\t#dma-cells = <2>;\n\n\t\t\tti,tptcs = <&edma_tptc0 7>, <&edma_tptc1 0>;\n\t\t};\n\t...\n        uart1: serial@4806a000 {\n\t\t\tcompatible = \"ti,dra742-uart\", \"ti,omap4-uart\";\n\t\t\treg = <0x4806a000 0x100>;\n\t\t\tinterrupts-extended = <&crossbar_mpu GIC_SPI 67 IRQ_TYPE_LEVEL_HIGH>;\n\t\t\tti,hwmods = \"uart1\";\n\t\t\tclock-frequency = <48000000>;\n\t\t\tstatus = \"disabled\";\n\t\t\tdmas = <&edma_xbar 49 0>, <&edma_xbar 50 0>;\n\t\t\tdma-names = \"tx\", \"rx\";\n\t\t};\n```\n\n&emsp;&emsp;在设备树中如果一个设备可以利用DMA传输，只需要在设备节点中加入dmas属性，并声明所使用的DMA控制器以及channel编号，例如uart1中所使用的edma 49和50号channel。\n\n&emsp;&emsp;使用DMA设备有很多，为了方便管理和使用，同时也是为了利用内核中现有的驱动框架，DMA驱动的实现也是标准的总线-设备-驱动模型，在设备驱动模型中还有隐藏在幕后的kobject、class和kset，每一个kobject对应sys文件系统里的一个目录，其parent指针将形成一个树状分层结构，class则是抽象设备的高层视图，描述的是设备的集合，不包含同类型的设备的底层实现细节，kset则是kobject的顶层容器类\n\n![device_model](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/device_model-1600679671585_rn5dts.png)\n\n&emsp;&emsp;在drivers/dma/目录中与DMA驱动相关的文件主要有dmaengine.c、edma.c、of-dma.c、omap-dma.c、ti-dma-crossbar.c、virt-dma.c，dmaengine.c是整个DMA驱动的最上层入口，在这里实现了DMA驱动模型，即上面的一些结构，还抽象了一个dma_bus总线，初始化了一个pool。omap-dma.c和edma.c分别对应SOC上面的System DMA和Enhanced DMA的驱动程序，of-dma.c实现了基于DMA的一些设备树操作，ti-dma-crossbar.c则是dma-crossbar的驱动程序，virt-dma.c对应虚拟channel。\n\n&emsp;&emsp;首先是dmaengine.c，主要是去注册创建一个pool，这个pool是通过slab分配器实现的\n\n```C\nstatic int __init dmaengine_init_unmap_pool(void)\n{\n\tint i;\n\n\tfor (i = 0; i < ARRAY_SIZE(unmap_pool); i++) {\n\t\tstruct dmaengine_unmap_pool *p = &unmap_pool[i];\n\t\tsize_t size;\n\n\t\tsize = sizeof(struct dmaengine_unmap_data) +\n\t\t       sizeof(dma_addr_t) * p->size;\n\n        /* slab分配器接口，以后分析 */\n\t\tp->cache = kmem_cache_create(p->name, size, 0,\n\t\t\t\t\t     SLAB_HWCACHE_ALIGN, NULL);\n\t\tif (!p->cache)\n\t\t\tbreak;\n        /* slab分配器接口，以后分析 */\n\t\tp->pool = mempool_create_slab_pool(1, p->cache);\n\t\tif (!p->pool)\n\t\t\tbreak;\n\t}\n\n\tif (i == ARRAY_SIZE(unmap_pool))\n\t\treturn 0;\n\n\tdmaengine_destroy_unmap_pool();\n\treturn -ENOMEM;\n}\n```\n\n&emsp;&emsp;然后是omap-dma.c，这里是dma驱动的具体实现，其中主要是probe函数，当在dma-bus总线上匹配到dma设备就会执行probe函数\n\n```C\nstatic int omap_dma_probe(struct platform_device *pdev)\n{\n\tstruct omap_dmadev *od;\n\tstruct resource *res;\n\tint rc, i, irq;\n\n    /* 为omap_dmadev结构体申请内存 */\n\tod = devm_kzalloc(&pdev->dev, sizeof(*od), GFP_KERNEL);\n\tif (!od)\n\t\treturn -ENOMEM;\n\n    /* 获取内存资源 */\n\tres = platform_get_resource(pdev, IORESOURCE_MEM, 0);\n\tod->base = devm_ioremap_resource(&pdev->dev, res);\n\tif (IS_ERR(od->base))\n\t\treturn PTR_ERR(od->base);\n\n\tod->plat = omap_get_plat_info();\n\tif (!od->plat)\n\t\treturn -EPROBE_DEFER;\n\t/* 这里都是配置od对象 */\n\tod->reg_map = od->plat->reg_map;\n\tdma_cap_set(DMA_SLAVE, od->ddev.cap_mask);\n\tdma_cap_set(DMA_CYCLIC, od->ddev.cap_mask);\n\tdma_cap_set(DMA_MEMCPY, od->ddev.cap_mask);\n\tod->ddev.device_alloc_chan_resources = omap_dma_alloc_chan_resources;\n\tod->ddev.device_free_chan_resources = omap_dma_free_chan_resources;\n\tod->ddev.device_tx_status = omap_dma_tx_status;\n\tod->ddev.device_issue_pending = omap_dma_issue_pending;\n\tod->ddev.device_prep_slave_sg = omap_dma_prep_slave_sg;\n\tod->ddev.device_prep_dma_cyclic = omap_dma_prep_dma_cyclic;\n\tod->ddev.device_prep_dma_memcpy = omap_dma_prep_dma_memcpy;\n\tod->ddev.device_config = omap_dma_slave_config;\n\tod->ddev.device_pause = omap_dma_pause;\n\tod->ddev.device_resume = omap_dma_resume;\n\tod->ddev.device_terminate_all = omap_dma_terminate_all;\n\tod->ddev.device_synchronize = omap_dma_synchronize;\n\tod->ddev.src_addr_widths = OMAP_DMA_BUSWIDTHS;\n\tod->ddev.dst_addr_widths = OMAP_DMA_BUSWIDTHS;\n\tod->ddev.directions = BIT(DMA_DEV_TO_MEM) | BIT(DMA_MEM_TO_DEV);\n\tod->ddev.residue_granularity = DMA_RESIDUE_GRANULARITY_BURST;\n\tod->ddev.dev = &pdev->dev;\n\tINIT_LIST_HEAD(&od->ddev.channels);\n\tspin_lock_init(&od->lock);\n\tspin_lock_init(&od->irq_lock);\n\n\tod->dma_requests = OMAP_SDMA_REQUESTS;\n\tif (pdev->dev.of_node && of_property_read_u32(pdev->dev.of_node,\n\t\t\t\t\t\t      \"dma-requests\",\n\t\t\t\t\t\t      &od->dma_requests)) {\n\t\tdev_info(&pdev->dev,\n\t\t\t \"Missing dma-requests property, using %u.\\n\",\n\t\t\t OMAP_SDMA_REQUESTS);\n\t}\n\n\tfor (i = 0; i < OMAP_SDMA_CHANNELS; i++) {\n\t\trc = omap_dma_chan_init(od);\n\t\tif (rc) {\n\t\t\tomap_dma_free(od);\n\t\t\treturn rc;\n\t\t}\n\t}\n\n    /* 从设备树中获取中断 */\n\tirq = platform_get_irq(pdev, 1);\n\tif (irq <= 0) {\n\t\tdev_info(&pdev->dev, \"failed to get L1 IRQ: %d\\n\", irq);\n\t\tod->legacy = true;\n\t} else {\n\t\t/* Disable all interrupts */\n\t\tod->irq_enable_mask = 0;\n\t\tomap_dma_glbl_write(od, IRQENABLE_L1, 0);\n\n\t\trc = devm_request_irq(&pdev->dev, irq, omap_dma_irq,\n\t\t\t\t      IRQF_SHARED, \"omap-dma-engine\", od);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\tod->ddev.filter.map = od->plat->slave_map;\n\tod->ddev.filter.mapcnt = od->plat->slavecnt;\n\tod->ddev.filter.fn = omap_dma_filter_fn;\n\n    /* 注册OMAP-DMA设备 */\n\trc = dma_async_device_register(&od->ddev);\n\n\tplatform_set_drvdata(pdev, od);\n\n\tif (pdev->dev.of_node) {\n\t\tomap_dma_info.dma_cap = od->ddev.cap_mask;\n\n\t\t/* Device-tree DMA controller registration */\n\t\trc = of_dma_controller_register(pdev->dev.of_node,\n\t\t\t\tof_dma_simple_xlate, &omap_dma_info);\n\t\tif (rc) {\n\t\t\tpr_warn(\"OMAP-DMA: failed to register DMA controller\\n\");\n\t\t\tdma_async_device_unregister(&od->ddev);\n\t\t\tomap_dma_free(od);\n\t\t}\n\t}\n\n\tdev_info(&pdev->dev, \"OMAP DMA engine driver\\n\");\n\treturn rc;\n}\n```\n\n&emsp;&emsp;edma驱动中涉及到edma-tptc和edma的注册，主体还是edma的probe函数\n\n```C\nstatic int edma_probe(struct platform_device *pdev)\n{\n\tstruct edma_soc_info\t*info = pdev->dev.platform_data;\n\ts8\t\t\t(*queue_priority_mapping)[2];\n\tint\t\t\ti, off, ln;\n\tconst s16\t\t(*rsv_slots)[2];\n\tconst s16\t\t(*xbar_chans)[2];\n\tint\t\t\tirq;\n\tchar\t\t\t*irq_name;\n\tstruct resource\t\t*mem;\n\tstruct device_node\t*node = pdev->dev.of_node;\n\tstruct device\t\t*dev = &pdev->dev;\n\tstruct edma_cc\t\t*ecc;\n\tbool\t\t\tlegacy_mode = true;\n\tint ret;\n\n\tif (node) {\n\t\tconst struct of_device_id *match;\n\n\t\tmatch = of_match_node(edma_of_ids, node);\n\t\tif (match && (u32)match->data == EDMA_BINDING_TPCC)\n\t\t\tlegacy_mode = false;\n\n\t\tinfo = edma_setup_info_from_dt(dev, legacy_mode);\n\t\tif (IS_ERR(info)) {\n\t\t\tdev_err(dev, \"failed to get DT data\\n\");\n\t\t\treturn PTR_ERR(info);\n\t\t}\n\t}\n\n\tpm_runtime_enable(dev);\n\tret = pm_runtime_get_sync(dev);\n\n\tret = dma_set_mask_and_coherent(dev, DMA_BIT_MASK(32));\n\n\tecc = devm_kzalloc(dev, sizeof(*ecc), GFP_KERNEL);\n\n\tecc->dev = dev;\n\tecc->id = pdev->id;\n\tecc->legacy_mode = legacy_mode;\n\t/* When booting with DT the pdev->id is -1 */\n\tif (ecc->id < 0)\n\t\tecc->id = 0;\n\n    /* 同样获取设备的内存资源 */\n\tmem = platform_get_resource_byname(pdev, IORESOURCE_MEM, \"edma3_cc\");\n\n\tecc->base = devm_ioremap_resource(dev, mem);\n\tif (IS_ERR(ecc->base))\n\t\treturn PTR_ERR(ecc->base);\n\n\tplatform_set_drvdata(pdev, ecc);\n\n\t/* 从硬件IP中获取edma的配置参数 */\n\tret = edma_setup_from_hw(dev, info, ecc);\n\n\t/* 基于硬件IP参数申请内存 */\n\tecc->slave_chans = devm_kcalloc(dev, ecc->num_channels,\n\t\t\t\t\tsizeof(*ecc->slave_chans), GFP_KERNEL);\n\n\tecc->slot_inuse = devm_kcalloc(dev, BITS_TO_LONGS(ecc->num_slots),\n\t\t\t\t       sizeof(unsigned long), GFP_KERNEL);\n\n\tecc->default_queue = info->default_queue;\n\n\tfor (i = 0; i < ecc->num_slots; i++)\n\t\tedma_write_slot(ecc, i, &dummy_paramset);\n\n\tif (info->rsv) {\n\t\t/* Set the reserved slots in inuse list */\n\t\trsv_slots = info->rsv->rsv_slots;\n\t\tif (rsv_slots) {\n\t\t\tfor (i = 0; rsv_slots[i][0] != -1; i++) {\n\t\t\t\toff = rsv_slots[i][0];\n\t\t\t\tln = rsv_slots[i][1];\n\t\t\t\tset_bits(off, ln, ecc->slot_inuse);\n\t\t\t}\n\t\t}\n\t}\n\n\t/* 清除xbar在unused链表中的通道映射 */\n\txbar_chans = info->xbar_chans;\n\tif (xbar_chans) {\n\t\tfor (i = 0; xbar_chans[i][1] != -1; i++) {\n\t\t\toff = xbar_chans[i][1];\n\t\t}\n\t}\n\n    /* 获取中断 */\n\tirq = platform_get_irq_byname(pdev, \"edma3_ccint\");\n\tif (irq < 0 && node)\n\t\tirq = irq_of_parse_and_map(node, 0);\n\n\tirq = platform_get_irq_byname(pdev, \"edma3_ccerrint\");\n\tif (irq < 0 && node)\n\t\tirq = irq_of_parse_and_map(node, 2);\n\n\tif (irq >= 0) {\n\t\tirq_name = devm_kasprintf(dev, GFP_KERNEL, \"%s_ccerrint\",\n\t\t\t\t\t  dev_name(dev));\n\t\tret = devm_request_irq(dev, irq, dma_ccerr_handler, 0, irq_name,\n\t\t\t\t       ecc);\n\t\tif (ret) {\n\t\t\tdev_err(dev, \"CCERRINT (%d) failed --> %d\\n\", irq, ret);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\tecc->dummy_slot = edma_alloc_slot(ecc, EDMA_SLOT_ANY);\n\tif (ecc->dummy_slot < 0) {\n\t\tdev_err(dev, \"Can't allocate PaRAM dummy slot\\n\");\n\t\treturn ecc->dummy_slot;\n\t}\n\n\tqueue_priority_mapping = info->queue_priority_mapping;\n\n\t/* 事件队列优先映射 */\n\tfor (i = 0; queue_priority_mapping[i][0] != -1; i++)\n\t\tedma_assign_priority_to_queue(ecc, queue_priority_mapping[i][0],\n\t\t\t\t\t      queue_priority_mapping[i][1]);\n\n\tfor (i = 0; i < ecc->num_region; i++) {\n\t\tedma_write_array2(ecc, EDMA_DRAE, i, 0, 0x0);\n\t\tedma_write_array2(ecc, EDMA_DRAE, i, 1, 0x0);\n\t\tedma_write_array(ecc, EDMA_QRAE, i, 0x0);\n\t}\n\tecc->info = info;\n\n\t/* 初始化dma设备和channels */\n\tedma_dma_init(ecc, legacy_mode);\n\n\tfor (i = 0; i < ecc->num_channels; i++) {\n\t\t/* 分配所有的channels到默认的队列 */\n\t\tedma_assign_channel_eventq(&ecc->slave_chans[i],\n\t\t\t\t\t   info->default_queue);\n\t\t/* 设置虚拟slot的入口位置 */\n\t\tedma_set_chmap(&ecc->slave_chans[i], ecc->dummy_slot);\n\t}\n\n\tecc->dma_slave.filter.map = info->slave_map;\n\tecc->dma_slave.filter.mapcnt = info->slavecnt;\n\tecc->dma_slave.filter.fn = edma_filter_fn;\n\n\tret = dma_async_device_register(&ecc->dma_slave);\n\tif (ret) {\n\t\tdev_err(dev, \"slave ddev registration failed (%d)\\n\", ret);\n\t\tgoto err_reg1;\n\t}\n\n\tif (ecc->dma_memcpy) {\n\t\tret = dma_async_device_register(ecc->dma_memcpy);\n\t\tif (ret) {\n\t\t\tdev_err(dev, \"memcpy ddev registration failed (%d)\\n\",\n\t\t\t\tret);\n\t\t\tdma_async_device_unregister(&ecc->dma_slave);\n\t\t\tgoto err_reg1;\n\t\t}\n\t}\n\n\tif (node)\n\t\tof_dma_controller_register(node, of_edma_xlate, ecc);\n\n\tdev_info(dev, \"TI EDMA DMA engine driver\\n\");\n\n\treturn 0;\n\nerr_reg1:\n\tedma_free_slot(ecc, ecc->dummy_slot);\n\treturn ret;\n}\n```\n\n&emsp;&emsp;然后是ti-dma-crossbar.c，负责dma事件映射\n\n```C\nstatic int ti_dra7_xbar_probe(struct platform_device *pdev)\n{\n\tstruct device_node *node = pdev->dev.of_node;\n\tconst struct of_device_id *match;\n\tstruct device_node *dma_node;\n\tstruct ti_dra7_xbar_data *xbar;\n\tstruct property *prop;\n\tstruct resource *res;\n\tu32 safe_val;\n\tsize_t sz;\n\tvoid __iomem *iomem;\n\tint i, ret;\n\n\tif (!node)\n\t\treturn -ENODEV;\n\n\txbar = devm_kzalloc(&pdev->dev, sizeof(*xbar), GFP_KERNEL);\n\tif (!xbar)\n\t\treturn -ENOMEM;\n\n\tdma_node = of_parse_phandle(node, \"dma-masters\", 0);\n\tif (!dma_node) {\n\t\tdev_err(&pdev->dev, \"Can't get DMA master node\\n\");\n\t\treturn -ENODEV;\n\t}\n\n\tmatch = of_match_node(ti_dra7_master_match, dma_node);\n\tif (!match) {\n\t\tdev_err(&pdev->dev, \"DMA master is not supported\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tif (of_property_read_u32(dma_node, \"dma-requests\",\n\t\t\t\t &xbar->dma_requests)) {\n\t\tdev_info(&pdev->dev,\n\t\t\t \"Missing XBAR output information, using %u.\\n\",\n\t\t\t TI_DRA7_XBAR_OUTPUTS);\n\t\txbar->dma_requests = TI_DRA7_XBAR_OUTPUTS;\n\t}\n\tof_node_put(dma_node);\n\n\txbar->dma_inuse = devm_kcalloc(&pdev->dev,\n\t\t\t\t       BITS_TO_LONGS(xbar->dma_requests),\n\t\t\t\t       sizeof(unsigned long), GFP_KERNEL);\n\tif (!xbar->dma_inuse)\n\t\treturn -ENOMEM;\n\n\tif (of_property_read_u32(node, \"dma-requests\", &xbar->xbar_requests)) {\n\t\tdev_info(&pdev->dev,\n\t\t\t \"Missing XBAR input information, using %u.\\n\",\n\t\t\t TI_DRA7_XBAR_INPUTS);\n\t\txbar->xbar_requests = TI_DRA7_XBAR_INPUTS;\n\t}\n\n\tif (!of_property_read_u32(node, \"ti,dma-safe-map\", &safe_val))\n\t\txbar->safe_val = (u16)safe_val;\n\n\n\tprop = of_find_property(node, \"ti,reserved-dma-request-ranges\", &sz);\n\tif (prop) {\n\t\tconst char pname[] = \"ti,reserved-dma-request-ranges\";\n\t\tu32 (*rsv_events)[2];\n\t\tsize_t nelm = sz / sizeof(*rsv_events);\n\t\tint i;\n\n\t\tif (!nelm)\n\t\t\treturn -EINVAL;\n\n\t\trsv_events = kcalloc(nelm, sizeof(*rsv_events), GFP_KERNEL);\n\t\tif (!rsv_events)\n\t\t\treturn -ENOMEM;\n\n\t\tret = of_property_read_u32_array(node, pname, (u32 *)rsv_events,\n\t\t\t\t\t\t nelm * 2);\n\t\tif (ret)\n\t\t\treturn ret;\n\n\t\tfor (i = 0; i < nelm; i++) {\n\t\t\tti_dra7_xbar_reserve(rsv_events[i][0], rsv_events[i][1],\n\t\t\t\t\t     xbar->dma_inuse);\n\t\t}\n\t\tkfree(rsv_events);\n\t}\n\n\tres = platform_get_resource(pdev, IORESOURCE_MEM, 0);\n\tiomem = devm_ioremap_resource(&pdev->dev, res);\n\tif (IS_ERR(iomem))\n\t\treturn PTR_ERR(iomem);\n\n\txbar->iomem = iomem;\n\n\txbar->dmarouter.dev = &pdev->dev;\n\txbar->dmarouter.route_free = ti_dra7_xbar_free;\n\txbar->dma_offset = (u32)match->data;\n\n\tmutex_init(&xbar->mutex);\n\tplatform_set_drvdata(pdev, xbar);\n\n\t/* Reset the crossbar */\n\tfor (i = 0; i < xbar->dma_requests; i++) {\n\t\tif (!test_bit(i, xbar->dma_inuse))\n\t\t\tti_dra7_xbar_write(xbar->iomem, i, xbar->safe_val);\n\t}\n\n\tret = of_dma_router_register(node, ti_dra7_xbar_route_allocate,\n\t\t\t\t     &xbar->dmarouter);\n\tif (ret) {\n\t\t/* Restore the defaults for the crossbar */\n\t\tfor (i = 0; i < xbar->dma_requests; i++) {\n\t\t\tif (!test_bit(i, xbar->dma_inuse))\n\t\t\t\tti_dra7_xbar_write(xbar->iomem, i, i);\n\t\t}\n\t}\n\n\treturn ret;\n}\n```\n\n&emsp;&emsp;最后是虚拟channel，在virt-dma.c文件中实现\n\n```C\nvoid vchan_init(struct virt_dma_chan *vc, struct dma_device *dmadev)\n{\n\tdma_cookie_init(&vc->chan);\n\n\tspin_lock_init(&vc->lock);\n\tINIT_LIST_HEAD(&vc->desc_allocated);\n\tINIT_LIST_HEAD(&vc->desc_submitted);\n\tINIT_LIST_HEAD(&vc->desc_issued);\n\tINIT_LIST_HEAD(&vc->desc_completed);\n\n\ttasklet_init(&vc->task, vchan_complete, (unsigned long)vc);\n\n\tvc->chan.device = dmadev;\n\tlist_add_tail(&vc->chan.device_node, &dmadev->channels);\n}\n```\n\n#### 5.3 具体实例\n\n&emsp;&emsp;这里给出一个实际驱动中调用dma传输的一个例子，在cmem驱动中通过一致性dma接口分配了buffer，调用v7\\_dma\\_map\\_area函数实现cache的同步和dma传输\n\n![image-20200923091128578](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200923091128578_w4xg1t.png)\n\n","source":"_posts/dma.md","raw":"---\ntitle: dma\ndate: 2021-03-04 23:08:25\ntags: [Linux,dma,驱动]\ncategories: Linux\n---\n\n### 前言\n\n&emsp;&emsp;Linux中关于dma的操作非常常见，一些dma驱动独立到drivers/dma/目录下，架构相关的dma操作放在arch/arm/mm/目录下，还有在drivers/base/目录下也有关于dma的驱动，以及drivers/dma-buf/目录下所形成的dma-buf架构，因此有必要梳理一下dma的框架\n\n<!-- more -->\n\n&emsp;&emsp;DMA（Direct Memory Access）用于在设备和内存之间直接进行数据传输而不经过CPU的一种方式，主要通过DMA控制器来实现，而DMA控制器也主要分为两种，一种是嵌入到SOC上的外部DMA控制器，另一种是设备自带的DMA控制器。\n\n&emsp;&emsp;首先是SOC上的DMA控制器，这个控制器主要是为了解决那些自身不带DMA控制器的设备也能进行DMA传输，其他的设备通过向这个总DMA控制器注册来实现DMA传输。\n\n![DMA](https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/DMA_ut94kz.png)\n\n&emsp;&emsp;而对于那些自身携带DMA控制器的设备来说，他们可以独自实现DMA传输。\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/DMA_device_oxv55a.png\" alt=\"DMA_device\" style=\"zoom: 25%;\" />\n\n&emsp;&emsp;其中，Descriptor描述DMA传输过程中的各种属性。DMA传输使用的是物理地址，而且所处理的buffer必须是物理上连续的。且CPU访问内存都是通过cache，但DMA不能访问cache，所以需要注意cache一致性，ARM架构通过clean、invalid操作来完成。在进行内存到设备传输时，要确保已经将cache中的内容写到内存上；在进行设备到内存传输时，从内存上读取数据之前需要确保将cache中对应的数据无效。\n\n\n\n### 一、总体分析\n\n&emsp;&emsp;内核通常使用的地址是虚拟地址。我们调用kmalloc()、vmalloc()或者类似的接口返回的地址都是虚拟地址，保存在\"void *\"的变量中。虚拟内存系统（TLB、页表等）将虚拟地址（程序角度）翻译成物理地址（CPU角度），物理地址保存在“phys_addr_t”或“resource_size_t”的变量中。对于一个硬件设备上的寄存器等设备资源，内核是按照物理地址来管理的。驱动并不能直接使用这些物理地址，必须首先通过ioremap()接口将这些物理地址映射到内核虚拟地址空间上去。\n\n&emsp;&emsp;I/O设备使用第三种地址：“总线地址”。如果设备在MMIO地址空间（MMIO是物理地址空间的子集）中有若干的寄存器，或者该设备足够的智能，可以通过DMA执行读写系统内存的操作，这些情况下，设备使用的地址就是总线地址。在某些系统中，总线地址与CPU物理地址相同，但一般来说不同。iommus和host bridge可以在物理地址和总线地址之间进行映射。\n\n&emsp;&emsp;下图中对应了驱动程序访问总线地址的两种方案：\n\n![image-20200827101651829](https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/image-20200827101651829_ynif9a.png)\n\n1. 在设备初始化过程中，内核了解了所有的IO device及其对应的MMIO地址空间，CPU并不能通过总线地址A直接访问总线上的设备，host bridge会在MMIO（即物理地址）和总线地址之间进行mapping，因此，对于CPU，它实际上是可以通过B地址（位于MMIO地址空间）访问设备。驱动程序通过ioremap()把物理地址B映射成虚拟地址C，这时候，驱动程序就可以通过虚拟地址C来访问总线上的地址A了。\n\n2. 如果设备支持DMA，那么在驱动中可以通过kmalloc或者其他类似接口分配一个DMA buffer，并且返回了虚拟地址X，MMU将X地址映射成了物理地址Y，从而定位了DMA buffer在系统内存中的位置，驱动可以通过访问地址X来操作DMA buffer。但是设备不能通过X地址来访问DMA buffer，因为MMU对设备不可见，而且系统内存所在的系统总线和PCI总线属于不同的地址空间。在一些简单的系统中，设备可以通过DMA直接访问物理地址Y，但是在大多数的系统中，有一个IOMMU的硬件用来将DMA可访问的总线地址翻译成物理地址，也就是把上图中的地址Z翻译成Y。驱动在调用dma_map_single这样的接口函数的时候会传递一个虚拟地址X，在这个函数中会设定IOMMU的页表，将地址X映射到Z，并且将返回z这个总线地址。驱动可以把Z这个总线地址设定到设备上的DMA相关的寄存器中。这样，当设备发起对地址Z开始的DMA操作的时候，IOMMU可以进行地址映射，并将DMA操作定位到Y地址开始的DMA buffer。\n\n\n\n### 二、DMA访问限制\n\n&emsp;&emsp;如果驱动是通过伙伴系统的接口（例如__get_free_page*()）或者类似kmalloc() or kmem_cache_alloc()这样的通用内存分配的接口来分配DMA buffer，那么这些接口函数返回的虚拟地址可以直接用于DMA mapping接口API，并通过DMA操作在外设和dma buffer中交换数据。但vmalloc()接口分配的DMA buffer不能直接使用，因为其物理内存不连续。\n\n&emsp;&emsp;驱动中定义的全局变量如果编译到内核则可以用于DMA操作，因为全局变量位于内核的数据段或者bss段。在内核初始化的时候，会建立kernel image mapping，因此全局变量所占据的内存都是连续的，并且VA和PA是有固定偏移的线性关系，因此可以用于DMA操作。在定义这些全局变量的DMA buffer的时候，要小心的进行cacheline的对齐，并且要处理CPU和DMA controller之间的操作同步，以避免cache coherence问题。\n\n&emsp;&emsp;如果驱动编译成模块全局变量则不能用于DMA操作，因为驱动中全局定义的DMA buffer不在内核的线性映射区域，其虚拟地址是在模块加载的时候，通过vmalloc分配，这时候DMA buffer如果大于一个page frame，那么实际上是无法保证其底层物理地址的连续性，也无法保证VA和PA的线性关系。\n\n&emsp;&emsp;通过kmap接口返回的内存也是不可以做DMA buffer，其原理类似vmalloc。块设备I/O子系统和网络子系统在分配buffer的时候则会确保其内存是可以进行DMA操作的。\n\n&emsp;&emsp;根据DMA buffer的特性，DMA操作有两种：一种是streaming，DMA buffer是一次性的，用完就销毁。这种DMA buffer需要自己考虑cache一致性。另外一种是DMA buffer是cache coherent的，软件实现上比较简单，更重要的是这种DMA buffer往往是静态的、长时间存在的。有些设备有DMA寻址限制，不同的硬件平台有不同的配置方式，有的平台没有限制，外设可以访问系统内存的每一个Byte，有些则不可以。\n\n&emsp;&emsp;不同类型的DMA操作可能有有不同的寻址限制，也可能相同。如果相同，我们可以用第一组接口设定streaming和coherent两种DMA 操作的地址掩码。如果不同，可以使用第二组的接口进行设定：\n\n> int dma_set_mask_and_coherent(struct device *dev, u64 mask);\n\n> int dma_set_mask(struct device *dev, u64 mask);\n>\n> int dma_set_coherent_mask(struct device *dev, u64 mask);\n\n\n\n### 三、DMA映射\n\n&emsp;&emsp;DMA映射分为两种，一种是一致性DMA映射（Consistent DMA mappings），另一种则是流式DMA映射（Streaming DMA mapping）。\n\n1. 一致性DMA映射\n\n   一致性DMA映射有两种特点：\n\n   （1）持续使用该DMA buffer，初始化的时候map，系统结束时unmap。\n\n   （2）CPU和DMA controller在发起对DMA buffer的并行访问的时候不需要考虑cache操作，CPU和DMA controller都可以看到对方对DMA buffer的更新。\n\n2. 流式DMA映射\n\n   流式DMA映射是一次性的，一般是在DMA传输的时候才进行map，一旦DMA传输完成就立刻unmap。\n\n   \n\n   ![image-20200829090605153](https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/image-20200829090605153_l6swsx.png)\n\n&emsp;&emsp;可以看到，cmem驱动中所采用的就是这种一致性DMA映射。通过dma_alloc_coherent()函数接口分配并映射了一个较大（page大小或类似）的coherent DMA memory。其中dev参数就是执行该设备的struct device对象的，size参数指明了需要分配DMA buffer的大小，以字节为单位，dma参数为返回的总线地址，最后一个参数为分配内存的标志，返回的参数为此块buffer的虚拟地址，供CPU使用。\n\n&emsp;&emsp;dma_alloc_coherent()函数所申请的内存是PAGE_SIZE对齐的，以PAGE_SIZE为单位申请buffer，而且此函数可以运行在进程上下文和中断上下文。\n\n![image-20200829092028125](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200829092028125_z3sk9c.png)\n\n&emsp;&emsp;当所申请的buffer已经使用完，需要取消映射并释放此块内存，dma_free_coherent()函数直接取消内存的映射并释放内存，其中第三个参数为内存的虚拟地址，第四个参数为bus addr，与dma_alloc_coherent()函数不同的是，dma_free_coherent()函数只能运行在进程上下文而不能运行在中断上下文，在某些平台释放DMAbuffer的时候会引发TLB维护的操作，从而引起cpu core之间的通信，如果关闭了IRQ会锁死在SMP IPI的代码中。\n\n\n\n&emsp;&emsp;在所申请的大块内存中还会分成很多个pool，这里是通过堆相关的函数来进行管理的，通过HeapMem_alloc()函数从大块内存中申请一个pool，HeapMem_free()则释放一个pool，具体不继续分析。\n\n&emsp;&emsp;这里继续分析流式DMA映射的接口函数，流式DMA映射有两个版本的接口函数，一种是用来map/umap单个dma buffer，另一种用来map/umap形成scatterlist的多个dma buffer。\n\n1. 单个dma buffer映射\n\n   &emsp;&emsp;映射单个dma buffer的接口函数为dma_map_single()，传入的参数为struct device设备结构，虚拟地址，内存大小以及DMA操作的方向。\n\n   ```C\n   dma_handle = dma_map_single(dev, addr, size, direction); \n   ```\n\n   &emsp;&emsp;umap单个dma buffer使用dma_unmap_single()接口函数\n\n   ```C\n   dma_unmap_single(dev, dma_handle, size, direction);\n   ```\n\n2. 多个形成scatterlist的dma buffer\n\n   &emsp;&emsp;在scatterlist的情况下，需要映射的对象是分散的若干段dma buffer，通过dma_map_sg将scatterlist结构中的多个dma buffer映射成一个大块的、连续的bus address region。\n\n   ```C\n   int i, count = dma_map_sg(dev, sglist, nents, direction);\n   struct scatterlist *sg;\n   \n   for_each_sg(sglist, sg, count, i) { \n       hw_address[i] = sg_dma_address(sg); \n       hw_len[i] = sg_dma_len(sg); \n   }\n   ```\n\n   &emsp;&emsp;umap多个形成scatterlist的dma buffer是通过下面的接口实现的\n\n   ```C\n   dma_unmap_sg(dev, sglist, nents, direction);\n   ```\n\n   &emsp;&emsp;调用dma_unmap_sg的时候要确保DMA操作已经完成，另外，传递给dma_unmap_sg的nents参数需要等于传递给dma_map_sg的nents参数，而不是该函数返回的count。\n\n   &emsp;&emsp;执行流式DMA映射的时候需要考虑CPU和设备之间数据的同步问题，以保证设备看到的数据和CPU看到的数据是一样的。所以，在进行映射DMA映射，完成传输之后，需要调用相关的函数来进行同步\n\n   ```C\n   dma_sync_single_for_cpu(dev, dma_handle, size, direction);\n   //或者\n   dma_sync_sg_for_cpu(dev, sglist, nents, direction);\n   ```\n\n   \n\n&emsp;&emsp;由于DMA地址空间在某些CPU架构上是有限的，因此分配并map可能会产生错误，所以需要判断过程中是否产生了错误以及出错之后的处理\n\n* 检查dma_map_single和dma_map_page返回的dma address\n\n  ```C\n  dma_addr_t dma_handle;\n  \n  dma_handle = dma_map_single(dev, addr, size, direction); \n  if (dma_mapping_error(dev, dma_handle)) { \n  \tgoto map_error_handling; \n  }\n  ```\n\n* 当在mapping多个page的时候，如果中间发生了mapping error，那么需要对那些已经mapped的page进行unmap的操作\n\n  ```C\n  dma_addr_t dma_handle1; \n  \n  dma_handle1 = dma_map_single(dev, addr, size, direction); \n  if (dma_mapping_error(dev, dma_handle1)) { \n      goto map_error_handling1; \n  } \n  ```\n\n\n\n\n### 四、DMA驱动分析以及初始化配置\n\n&emsp;&emsp;上面只分析了DMA的执行流程，但是其初始化过程以及驱动的配置方案全都没有分析，接下来会继续分析剩下的部分。下图为DMA框架的大体流程：\n\n\n\n​\t\t![dma框架](https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma%E6%A1%86%E6%9E%B6_ogfn0e.svg)\n\n\n\n&emsp;&emsp;硬件环境为ARMv7架构，SOC为TI的AM5728，SOC上内置一个DMA控制器。Linux内核中对DMA的支持通过DMA ENGINE架构，具体的实现分为Provider、Consumer以及DMA Buffer三个方面。三种抽象为：\n\n&emsp;&emsp;Provider：就是指SOC上的DMA Controller\n\n&emsp;&emsp;Consumer：那些能利用DMA搬移数据的片上外设，例如MMC、USB Controller等\n\n&emsp;&emsp;DMA Buffer：DMA传输过程中需要用到的数据缓冲\n\n#### 4.1 Provider\n\n&emsp;&emsp;Provider所抽象的是SOC上的DMA控制器，它的驱动实现是与具体架构相关，以及传输过程中cache同步问题都在架构相关的文件中，涉及到的文件主要有`arch/arm/mm/dma-mapping.c`、`arch/arm/kernel/dma.c`、`arch/arm/mach-omap2/dma.c`、`arch/arm/plat-omap/dma.c`、`drivers/base/dma-mapping.c`、`drivers/base/dma-coherent.c`、`drivers/base/*`、`drivers/dma/*`等文件\n\n**arch/arm/mm/dma-mapping.c：**主要实现由上层传来的分配buffer、从CMA区域分配buffer、带cache操作的分配buffer等操作的具体实现\n\n**arch/arm/kernel/dma.c：**主要实现dma channel以及channel的各种操作，包括分配channel、释放channel等，其中还包括在procfs中创建接口\n\n**arch/arm/mach-omap2/dma.c：**为设备树文件解析出来的plat-form节点分配内存并映射到内存中，初始化其中的部分数据\n\n**arch/arm/plat-omap/dma.c：**解析出来的plat-form节点驱动和设备节点的初始化以及注册到内核，还包括中断的处理和注册\n\n**drivers/base/dma-mapping.c：**对base目录下的coherent和contiguous两个关于dma文件的抽象，相当于一个核心层\n\n**drivers/base/dma-coherent.c：**对于CMA及其他关于连续内存的操作\n\n**drivers/dma/omap-dma.c：**dma engine驱动的具体实现，根据具体硬件SOC上的DMA控制器实现相应的驱动，包括omap dma驱动、dma-crossbar驱动、virt-dma驱动等\n\n**drivers/dma/dmaengine.c：**抽象出的dmaengine架构，在上层将各种dma控制器的驱动抽象到一起，构成一层核心层\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma_seq_dduobt.png\" alt=\"dma_seq\" style=\"zoom: 25%;\" />\n\n#### 4.2 Consumer\n\n&emsp;&emsp;Consumer则是利用DMA进行传输的其他外设，他们通过dmaengine提供的统一的接口去调用更底层的DMA驱动，如上图中的最上层就是提供给Consumer使用的。Consumer作为slave端，需要遵守一定的规则去进行DMA传输：\n\n1. 分配一个DMA slave channel\n\n2. 设置slave和DMA控制器特殊的参数\n\n3. 获取一个描述DMA传输的descriptor\n\n4. 提交传输\n\n5. 发出DMA请求并等待反馈信息\n\n     \n\n#### 4.3 DMA Buffer\n\n&emsp;&emsp;DMA传输根据方向可以分为device to memory、memory to device、device to device、memory to memory四种，其中memory to memory有自己专有的一套API，以async_开头，最后，因为mem2mem的DMA传输有了比较简洁的API，没必要直接使用dma engine提供的API，最后就导致dma engine所提供的API就特指为Slave-DMA API（即其他三种DMA传输）\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/dma_tx_i7hscd.png\" alt=\"dma_tx\" style=\"zoom: 33%;\" />\n\n&emsp;&emsp;当传输的源或者目的地是memory的时候，为了提高效率，DMA controller不会每一次传输都访问memory，而是在内部开一个buffer，将数据缓存在自己buffer中：\n\n* memory是源的时候，一次从memory读出一批数据保存在自己的buffer中，然后再一点点（以时钟为节拍）传输到目的地\n\n* memory是目的地的时候，先将源的数据传输到自己的buffer中，当累计到一定数量之后，再一次性写入memory\n\n  DMA控制器内部可缓存的数据量的大小称作burst size\n\n  \n\n&emsp;&emsp; 一般的DMA控制器只能访问物理地址连续的内存，但在有些场景下，我们只有一些物理地址不连续的内存块，需要DMA把这些内存块的数据搬移到别处，这种场景称为scatter-gather。\n\n&emsp;&emsp;实现scatter-gather也有两种方式，一种是在DMA核心层提供scatter-gather的能力，用软件去模拟。这种方式需要先将内存块的数据搬移到一个连续的地址，然后让DMA从这个新地址开始搬移。另一种是DMA控制器本身支持scatter-gather，直接配置控制器即可，在软件上需要准备一个table或link-list，这里不继续深入分析。\n\n\n\n### 五代码分析\n\n&emsp;&emsp;linux内核版本4.4.19，分析的方向为自底向上，从最底层架构相关到DMA驱动最后到其他驱动调用DMA接口\n\n#### 5.1 架构相关\n\n&emsp;&emsp;在DMA相关的操作中，有关架构的操作和系统初始化是先于设备初始化的，系统初始化阶段会完成底层架构操作与base层的绑定，具体流程大致为\n\n<img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma_seq_arch_gse1vd.png\" alt=\"dma_seq_arch\" style=\"zoom: 25%;\" />\n\n&emsp;&emsp;其中，在初始化过程中就会完成DMA操作的定义，主要是完成DMA控制器与架构相关操作的实现，通过上层的调用能够执行最底层的DMA操作，当在驱动中去调用DMA的接口函数时，则直接调用与底层架构相关的函数接口，完成所需动作，具体函数调用流程为：\n\n![func_seq](https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/func_seq_xkxvvq.png)\n\n&emsp;&emsp;这个过程主要是实现最底层的DMA操作，其中最主要的就是arm_dma_ops结构体的实现和注册\n\n![image-20200921145912242](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921145912242_hhyelf.png)\n\n&emsp;&emsp;先分析arm_dma_alloc函数，它主要是获取DMA所需的buffer，这里需要先声明一些关于页表的类型和操作，所有的物理页面都是4k对齐的，因此所有表项的地址只需要高20位，而低12位则用于记录页面的状态信息和访问权限，即pgprot_t类型。\n\n![image-20200921150114291](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921150114291_nijvbe.png)\n\n&emsp;&emsp;这里主要是执行第二个函数\\_\\_dma\\_alloc，根据设备的不同，所分配的页面位置和页面类型也是不同的，如果只是普通的分配页面则执行simple\\_buffer的分配，如果是CMA内存区域则直接从所保留的内存区域分配页面，CMA的分析参考上一篇，如果是流式DMA buffer则和普通的页面分配是一样的，还有一种从pool中分配页面和remap页面，暂不分析其用途\n\n![image-20200921155220167](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921155220167_vziqns.png)\n\n&emsp;&emsp;我们这里是流式DMA，所以所分配的buffer是通过\\_\\_alloc\\_simple\\_buffer函数，传入的参数分别为设备节点、buffer大小、页面标志，\\_\\_alloc\\_simple\\_buffer则继续向下调用\\_\\_dma\\_alloc\\_buffer，其最终通过底层页分配器的接口--alloc_pages实现buffer的分配\n\n![image-20200921161715546](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921161715546_oett5j.png)\n\n&emsp;&emsp;页分配器的工作原理后续再分析，其他函数的实现也暂不继续分析\n\n#### 5.2 DMA驱动\n\n&emsp;&emsp;首先看DMA对应在设备树中的节点\n\n```C\n\t...\n\t\t\t\tsdma_xbar: dma-router@b78 {\n\t\t\t\t\tcompatible = \"ti,dra7-dma-crossbar\";\n\t\t\t\t\treg = <0xb78 0xfc>;\n\t\t\t\t\t#dma-cells = <1>;\n\t\t\t\t\tdma-requests = <205>;\n\t\t\t\t\tti,dma-safe-map = <0>;\n\t\t\t\t\tdma-masters = <&sdma>;\n\t\t\t\t};\n\n\t\t\t\tedma_xbar: dma-router@c78 {\n\t\t\t\t\tcompatible = \"ti,dra7-dma-crossbar\";\n\t\t\t\t\treg = <0xc78 0x7c>;\n\t\t\t\t\t#dma-cells = <2>;\n\t\t\t\t\tdma-requests = <204>;\n\t\t\t\t\tti,dma-safe-map = <0>;\n\t\t\t\t\tdma-masters = <&edma>;\n\t\t\t\t};\n\t...\n\t\tsdma: dma-controller@4a056000 {\n\t\t\tcompatible = \"ti,omap4430-sdma\";\n\t\t\treg = <0x4a056000 0x1000>;\n\t\t\tinterrupts = <GIC_SPI 7 IRQ_TYPE_LEVEL_HIGH>,\n\t\t\t\t     <GIC_SPI 8 IRQ_TYPE_LEVEL_HIGH>,\n\t\t\t\t     <GIC_SPI 9 IRQ_TYPE_LEVEL_HIGH>,\n\t\t\t\t     <GIC_SPI 10 IRQ_TYPE_LEVEL_HIGH>;\n\t\t\t#dma-cells = <1>;\n\t\t\tdma-channels = <32>;\n\t\t\tdma-requests = <127>;\n\t\t};\n\n\t\tedma: edma@43300000 {\n\t\t\tcompatible = \"ti,edma3-tpcc\";\n\t\t\tti,hwmods = \"tpcc\";\n\t\t\treg = <0x43300000 0x100000>;\n\t\t\treg-names = \"edma3_cc\";\n\t\t\tinterrupts = <GIC_SPI 361 IRQ_TYPE_LEVEL_HIGH>,\n\t\t\t\t     <GIC_SPI 360 IRQ_TYPE_LEVEL_HIGH>,\n\t\t\t\t     <GIC_SPI 359 IRQ_TYPE_LEVEL_HIGH>;\n\t\t\tinterrupt-names = \"edma3_ccint\", \"emda3_mperr\",\n\t\t\t\t\t  \"edma3_ccerrint\";\n\t\t\tdma-requests = <64>;\n\t\t\t#dma-cells = <2>;\n\n\t\t\tti,tptcs = <&edma_tptc0 7>, <&edma_tptc1 0>;\n\t\t};\n\t...\n        uart1: serial@4806a000 {\n\t\t\tcompatible = \"ti,dra742-uart\", \"ti,omap4-uart\";\n\t\t\treg = <0x4806a000 0x100>;\n\t\t\tinterrupts-extended = <&crossbar_mpu GIC_SPI 67 IRQ_TYPE_LEVEL_HIGH>;\n\t\t\tti,hwmods = \"uart1\";\n\t\t\tclock-frequency = <48000000>;\n\t\t\tstatus = \"disabled\";\n\t\t\tdmas = <&edma_xbar 49 0>, <&edma_xbar 50 0>;\n\t\t\tdma-names = \"tx\", \"rx\";\n\t\t};\n```\n\n&emsp;&emsp;在设备树中如果一个设备可以利用DMA传输，只需要在设备节点中加入dmas属性，并声明所使用的DMA控制器以及channel编号，例如uart1中所使用的edma 49和50号channel。\n\n&emsp;&emsp;使用DMA设备有很多，为了方便管理和使用，同时也是为了利用内核中现有的驱动框架，DMA驱动的实现也是标准的总线-设备-驱动模型，在设备驱动模型中还有隐藏在幕后的kobject、class和kset，每一个kobject对应sys文件系统里的一个目录，其parent指针将形成一个树状分层结构，class则是抽象设备的高层视图，描述的是设备的集合，不包含同类型的设备的底层实现细节，kset则是kobject的顶层容器类\n\n![device_model](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/device_model-1600679671585_rn5dts.png)\n\n&emsp;&emsp;在drivers/dma/目录中与DMA驱动相关的文件主要有dmaengine.c、edma.c、of-dma.c、omap-dma.c、ti-dma-crossbar.c、virt-dma.c，dmaengine.c是整个DMA驱动的最上层入口，在这里实现了DMA驱动模型，即上面的一些结构，还抽象了一个dma_bus总线，初始化了一个pool。omap-dma.c和edma.c分别对应SOC上面的System DMA和Enhanced DMA的驱动程序，of-dma.c实现了基于DMA的一些设备树操作，ti-dma-crossbar.c则是dma-crossbar的驱动程序，virt-dma.c对应虚拟channel。\n\n&emsp;&emsp;首先是dmaengine.c，主要是去注册创建一个pool，这个pool是通过slab分配器实现的\n\n```C\nstatic int __init dmaengine_init_unmap_pool(void)\n{\n\tint i;\n\n\tfor (i = 0; i < ARRAY_SIZE(unmap_pool); i++) {\n\t\tstruct dmaengine_unmap_pool *p = &unmap_pool[i];\n\t\tsize_t size;\n\n\t\tsize = sizeof(struct dmaengine_unmap_data) +\n\t\t       sizeof(dma_addr_t) * p->size;\n\n        /* slab分配器接口，以后分析 */\n\t\tp->cache = kmem_cache_create(p->name, size, 0,\n\t\t\t\t\t     SLAB_HWCACHE_ALIGN, NULL);\n\t\tif (!p->cache)\n\t\t\tbreak;\n        /* slab分配器接口，以后分析 */\n\t\tp->pool = mempool_create_slab_pool(1, p->cache);\n\t\tif (!p->pool)\n\t\t\tbreak;\n\t}\n\n\tif (i == ARRAY_SIZE(unmap_pool))\n\t\treturn 0;\n\n\tdmaengine_destroy_unmap_pool();\n\treturn -ENOMEM;\n}\n```\n\n&emsp;&emsp;然后是omap-dma.c，这里是dma驱动的具体实现，其中主要是probe函数，当在dma-bus总线上匹配到dma设备就会执行probe函数\n\n```C\nstatic int omap_dma_probe(struct platform_device *pdev)\n{\n\tstruct omap_dmadev *od;\n\tstruct resource *res;\n\tint rc, i, irq;\n\n    /* 为omap_dmadev结构体申请内存 */\n\tod = devm_kzalloc(&pdev->dev, sizeof(*od), GFP_KERNEL);\n\tif (!od)\n\t\treturn -ENOMEM;\n\n    /* 获取内存资源 */\n\tres = platform_get_resource(pdev, IORESOURCE_MEM, 0);\n\tod->base = devm_ioremap_resource(&pdev->dev, res);\n\tif (IS_ERR(od->base))\n\t\treturn PTR_ERR(od->base);\n\n\tod->plat = omap_get_plat_info();\n\tif (!od->plat)\n\t\treturn -EPROBE_DEFER;\n\t/* 这里都是配置od对象 */\n\tod->reg_map = od->plat->reg_map;\n\tdma_cap_set(DMA_SLAVE, od->ddev.cap_mask);\n\tdma_cap_set(DMA_CYCLIC, od->ddev.cap_mask);\n\tdma_cap_set(DMA_MEMCPY, od->ddev.cap_mask);\n\tod->ddev.device_alloc_chan_resources = omap_dma_alloc_chan_resources;\n\tod->ddev.device_free_chan_resources = omap_dma_free_chan_resources;\n\tod->ddev.device_tx_status = omap_dma_tx_status;\n\tod->ddev.device_issue_pending = omap_dma_issue_pending;\n\tod->ddev.device_prep_slave_sg = omap_dma_prep_slave_sg;\n\tod->ddev.device_prep_dma_cyclic = omap_dma_prep_dma_cyclic;\n\tod->ddev.device_prep_dma_memcpy = omap_dma_prep_dma_memcpy;\n\tod->ddev.device_config = omap_dma_slave_config;\n\tod->ddev.device_pause = omap_dma_pause;\n\tod->ddev.device_resume = omap_dma_resume;\n\tod->ddev.device_terminate_all = omap_dma_terminate_all;\n\tod->ddev.device_synchronize = omap_dma_synchronize;\n\tod->ddev.src_addr_widths = OMAP_DMA_BUSWIDTHS;\n\tod->ddev.dst_addr_widths = OMAP_DMA_BUSWIDTHS;\n\tod->ddev.directions = BIT(DMA_DEV_TO_MEM) | BIT(DMA_MEM_TO_DEV);\n\tod->ddev.residue_granularity = DMA_RESIDUE_GRANULARITY_BURST;\n\tod->ddev.dev = &pdev->dev;\n\tINIT_LIST_HEAD(&od->ddev.channels);\n\tspin_lock_init(&od->lock);\n\tspin_lock_init(&od->irq_lock);\n\n\tod->dma_requests = OMAP_SDMA_REQUESTS;\n\tif (pdev->dev.of_node && of_property_read_u32(pdev->dev.of_node,\n\t\t\t\t\t\t      \"dma-requests\",\n\t\t\t\t\t\t      &od->dma_requests)) {\n\t\tdev_info(&pdev->dev,\n\t\t\t \"Missing dma-requests property, using %u.\\n\",\n\t\t\t OMAP_SDMA_REQUESTS);\n\t}\n\n\tfor (i = 0; i < OMAP_SDMA_CHANNELS; i++) {\n\t\trc = omap_dma_chan_init(od);\n\t\tif (rc) {\n\t\t\tomap_dma_free(od);\n\t\t\treturn rc;\n\t\t}\n\t}\n\n    /* 从设备树中获取中断 */\n\tirq = platform_get_irq(pdev, 1);\n\tif (irq <= 0) {\n\t\tdev_info(&pdev->dev, \"failed to get L1 IRQ: %d\\n\", irq);\n\t\tod->legacy = true;\n\t} else {\n\t\t/* Disable all interrupts */\n\t\tod->irq_enable_mask = 0;\n\t\tomap_dma_glbl_write(od, IRQENABLE_L1, 0);\n\n\t\trc = devm_request_irq(&pdev->dev, irq, omap_dma_irq,\n\t\t\t\t      IRQF_SHARED, \"omap-dma-engine\", od);\n\t\tif (rc)\n\t\t\treturn rc;\n\t}\n\n\tod->ddev.filter.map = od->plat->slave_map;\n\tod->ddev.filter.mapcnt = od->plat->slavecnt;\n\tod->ddev.filter.fn = omap_dma_filter_fn;\n\n    /* 注册OMAP-DMA设备 */\n\trc = dma_async_device_register(&od->ddev);\n\n\tplatform_set_drvdata(pdev, od);\n\n\tif (pdev->dev.of_node) {\n\t\tomap_dma_info.dma_cap = od->ddev.cap_mask;\n\n\t\t/* Device-tree DMA controller registration */\n\t\trc = of_dma_controller_register(pdev->dev.of_node,\n\t\t\t\tof_dma_simple_xlate, &omap_dma_info);\n\t\tif (rc) {\n\t\t\tpr_warn(\"OMAP-DMA: failed to register DMA controller\\n\");\n\t\t\tdma_async_device_unregister(&od->ddev);\n\t\t\tomap_dma_free(od);\n\t\t}\n\t}\n\n\tdev_info(&pdev->dev, \"OMAP DMA engine driver\\n\");\n\treturn rc;\n}\n```\n\n&emsp;&emsp;edma驱动中涉及到edma-tptc和edma的注册，主体还是edma的probe函数\n\n```C\nstatic int edma_probe(struct platform_device *pdev)\n{\n\tstruct edma_soc_info\t*info = pdev->dev.platform_data;\n\ts8\t\t\t(*queue_priority_mapping)[2];\n\tint\t\t\ti, off, ln;\n\tconst s16\t\t(*rsv_slots)[2];\n\tconst s16\t\t(*xbar_chans)[2];\n\tint\t\t\tirq;\n\tchar\t\t\t*irq_name;\n\tstruct resource\t\t*mem;\n\tstruct device_node\t*node = pdev->dev.of_node;\n\tstruct device\t\t*dev = &pdev->dev;\n\tstruct edma_cc\t\t*ecc;\n\tbool\t\t\tlegacy_mode = true;\n\tint ret;\n\n\tif (node) {\n\t\tconst struct of_device_id *match;\n\n\t\tmatch = of_match_node(edma_of_ids, node);\n\t\tif (match && (u32)match->data == EDMA_BINDING_TPCC)\n\t\t\tlegacy_mode = false;\n\n\t\tinfo = edma_setup_info_from_dt(dev, legacy_mode);\n\t\tif (IS_ERR(info)) {\n\t\t\tdev_err(dev, \"failed to get DT data\\n\");\n\t\t\treturn PTR_ERR(info);\n\t\t}\n\t}\n\n\tpm_runtime_enable(dev);\n\tret = pm_runtime_get_sync(dev);\n\n\tret = dma_set_mask_and_coherent(dev, DMA_BIT_MASK(32));\n\n\tecc = devm_kzalloc(dev, sizeof(*ecc), GFP_KERNEL);\n\n\tecc->dev = dev;\n\tecc->id = pdev->id;\n\tecc->legacy_mode = legacy_mode;\n\t/* When booting with DT the pdev->id is -1 */\n\tif (ecc->id < 0)\n\t\tecc->id = 0;\n\n    /* 同样获取设备的内存资源 */\n\tmem = platform_get_resource_byname(pdev, IORESOURCE_MEM, \"edma3_cc\");\n\n\tecc->base = devm_ioremap_resource(dev, mem);\n\tif (IS_ERR(ecc->base))\n\t\treturn PTR_ERR(ecc->base);\n\n\tplatform_set_drvdata(pdev, ecc);\n\n\t/* 从硬件IP中获取edma的配置参数 */\n\tret = edma_setup_from_hw(dev, info, ecc);\n\n\t/* 基于硬件IP参数申请内存 */\n\tecc->slave_chans = devm_kcalloc(dev, ecc->num_channels,\n\t\t\t\t\tsizeof(*ecc->slave_chans), GFP_KERNEL);\n\n\tecc->slot_inuse = devm_kcalloc(dev, BITS_TO_LONGS(ecc->num_slots),\n\t\t\t\t       sizeof(unsigned long), GFP_KERNEL);\n\n\tecc->default_queue = info->default_queue;\n\n\tfor (i = 0; i < ecc->num_slots; i++)\n\t\tedma_write_slot(ecc, i, &dummy_paramset);\n\n\tif (info->rsv) {\n\t\t/* Set the reserved slots in inuse list */\n\t\trsv_slots = info->rsv->rsv_slots;\n\t\tif (rsv_slots) {\n\t\t\tfor (i = 0; rsv_slots[i][0] != -1; i++) {\n\t\t\t\toff = rsv_slots[i][0];\n\t\t\t\tln = rsv_slots[i][1];\n\t\t\t\tset_bits(off, ln, ecc->slot_inuse);\n\t\t\t}\n\t\t}\n\t}\n\n\t/* 清除xbar在unused链表中的通道映射 */\n\txbar_chans = info->xbar_chans;\n\tif (xbar_chans) {\n\t\tfor (i = 0; xbar_chans[i][1] != -1; i++) {\n\t\t\toff = xbar_chans[i][1];\n\t\t}\n\t}\n\n    /* 获取中断 */\n\tirq = platform_get_irq_byname(pdev, \"edma3_ccint\");\n\tif (irq < 0 && node)\n\t\tirq = irq_of_parse_and_map(node, 0);\n\n\tirq = platform_get_irq_byname(pdev, \"edma3_ccerrint\");\n\tif (irq < 0 && node)\n\t\tirq = irq_of_parse_and_map(node, 2);\n\n\tif (irq >= 0) {\n\t\tirq_name = devm_kasprintf(dev, GFP_KERNEL, \"%s_ccerrint\",\n\t\t\t\t\t  dev_name(dev));\n\t\tret = devm_request_irq(dev, irq, dma_ccerr_handler, 0, irq_name,\n\t\t\t\t       ecc);\n\t\tif (ret) {\n\t\t\tdev_err(dev, \"CCERRINT (%d) failed --> %d\\n\", irq, ret);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\tecc->dummy_slot = edma_alloc_slot(ecc, EDMA_SLOT_ANY);\n\tif (ecc->dummy_slot < 0) {\n\t\tdev_err(dev, \"Can't allocate PaRAM dummy slot\\n\");\n\t\treturn ecc->dummy_slot;\n\t}\n\n\tqueue_priority_mapping = info->queue_priority_mapping;\n\n\t/* 事件队列优先映射 */\n\tfor (i = 0; queue_priority_mapping[i][0] != -1; i++)\n\t\tedma_assign_priority_to_queue(ecc, queue_priority_mapping[i][0],\n\t\t\t\t\t      queue_priority_mapping[i][1]);\n\n\tfor (i = 0; i < ecc->num_region; i++) {\n\t\tedma_write_array2(ecc, EDMA_DRAE, i, 0, 0x0);\n\t\tedma_write_array2(ecc, EDMA_DRAE, i, 1, 0x0);\n\t\tedma_write_array(ecc, EDMA_QRAE, i, 0x0);\n\t}\n\tecc->info = info;\n\n\t/* 初始化dma设备和channels */\n\tedma_dma_init(ecc, legacy_mode);\n\n\tfor (i = 0; i < ecc->num_channels; i++) {\n\t\t/* 分配所有的channels到默认的队列 */\n\t\tedma_assign_channel_eventq(&ecc->slave_chans[i],\n\t\t\t\t\t   info->default_queue);\n\t\t/* 设置虚拟slot的入口位置 */\n\t\tedma_set_chmap(&ecc->slave_chans[i], ecc->dummy_slot);\n\t}\n\n\tecc->dma_slave.filter.map = info->slave_map;\n\tecc->dma_slave.filter.mapcnt = info->slavecnt;\n\tecc->dma_slave.filter.fn = edma_filter_fn;\n\n\tret = dma_async_device_register(&ecc->dma_slave);\n\tif (ret) {\n\t\tdev_err(dev, \"slave ddev registration failed (%d)\\n\", ret);\n\t\tgoto err_reg1;\n\t}\n\n\tif (ecc->dma_memcpy) {\n\t\tret = dma_async_device_register(ecc->dma_memcpy);\n\t\tif (ret) {\n\t\t\tdev_err(dev, \"memcpy ddev registration failed (%d)\\n\",\n\t\t\t\tret);\n\t\t\tdma_async_device_unregister(&ecc->dma_slave);\n\t\t\tgoto err_reg1;\n\t\t}\n\t}\n\n\tif (node)\n\t\tof_dma_controller_register(node, of_edma_xlate, ecc);\n\n\tdev_info(dev, \"TI EDMA DMA engine driver\\n\");\n\n\treturn 0;\n\nerr_reg1:\n\tedma_free_slot(ecc, ecc->dummy_slot);\n\treturn ret;\n}\n```\n\n&emsp;&emsp;然后是ti-dma-crossbar.c，负责dma事件映射\n\n```C\nstatic int ti_dra7_xbar_probe(struct platform_device *pdev)\n{\n\tstruct device_node *node = pdev->dev.of_node;\n\tconst struct of_device_id *match;\n\tstruct device_node *dma_node;\n\tstruct ti_dra7_xbar_data *xbar;\n\tstruct property *prop;\n\tstruct resource *res;\n\tu32 safe_val;\n\tsize_t sz;\n\tvoid __iomem *iomem;\n\tint i, ret;\n\n\tif (!node)\n\t\treturn -ENODEV;\n\n\txbar = devm_kzalloc(&pdev->dev, sizeof(*xbar), GFP_KERNEL);\n\tif (!xbar)\n\t\treturn -ENOMEM;\n\n\tdma_node = of_parse_phandle(node, \"dma-masters\", 0);\n\tif (!dma_node) {\n\t\tdev_err(&pdev->dev, \"Can't get DMA master node\\n\");\n\t\treturn -ENODEV;\n\t}\n\n\tmatch = of_match_node(ti_dra7_master_match, dma_node);\n\tif (!match) {\n\t\tdev_err(&pdev->dev, \"DMA master is not supported\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tif (of_property_read_u32(dma_node, \"dma-requests\",\n\t\t\t\t &xbar->dma_requests)) {\n\t\tdev_info(&pdev->dev,\n\t\t\t \"Missing XBAR output information, using %u.\\n\",\n\t\t\t TI_DRA7_XBAR_OUTPUTS);\n\t\txbar->dma_requests = TI_DRA7_XBAR_OUTPUTS;\n\t}\n\tof_node_put(dma_node);\n\n\txbar->dma_inuse = devm_kcalloc(&pdev->dev,\n\t\t\t\t       BITS_TO_LONGS(xbar->dma_requests),\n\t\t\t\t       sizeof(unsigned long), GFP_KERNEL);\n\tif (!xbar->dma_inuse)\n\t\treturn -ENOMEM;\n\n\tif (of_property_read_u32(node, \"dma-requests\", &xbar->xbar_requests)) {\n\t\tdev_info(&pdev->dev,\n\t\t\t \"Missing XBAR input information, using %u.\\n\",\n\t\t\t TI_DRA7_XBAR_INPUTS);\n\t\txbar->xbar_requests = TI_DRA7_XBAR_INPUTS;\n\t}\n\n\tif (!of_property_read_u32(node, \"ti,dma-safe-map\", &safe_val))\n\t\txbar->safe_val = (u16)safe_val;\n\n\n\tprop = of_find_property(node, \"ti,reserved-dma-request-ranges\", &sz);\n\tif (prop) {\n\t\tconst char pname[] = \"ti,reserved-dma-request-ranges\";\n\t\tu32 (*rsv_events)[2];\n\t\tsize_t nelm = sz / sizeof(*rsv_events);\n\t\tint i;\n\n\t\tif (!nelm)\n\t\t\treturn -EINVAL;\n\n\t\trsv_events = kcalloc(nelm, sizeof(*rsv_events), GFP_KERNEL);\n\t\tif (!rsv_events)\n\t\t\treturn -ENOMEM;\n\n\t\tret = of_property_read_u32_array(node, pname, (u32 *)rsv_events,\n\t\t\t\t\t\t nelm * 2);\n\t\tif (ret)\n\t\t\treturn ret;\n\n\t\tfor (i = 0; i < nelm; i++) {\n\t\t\tti_dra7_xbar_reserve(rsv_events[i][0], rsv_events[i][1],\n\t\t\t\t\t     xbar->dma_inuse);\n\t\t}\n\t\tkfree(rsv_events);\n\t}\n\n\tres = platform_get_resource(pdev, IORESOURCE_MEM, 0);\n\tiomem = devm_ioremap_resource(&pdev->dev, res);\n\tif (IS_ERR(iomem))\n\t\treturn PTR_ERR(iomem);\n\n\txbar->iomem = iomem;\n\n\txbar->dmarouter.dev = &pdev->dev;\n\txbar->dmarouter.route_free = ti_dra7_xbar_free;\n\txbar->dma_offset = (u32)match->data;\n\n\tmutex_init(&xbar->mutex);\n\tplatform_set_drvdata(pdev, xbar);\n\n\t/* Reset the crossbar */\n\tfor (i = 0; i < xbar->dma_requests; i++) {\n\t\tif (!test_bit(i, xbar->dma_inuse))\n\t\t\tti_dra7_xbar_write(xbar->iomem, i, xbar->safe_val);\n\t}\n\n\tret = of_dma_router_register(node, ti_dra7_xbar_route_allocate,\n\t\t\t\t     &xbar->dmarouter);\n\tif (ret) {\n\t\t/* Restore the defaults for the crossbar */\n\t\tfor (i = 0; i < xbar->dma_requests; i++) {\n\t\t\tif (!test_bit(i, xbar->dma_inuse))\n\t\t\t\tti_dra7_xbar_write(xbar->iomem, i, i);\n\t\t}\n\t}\n\n\treturn ret;\n}\n```\n\n&emsp;&emsp;最后是虚拟channel，在virt-dma.c文件中实现\n\n```C\nvoid vchan_init(struct virt_dma_chan *vc, struct dma_device *dmadev)\n{\n\tdma_cookie_init(&vc->chan);\n\n\tspin_lock_init(&vc->lock);\n\tINIT_LIST_HEAD(&vc->desc_allocated);\n\tINIT_LIST_HEAD(&vc->desc_submitted);\n\tINIT_LIST_HEAD(&vc->desc_issued);\n\tINIT_LIST_HEAD(&vc->desc_completed);\n\n\ttasklet_init(&vc->task, vchan_complete, (unsigned long)vc);\n\n\tvc->chan.device = dmadev;\n\tlist_add_tail(&vc->chan.device_node, &dmadev->channels);\n}\n```\n\n#### 5.3 具体实例\n\n&emsp;&emsp;这里给出一个实际驱动中调用dma传输的一个例子，在cmem驱动中通过一致性dma接口分配了buffer，调用v7\\_dma\\_map\\_area函数实现cache的同步和dma传输\n\n![image-20200923091128578](https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200923091128578_w4xg1t.png)\n\n","slug":"dma","published":1,"updated":"2021-03-04T16:42:03.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8ya0008q5dicfibfo4j","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&emsp;&emsp;Linux中关于dma的操作非常常见，一些dma驱动独立到drivers/dma/目录下，架构相关的dma操作放在arch/arm/mm/目录下，还有在drivers/base/目录下也有关于dma的驱动，以及drivers/dma-buf/目录下所形成的dma-buf架构，因此有必要梳理一下dma的框架</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;DMA（Direct Memory Access）用于在设备和内存之间直接进行数据传输而不经过CPU的一种方式，主要通过DMA控制器来实现，而DMA控制器也主要分为两种，一种是嵌入到SOC上的外部DMA控制器，另一种是设备自带的DMA控制器。</p>\n<p>&emsp;&emsp;首先是SOC上的DMA控制器，这个控制器主要是为了解决那些自身不带DMA控制器的设备也能进行DMA传输，其他的设备通过向这个总DMA控制器注册来实现DMA传输。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/DMA_ut94kz.png\" alt=\"DMA\"></p>\n<p>&emsp;&emsp;而对于那些自身携带DMA控制器的设备来说，他们可以独自实现DMA传输。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/DMA_device_oxv55a.png\" alt=\"DMA_device\" style=\"zoom: 25%;\"></p>\n<p>&emsp;&emsp;其中，Descriptor描述DMA传输过程中的各种属性。DMA传输使用的是物理地址，而且所处理的buffer必须是物理上连续的。且CPU访问内存都是通过cache，但DMA不能访问cache，所以需要注意cache一致性，ARM架构通过clean、invalid操作来完成。在进行内存到设备传输时，要确保已经将cache中的内容写到内存上；在进行设备到内存传输时，从内存上读取数据之前需要确保将cache中对应的数据无效。</p>\n<h3 id=\"一、总体分析\"><a href=\"#一、总体分析\" class=\"headerlink\" title=\"一、总体分析\"></a>一、总体分析</h3><p>&emsp;&emsp;内核通常使用的地址是虚拟地址。我们调用kmalloc()、vmalloc()或者类似的接口返回的地址都是虚拟地址，保存在”void *”的变量中。虚拟内存系统（TLB、页表等）将虚拟地址（程序角度）翻译成物理地址（CPU角度），物理地址保存在“phys_addr_t”或“resource_size_t”的变量中。对于一个硬件设备上的寄存器等设备资源，内核是按照物理地址来管理的。驱动并不能直接使用这些物理地址，必须首先通过ioremap()接口将这些物理地址映射到内核虚拟地址空间上去。</p>\n<p>&emsp;&emsp;I/O设备使用第三种地址：“总线地址”。如果设备在MMIO地址空间（MMIO是物理地址空间的子集）中有若干的寄存器，或者该设备足够的智能，可以通过DMA执行读写系统内存的操作，这些情况下，设备使用的地址就是总线地址。在某些系统中，总线地址与CPU物理地址相同，但一般来说不同。iommus和host bridge可以在物理地址和总线地址之间进行映射。</p>\n<p>&emsp;&emsp;下图中对应了驱动程序访问总线地址的两种方案：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/image-20200827101651829_ynif9a.png\" alt=\"image-20200827101651829\"></p>\n<ol>\n<li><p>在设备初始化过程中，内核了解了所有的IO device及其对应的MMIO地址空间，CPU并不能通过总线地址A直接访问总线上的设备，host bridge会在MMIO（即物理地址）和总线地址之间进行mapping，因此，对于CPU，它实际上是可以通过B地址（位于MMIO地址空间）访问设备。驱动程序通过ioremap()把物理地址B映射成虚拟地址C，这时候，驱动程序就可以通过虚拟地址C来访问总线上的地址A了。</p>\n</li>\n<li><p>如果设备支持DMA，那么在驱动中可以通过kmalloc或者其他类似接口分配一个DMA buffer，并且返回了虚拟地址X，MMU将X地址映射成了物理地址Y，从而定位了DMA buffer在系统内存中的位置，驱动可以通过访问地址X来操作DMA buffer。但是设备不能通过X地址来访问DMA buffer，因为MMU对设备不可见，而且系统内存所在的系统总线和PCI总线属于不同的地址空间。在一些简单的系统中，设备可以通过DMA直接访问物理地址Y，但是在大多数的系统中，有一个IOMMU的硬件用来将DMA可访问的总线地址翻译成物理地址，也就是把上图中的地址Z翻译成Y。驱动在调用dma_map_single这样的接口函数的时候会传递一个虚拟地址X，在这个函数中会设定IOMMU的页表，将地址X映射到Z，并且将返回z这个总线地址。驱动可以把Z这个总线地址设定到设备上的DMA相关的寄存器中。这样，当设备发起对地址Z开始的DMA操作的时候，IOMMU可以进行地址映射，并将DMA操作定位到Y地址开始的DMA buffer。</p>\n</li>\n</ol>\n<h3 id=\"二、DMA访问限制\"><a href=\"#二、DMA访问限制\" class=\"headerlink\" title=\"二、DMA访问限制\"></a>二、DMA访问限制</h3><p>&emsp;&emsp;如果驱动是通过伙伴系统的接口（例如__get_free_page*()）或者类似kmalloc() or kmem_cache_alloc()这样的通用内存分配的接口来分配DMA buffer，那么这些接口函数返回的虚拟地址可以直接用于DMA mapping接口API，并通过DMA操作在外设和dma buffer中交换数据。但vmalloc()接口分配的DMA buffer不能直接使用，因为其物理内存不连续。</p>\n<p>&emsp;&emsp;驱动中定义的全局变量如果编译到内核则可以用于DMA操作，因为全局变量位于内核的数据段或者bss段。在内核初始化的时候，会建立kernel image mapping，因此全局变量所占据的内存都是连续的，并且VA和PA是有固定偏移的线性关系，因此可以用于DMA操作。在定义这些全局变量的DMA buffer的时候，要小心的进行cacheline的对齐，并且要处理CPU和DMA controller之间的操作同步，以避免cache coherence问题。</p>\n<p>&emsp;&emsp;如果驱动编译成模块全局变量则不能用于DMA操作，因为驱动中全局定义的DMA buffer不在内核的线性映射区域，其虚拟地址是在模块加载的时候，通过vmalloc分配，这时候DMA buffer如果大于一个page frame，那么实际上是无法保证其底层物理地址的连续性，也无法保证VA和PA的线性关系。</p>\n<p>&emsp;&emsp;通过kmap接口返回的内存也是不可以做DMA buffer，其原理类似vmalloc。块设备I/O子系统和网络子系统在分配buffer的时候则会确保其内存是可以进行DMA操作的。</p>\n<p>&emsp;&emsp;根据DMA buffer的特性，DMA操作有两种：一种是streaming，DMA buffer是一次性的，用完就销毁。这种DMA buffer需要自己考虑cache一致性。另外一种是DMA buffer是cache coherent的，软件实现上比较简单，更重要的是这种DMA buffer往往是静态的、长时间存在的。有些设备有DMA寻址限制，不同的硬件平台有不同的配置方式，有的平台没有限制，外设可以访问系统内存的每一个Byte，有些则不可以。</p>\n<p>&emsp;&emsp;不同类型的DMA操作可能有有不同的寻址限制，也可能相同。如果相同，我们可以用第一组接口设定streaming和coherent两种DMA 操作的地址掩码。如果不同，可以使用第二组的接口进行设定：</p>\n<blockquote>\n<p>int dma_set_mask_and_coherent(struct device *dev, u64 mask);</p>\n</blockquote>\n<blockquote>\n<p>int dma_set_mask(struct device *dev, u64 mask);</p>\n<p>int dma_set_coherent_mask(struct device *dev, u64 mask);</p>\n</blockquote>\n<h3 id=\"三、DMA映射\"><a href=\"#三、DMA映射\" class=\"headerlink\" title=\"三、DMA映射\"></a>三、DMA映射</h3><p>&emsp;&emsp;DMA映射分为两种，一种是一致性DMA映射（Consistent DMA mappings），另一种则是流式DMA映射（Streaming DMA mapping）。</p>\n<ol>\n<li><p>一致性DMA映射</p>\n<p>一致性DMA映射有两种特点：</p>\n<p>（1）持续使用该DMA buffer，初始化的时候map，系统结束时unmap。</p>\n<p>（2）CPU和DMA controller在发起对DMA buffer的并行访问的时候不需要考虑cache操作，CPU和DMA controller都可以看到对方对DMA buffer的更新。</p>\n</li>\n<li><p>流式DMA映射</p>\n<p>流式DMA映射是一次性的，一般是在DMA传输的时候才进行map，一旦DMA传输完成就立刻unmap。</p>\n</li>\n</ol>\n<p>   <img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/image-20200829090605153_l6swsx.png\" alt=\"image-20200829090605153\"></p>\n<p>&emsp;&emsp;可以看到，cmem驱动中所采用的就是这种一致性DMA映射。通过dma_alloc_coherent()函数接口分配并映射了一个较大（page大小或类似）的coherent DMA memory。其中dev参数就是执行该设备的struct device对象的，size参数指明了需要分配DMA buffer的大小，以字节为单位，dma参数为返回的总线地址，最后一个参数为分配内存的标志，返回的参数为此块buffer的虚拟地址，供CPU使用。</p>\n<p>&emsp;&emsp;dma_alloc_coherent()函数所申请的内存是PAGE_SIZE对齐的，以PAGE_SIZE为单位申请buffer，而且此函数可以运行在进程上下文和中断上下文。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200829092028125_z3sk9c.png\" alt=\"image-20200829092028125\"></p>\n<p>&emsp;&emsp;当所申请的buffer已经使用完，需要取消映射并释放此块内存，dma_free_coherent()函数直接取消内存的映射并释放内存，其中第三个参数为内存的虚拟地址，第四个参数为bus addr，与dma_alloc_coherent()函数不同的是，dma_free_coherent()函数只能运行在进程上下文而不能运行在中断上下文，在某些平台释放DMAbuffer的时候会引发TLB维护的操作，从而引起cpu core之间的通信，如果关闭了IRQ会锁死在SMP IPI的代码中。</p>\n<p>&emsp;&emsp;在所申请的大块内存中还会分成很多个pool，这里是通过堆相关的函数来进行管理的，通过HeapMem_alloc()函数从大块内存中申请一个pool，HeapMem_free()则释放一个pool，具体不继续分析。</p>\n<p>&emsp;&emsp;这里继续分析流式DMA映射的接口函数，流式DMA映射有两个版本的接口函数，一种是用来map/umap单个dma buffer，另一种用来map/umap形成scatterlist的多个dma buffer。</p>\n<ol>\n<li><p>单个dma buffer映射</p>\n<p>&emsp;&emsp;映射单个dma buffer的接口函数为dma_map_single()，传入的参数为struct device设备结构，虚拟地址，内存大小以及DMA操作的方向。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dma_handle = dma_map_single(dev, addr, size, direction);</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;umap单个dma buffer使用dma_unmap_single()接口函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dma_unmap_single(dev, dma_handle, size, direction);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多个形成scatterlist的dma buffer</p>\n<p>&emsp;&emsp;在scatterlist的情况下，需要映射的对象是分散的若干段dma buffer，通过dma_map_sg将scatterlist结构中的多个dma buffer映射成一个大块的、连续的bus address region。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i, count = dma_map_sg(dev, sglist, nents, direction);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">scatterlist</span> *<span class=\"title\">sg</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">for_each_sg(sglist, sg, count, i) &#123; </span><br><span class=\"line\">    hw_address[i] = sg_dma_address(sg); </span><br><span class=\"line\">    hw_len[i] = sg_dma_len(sg); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;umap多个形成scatterlist的dma buffer是通过下面的接口实现的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dma_unmap_sg(dev, sglist, nents, direction);</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;调用dma_unmap_sg的时候要确保DMA操作已经完成，另外，传递给dma_unmap_sg的nents参数需要等于传递给dma_map_sg的nents参数，而不是该函数返回的count。</p>\n<p>&emsp;&emsp;执行流式DMA映射的时候需要考虑CPU和设备之间数据的同步问题，以保证设备看到的数据和CPU看到的数据是一样的。所以，在进行映射DMA映射，完成传输之后，需要调用相关的函数来进行同步</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dma_sync_single_for_cpu(dev, dma_handle, size, direction);</span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\">dma_sync_sg_for_cpu(dev, sglist, nents, direction);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>&emsp;&emsp;由于DMA地址空间在某些CPU架构上是有限的，因此分配并map可能会产生错误，所以需要判断过程中是否产生了错误以及出错之后的处理</p>\n<ul>\n<li><p>检查dma_map_single和dma_map_page返回的dma address</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dma_addr_t</span> dma_handle;</span><br><span class=\"line\"></span><br><span class=\"line\">dma_handle = dma_map_single(dev, addr, size, direction); </span><br><span class=\"line\"><span class=\"keyword\">if</span> (dma_mapping_error(dev, dma_handle)) &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> map_error_handling; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当在mapping多个page的时候，如果中间发生了mapping error，那么需要对那些已经mapped的page进行unmap的操作</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dma_addr_t</span> dma_handle1; </span><br><span class=\"line\"></span><br><span class=\"line\">dma_handle1 = dma_map_single(dev, addr, size, direction); </span><br><span class=\"line\"><span class=\"keyword\">if</span> (dma_mapping_error(dev, dma_handle1)) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">goto</span> map_error_handling1; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"四、DMA驱动分析以及初始化配置\"><a href=\"#四、DMA驱动分析以及初始化配置\" class=\"headerlink\" title=\"四、DMA驱动分析以及初始化配置\"></a>四、DMA驱动分析以及初始化配置</h3><p>&emsp;&emsp;上面只分析了DMA的执行流程，但是其初始化过程以及驱动的配置方案全都没有分析，接下来会继续分析剩下的部分。下图为DMA框架的大体流程：</p>\n<p>​        <img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma%E6%A1%86%E6%9E%B6_ogfn0e.svg\" alt=\"dma框架\"></p>\n<p>&emsp;&emsp;硬件环境为ARMv7架构，SOC为TI的AM5728，SOC上内置一个DMA控制器。Linux内核中对DMA的支持通过DMA ENGINE架构，具体的实现分为Provider、Consumer以及DMA Buffer三个方面。三种抽象为：</p>\n<p>&emsp;&emsp;Provider：就是指SOC上的DMA Controller</p>\n<p>&emsp;&emsp;Consumer：那些能利用DMA搬移数据的片上外设，例如MMC、USB Controller等</p>\n<p>&emsp;&emsp;DMA Buffer：DMA传输过程中需要用到的数据缓冲</p>\n<h4 id=\"4-1-Provider\"><a href=\"#4-1-Provider\" class=\"headerlink\" title=\"4.1 Provider\"></a>4.1 Provider</h4><p>&emsp;&emsp;Provider所抽象的是SOC上的DMA控制器，它的驱动实现是与具体架构相关，以及传输过程中cache同步问题都在架构相关的文件中，涉及到的文件主要有<code>arch/arm/mm/dma-mapping.c</code>、<code>arch/arm/kernel/dma.c</code>、<code>arch/arm/mach-omap2/dma.c</code>、<code>arch/arm/plat-omap/dma.c</code>、<code>drivers/base/dma-mapping.c</code>、<code>drivers/base/dma-coherent.c</code>、<code>drivers/base/*</code>、<code>drivers/dma/*</code>等文件</p>\n<p><strong>arch/arm/mm/dma-mapping.c：</strong>主要实现由上层传来的分配buffer、从CMA区域分配buffer、带cache操作的分配buffer等操作的具体实现</p>\n<p><strong>arch/arm/kernel/dma.c：</strong>主要实现dma channel以及channel的各种操作，包括分配channel、释放channel等，其中还包括在procfs中创建接口</p>\n<p><strong>arch/arm/mach-omap2/dma.c：</strong>为设备树文件解析出来的plat-form节点分配内存并映射到内存中，初始化其中的部分数据</p>\n<p><strong>arch/arm/plat-omap/dma.c：</strong>解析出来的plat-form节点驱动和设备节点的初始化以及注册到内核，还包括中断的处理和注册</p>\n<p><strong>drivers/base/dma-mapping.c：</strong>对base目录下的coherent和contiguous两个关于dma文件的抽象，相当于一个核心层</p>\n<p><strong>drivers/base/dma-coherent.c：</strong>对于CMA及其他关于连续内存的操作</p>\n<p><strong>drivers/dma/omap-dma.c：</strong>dma engine驱动的具体实现，根据具体硬件SOC上的DMA控制器实现相应的驱动，包括omap dma驱动、dma-crossbar驱动、virt-dma驱动等</p>\n<p><strong>drivers/dma/dmaengine.c：</strong>抽象出的dmaengine架构，在上层将各种dma控制器的驱动抽象到一起，构成一层核心层</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma_seq_dduobt.png\" alt=\"dma_seq\" style=\"zoom: 25%;\"></p>\n<h4 id=\"4-2-Consumer\"><a href=\"#4-2-Consumer\" class=\"headerlink\" title=\"4.2 Consumer\"></a>4.2 Consumer</h4><p>&emsp;&emsp;Consumer则是利用DMA进行传输的其他外设，他们通过dmaengine提供的统一的接口去调用更底层的DMA驱动，如上图中的最上层就是提供给Consumer使用的。Consumer作为slave端，需要遵守一定的规则去进行DMA传输：</p>\n<ol>\n<li><p>分配一个DMA slave channel</p>\n</li>\n<li><p>设置slave和DMA控制器特殊的参数</p>\n</li>\n<li><p>获取一个描述DMA传输的descriptor</p>\n</li>\n<li><p>提交传输</p>\n</li>\n<li><p>发出DMA请求并等待反馈信息</p>\n</li>\n</ol>\n<h4 id=\"4-3-DMA-Buffer\"><a href=\"#4-3-DMA-Buffer\" class=\"headerlink\" title=\"4.3 DMA Buffer\"></a>4.3 DMA Buffer</h4><p>&emsp;&emsp;DMA传输根据方向可以分为device to memory、memory to device、device to device、memory to memory四种，其中memory to memory有自己专有的一套API，以async_开头，最后，因为mem2mem的DMA传输有了比较简洁的API，没必要直接使用dma engine提供的API，最后就导致dma engine所提供的API就特指为Slave-DMA API（即其他三种DMA传输）</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/dma_tx_i7hscd.png\" alt=\"dma_tx\" style=\"zoom: 33%;\"></p>\n<p>&emsp;&emsp;当传输的源或者目的地是memory的时候，为了提高效率，DMA controller不会每一次传输都访问memory，而是在内部开一个buffer，将数据缓存在自己buffer中：</p>\n<ul>\n<li><p>memory是源的时候，一次从memory读出一批数据保存在自己的buffer中，然后再一点点（以时钟为节拍）传输到目的地</p>\n</li>\n<li><p>memory是目的地的时候，先将源的数据传输到自己的buffer中，当累计到一定数量之后，再一次性写入memory</p>\n<p>DMA控制器内部可缓存的数据量的大小称作burst size</p>\n</li>\n</ul>\n<p>&emsp;&emsp; 一般的DMA控制器只能访问物理地址连续的内存，但在有些场景下，我们只有一些物理地址不连续的内存块，需要DMA把这些内存块的数据搬移到别处，这种场景称为scatter-gather。</p>\n<p>&emsp;&emsp;实现scatter-gather也有两种方式，一种是在DMA核心层提供scatter-gather的能力，用软件去模拟。这种方式需要先将内存块的数据搬移到一个连续的地址，然后让DMA从这个新地址开始搬移。另一种是DMA控制器本身支持scatter-gather，直接配置控制器即可，在软件上需要准备一个table或link-list，这里不继续深入分析。</p>\n<h3 id=\"五代码分析\"><a href=\"#五代码分析\" class=\"headerlink\" title=\"五代码分析\"></a>五代码分析</h3><p>&emsp;&emsp;linux内核版本4.4.19，分析的方向为自底向上，从最底层架构相关到DMA驱动最后到其他驱动调用DMA接口</p>\n<h4 id=\"5-1-架构相关\"><a href=\"#5-1-架构相关\" class=\"headerlink\" title=\"5.1 架构相关\"></a>5.1 架构相关</h4><p>&emsp;&emsp;在DMA相关的操作中，有关架构的操作和系统初始化是先于设备初始化的，系统初始化阶段会完成底层架构操作与base层的绑定，具体流程大致为</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma_seq_arch_gse1vd.png\" alt=\"dma_seq_arch\" style=\"zoom: 25%;\"></p>\n<p>&emsp;&emsp;其中，在初始化过程中就会完成DMA操作的定义，主要是完成DMA控制器与架构相关操作的实现，通过上层的调用能够执行最底层的DMA操作，当在驱动中去调用DMA的接口函数时，则直接调用与底层架构相关的函数接口，完成所需动作，具体函数调用流程为：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/func_seq_xkxvvq.png\" alt=\"func_seq\"></p>\n<p>&emsp;&emsp;这个过程主要是实现最底层的DMA操作，其中最主要的就是arm_dma_ops结构体的实现和注册</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921145912242_hhyelf.png\" alt=\"image-20200921145912242\"></p>\n<p>&emsp;&emsp;先分析arm_dma_alloc函数，它主要是获取DMA所需的buffer，这里需要先声明一些关于页表的类型和操作，所有的物理页面都是4k对齐的，因此所有表项的地址只需要高20位，而低12位则用于记录页面的状态信息和访问权限，即pgprot_t类型。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921150114291_nijvbe.png\" alt=\"image-20200921150114291\"></p>\n<p>&emsp;&emsp;这里主要是执行第二个函数__dma_alloc，根据设备的不同，所分配的页面位置和页面类型也是不同的，如果只是普通的分配页面则执行simple_buffer的分配，如果是CMA内存区域则直接从所保留的内存区域分配页面，CMA的分析参考上一篇，如果是流式DMA buffer则和普通的页面分配是一样的，还有一种从pool中分配页面和remap页面，暂不分析其用途</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921155220167_vziqns.png\" alt=\"image-20200921155220167\"></p>\n<p>&emsp;&emsp;我们这里是流式DMA，所以所分配的buffer是通过__alloc_simple_buffer函数，传入的参数分别为设备节点、buffer大小、页面标志，__alloc_simple_buffer则继续向下调用__dma_alloc_buffer，其最终通过底层页分配器的接口–alloc_pages实现buffer的分配</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921161715546_oett5j.png\" alt=\"image-20200921161715546\"></p>\n<p>&emsp;&emsp;页分配器的工作原理后续再分析，其他函数的实现也暂不继续分析</p>\n<h4 id=\"5-2-DMA驱动\"><a href=\"#5-2-DMA驱动\" class=\"headerlink\" title=\"5.2 DMA驱动\"></a>5.2 DMA驱动</h4><p>&emsp;&emsp;首先看DMA对应在设备树中的节点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\t\t\tsdma_xbar: dma-router@b78 &#123;</span><br><span class=\"line\">\t\t\t\tcompatible = <span class=\"string\">\"ti,dra7-dma-crossbar\"</span>;</span><br><span class=\"line\">\t\t\t\treg = &lt;<span class=\"number\">0xb78</span> <span class=\"number\">0xfc</span>&gt;;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">#dma-cells = <span class=\"meta-string\">&lt;1&gt;;</span></span></span><br><span class=\"line\">\t\t\t\tdma-requests = &lt;<span class=\"number\">205</span>&gt;;</span><br><span class=\"line\">\t\t\t\tti,dma-safe-<span class=\"built_in\">map</span> = &lt;<span class=\"number\">0</span>&gt;;</span><br><span class=\"line\">\t\t\t\tdma-masters = &lt;&amp;sdma&gt;;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tedma_xbar: dma-router@c78 &#123;</span><br><span class=\"line\">\t\t\t\tcompatible = <span class=\"string\">\"ti,dra7-dma-crossbar\"</span>;</span><br><span class=\"line\">\t\t\t\treg = &lt;<span class=\"number\">0xc78</span> <span class=\"number\">0x7c</span>&gt;;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">#dma-cells = <span class=\"meta-string\">&lt;2&gt;;</span></span></span><br><span class=\"line\">\t\t\t\tdma-requests = &lt;<span class=\"number\">204</span>&gt;;</span><br><span class=\"line\">\t\t\t\tti,dma-safe-<span class=\"built_in\">map</span> = &lt;<span class=\"number\">0</span>&gt;;</span><br><span class=\"line\">\t\t\t\tdma-masters = &lt;&amp;edma&gt;;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\">\tsdma: dma-controller@<span class=\"number\">4</span>a056000 &#123;</span><br><span class=\"line\">\t\tcompatible = <span class=\"string\">\"ti,omap4430-sdma\"</span>;</span><br><span class=\"line\">\t\treg = &lt;<span class=\"number\">0x4a056000</span> <span class=\"number\">0x1000</span>&gt;;</span><br><span class=\"line\">\t\tinterrupts = &lt;GIC_SPI <span class=\"number\">7</span> IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class=\"line\">\t\t\t     &lt;GIC_SPI <span class=\"number\">8</span> IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class=\"line\">\t\t\t     &lt;GIC_SPI <span class=\"number\">9</span> IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class=\"line\">\t\t\t     &lt;GIC_SPI <span class=\"number\">10</span> IRQ_TYPE_LEVEL_HIGH&gt;;</span><br><span class=\"line\">\t\t<span class=\"meta\">#dma-cells = <span class=\"meta-string\">&lt;1&gt;;</span></span></span><br><span class=\"line\">\t\tdma-channels = &lt;<span class=\"number\">32</span>&gt;;</span><br><span class=\"line\">\t\tdma-requests = &lt;<span class=\"number\">127</span>&gt;;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tedma: edma@<span class=\"number\">43300000</span> &#123;</span><br><span class=\"line\">\t\tcompatible = <span class=\"string\">\"ti,edma3-tpcc\"</span>;</span><br><span class=\"line\">\t\tti,hwmods = <span class=\"string\">\"tpcc\"</span>;</span><br><span class=\"line\">\t\treg = &lt;<span class=\"number\">0x43300000</span> <span class=\"number\">0x100000</span>&gt;;</span><br><span class=\"line\">\t\treg-names = <span class=\"string\">\"edma3_cc\"</span>;</span><br><span class=\"line\">\t\tinterrupts = &lt;GIC_SPI <span class=\"number\">361</span> IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class=\"line\">\t\t\t     &lt;GIC_SPI <span class=\"number\">360</span> IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class=\"line\">\t\t\t     &lt;GIC_SPI <span class=\"number\">359</span> IRQ_TYPE_LEVEL_HIGH&gt;;</span><br><span class=\"line\">\t\tinterrupt-names = <span class=\"string\">\"edma3_ccint\"</span>, <span class=\"string\">\"emda3_mperr\"</span>,</span><br><span class=\"line\">\t\t\t\t  <span class=\"string\">\"edma3_ccerrint\"</span>;</span><br><span class=\"line\">\t\tdma-requests = &lt;<span class=\"number\">64</span>&gt;;</span><br><span class=\"line\">\t\t<span class=\"meta\">#dma-cells = <span class=\"meta-string\">&lt;2&gt;;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tti,tptcs = &lt;&amp;edma_tptc0 <span class=\"number\">7</span>&gt;, &lt;&amp;edma_tptc1 <span class=\"number\">0</span>&gt;;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\">       uart1: serial@<span class=\"number\">4806</span>a000 &#123;</span><br><span class=\"line\">\t\tcompatible = <span class=\"string\">\"ti,dra742-uart\"</span>, <span class=\"string\">\"ti,omap4-uart\"</span>;</span><br><span class=\"line\">\t\treg = &lt;<span class=\"number\">0x4806a000</span> <span class=\"number\">0x100</span>&gt;;</span><br><span class=\"line\">\t\tinterrupts-extended = &lt;&amp;crossbar_mpu GIC_SPI <span class=\"number\">67</span> IRQ_TYPE_LEVEL_HIGH&gt;;</span><br><span class=\"line\">\t\tti,hwmods = <span class=\"string\">\"uart1\"</span>;</span><br><span class=\"line\">\t\tclock-frequency = &lt;<span class=\"number\">48000000</span>&gt;;</span><br><span class=\"line\">\t\tstatus = <span class=\"string\">\"disabled\"</span>;</span><br><span class=\"line\">\t\tdmas = &lt;&amp;edma_xbar <span class=\"number\">49</span> <span class=\"number\">0</span>&gt;, &lt;&amp;edma_xbar <span class=\"number\">50</span> <span class=\"number\">0</span>&gt;;</span><br><span class=\"line\">\t\tdma-names = <span class=\"string\">\"tx\"</span>, <span class=\"string\">\"rx\"</span>;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在设备树中如果一个设备可以利用DMA传输，只需要在设备节点中加入dmas属性，并声明所使用的DMA控制器以及channel编号，例如uart1中所使用的edma 49和50号channel。</p>\n<p>&emsp;&emsp;使用DMA设备有很多，为了方便管理和使用，同时也是为了利用内核中现有的驱动框架，DMA驱动的实现也是标准的总线-设备-驱动模型，在设备驱动模型中还有隐藏在幕后的kobject、class和kset，每一个kobject对应sys文件系统里的一个目录，其parent指针将形成一个树状分层结构，class则是抽象设备的高层视图，描述的是设备的集合，不包含同类型的设备的底层实现细节，kset则是kobject的顶层容器类</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/device_model-1600679671585_rn5dts.png\" alt=\"device_model\"></p>\n<p>&emsp;&emsp;在drivers/dma/目录中与DMA驱动相关的文件主要有dmaengine.c、edma.c、of-dma.c、omap-dma.c、ti-dma-crossbar.c、virt-dma.c，dmaengine.c是整个DMA驱动的最上层入口，在这里实现了DMA驱动模型，即上面的一些结构，还抽象了一个dma_bus总线，初始化了一个pool。omap-dma.c和edma.c分别对应SOC上面的System DMA和Enhanced DMA的驱动程序，of-dma.c实现了基于DMA的一些设备树操作，ti-dma-crossbar.c则是dma-crossbar的驱动程序，virt-dma.c对应虚拟channel。</p>\n<p>&emsp;&emsp;首先是dmaengine.c，主要是去注册创建一个pool，这个pool是通过slab分配器实现的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">dmaengine_init_unmap_pool</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ARRAY_SIZE(unmap_pool); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dmaengine_unmap_pool</span> *<span class=\"title\">p</span> = &amp;<span class=\"title\">unmap_pool</span>[<span class=\"title\">i</span>];</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">size_t</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsize = <span class=\"keyword\">sizeof</span>(struct dmaengine_unmap_data) +</span><br><span class=\"line\">\t\t       <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">dma_addr_t</span>) * p-&gt;size;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* slab分配器接口，以后分析 */</span></span><br><span class=\"line\">\t\tp-&gt;cache = kmem_cache_create(p-&gt;name, size, <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\t\t     SLAB_HWCACHE_ALIGN, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!p-&gt;cache)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">/* slab分配器接口，以后分析 */</span></span><br><span class=\"line\">\t\tp-&gt;pool = mempool_create_slab_pool(<span class=\"number\">1</span>, p-&gt;cache);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!p-&gt;pool)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == ARRAY_SIZE(unmap_pool))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdmaengine_destroy_unmap_pool();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后是omap-dma.c，这里是dma驱动的具体实现，其中主要是probe函数，当在dma-bus总线上匹配到dma设备就会执行probe函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">omap_dma_probe</span><span class=\"params\">(struct platform_device *pdev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">omap_dmadev</span> *<span class=\"title\">od</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">resource</span> *<span class=\"title\">res</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> rc, i, irq;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 为omap_dmadev结构体申请内存 */</span></span><br><span class=\"line\">\tod = devm_kzalloc(&amp;pdev-&gt;dev, <span class=\"keyword\">sizeof</span>(*od), GFP_KERNEL);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!od)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 获取内存资源 */</span></span><br><span class=\"line\">\tres = platform_get_resource(pdev, IORESOURCE_MEM, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tod-&gt;base = devm_ioremap_resource(&amp;pdev-&gt;dev, res);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (IS_ERR(od-&gt;base))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PTR_ERR(od-&gt;base);</span><br><span class=\"line\"></span><br><span class=\"line\">\tod-&gt;plat = omap_get_plat_info();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!od-&gt;plat)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -EPROBE_DEFER;</span><br><span class=\"line\">\t<span class=\"comment\">/* 这里都是配置od对象 */</span></span><br><span class=\"line\">\tod-&gt;reg_map = od-&gt;plat-&gt;reg_map;</span><br><span class=\"line\">\tdma_cap_set(DMA_SLAVE, od-&gt;ddev.cap_mask);</span><br><span class=\"line\">\tdma_cap_set(DMA_CYCLIC, od-&gt;ddev.cap_mask);</span><br><span class=\"line\">\tdma_cap_set(DMA_MEMCPY, od-&gt;ddev.cap_mask);</span><br><span class=\"line\">\tod-&gt;ddev.device_alloc_chan_resources = omap_dma_alloc_chan_resources;</span><br><span class=\"line\">\tod-&gt;ddev.device_free_chan_resources = omap_dma_free_chan_resources;</span><br><span class=\"line\">\tod-&gt;ddev.device_tx_status = omap_dma_tx_status;</span><br><span class=\"line\">\tod-&gt;ddev.device_issue_pending = omap_dma_issue_pending;</span><br><span class=\"line\">\tod-&gt;ddev.device_prep_slave_sg = omap_dma_prep_slave_sg;</span><br><span class=\"line\">\tod-&gt;ddev.device_prep_dma_cyclic = omap_dma_prep_dma_cyclic;</span><br><span class=\"line\">\tod-&gt;ddev.device_prep_dma_memcpy = omap_dma_prep_dma_memcpy;</span><br><span class=\"line\">\tod-&gt;ddev.device_config = omap_dma_slave_config;</span><br><span class=\"line\">\tod-&gt;ddev.device_pause = omap_dma_pause;</span><br><span class=\"line\">\tod-&gt;ddev.device_resume = omap_dma_resume;</span><br><span class=\"line\">\tod-&gt;ddev.device_terminate_all = omap_dma_terminate_all;</span><br><span class=\"line\">\tod-&gt;ddev.device_synchronize = omap_dma_synchronize;</span><br><span class=\"line\">\tod-&gt;ddev.src_addr_widths = OMAP_DMA_BUSWIDTHS;</span><br><span class=\"line\">\tod-&gt;ddev.dst_addr_widths = OMAP_DMA_BUSWIDTHS;</span><br><span class=\"line\">\tod-&gt;ddev.directions = BIT(DMA_DEV_TO_MEM) | BIT(DMA_MEM_TO_DEV);</span><br><span class=\"line\">\tod-&gt;ddev.residue_granularity = DMA_RESIDUE_GRANULARITY_BURST;</span><br><span class=\"line\">\tod-&gt;ddev.dev = &amp;pdev-&gt;dev;</span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;od-&gt;ddev.channels);</span><br><span class=\"line\">\tspin_lock_init(&amp;od-&gt;lock);</span><br><span class=\"line\">\tspin_lock_init(&amp;od-&gt;irq_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">\tod-&gt;dma_requests = OMAP_SDMA_REQUESTS;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pdev-&gt;dev.of_node &amp;&amp; of_property_read_u32(pdev-&gt;dev.of_node,</span><br><span class=\"line\">\t\t\t\t\t\t      <span class=\"string\">\"dma-requests\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t      &amp;od-&gt;dma_requests)) &#123;</span><br><span class=\"line\">\t\tdev_info(&amp;pdev-&gt;dev,</span><br><span class=\"line\">\t\t\t <span class=\"string\">\"Missing dma-requests property, using %u.\\n\"</span>,</span><br><span class=\"line\">\t\t\t OMAP_SDMA_REQUESTS);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; OMAP_SDMA_CHANNELS; i++) &#123;</span><br><span class=\"line\">\t\trc = omap_dma_chan_init(od);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rc) &#123;</span><br><span class=\"line\">\t\t\tomap_dma_free(od);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rc;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 从设备树中获取中断 */</span></span><br><span class=\"line\">\tirq = platform_get_irq(pdev, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (irq &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tdev_info(&amp;pdev-&gt;dev, <span class=\"string\">\"failed to get L1 IRQ: %d\\n\"</span>, irq);</span><br><span class=\"line\">\t\tod-&gt;legacy = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Disable all interrupts */</span></span><br><span class=\"line\">\t\tod-&gt;irq_enable_mask = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tomap_dma_glbl_write(od, IRQENABLE_L1, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trc = devm_request_irq(&amp;pdev-&gt;dev, irq, omap_dma_irq,</span><br><span class=\"line\">\t\t\t\t      IRQF_SHARED, <span class=\"string\">\"omap-dma-engine\"</span>, od);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rc)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rc;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tod-&gt;ddev.filter.<span class=\"built_in\">map</span> = od-&gt;plat-&gt;slave_map;</span><br><span class=\"line\">\tod-&gt;ddev.filter.mapcnt = od-&gt;plat-&gt;slavecnt;</span><br><span class=\"line\">\tod-&gt;ddev.filter.fn = omap_dma_filter_fn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 注册OMAP-DMA设备 */</span></span><br><span class=\"line\">\trc = dma_async_device_register(&amp;od-&gt;ddev);</span><br><span class=\"line\"></span><br><span class=\"line\">\tplatform_set_drvdata(pdev, od);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pdev-&gt;dev.of_node) &#123;</span><br><span class=\"line\">\t\tomap_dma_info.dma_cap = od-&gt;ddev.cap_mask;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* Device-tree DMA controller registration */</span></span><br><span class=\"line\">\t\trc = of_dma_controller_register(pdev-&gt;dev.of_node,</span><br><span class=\"line\">\t\t\t\tof_dma_simple_xlate, &amp;omap_dma_info);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rc) &#123;</span><br><span class=\"line\">\t\t\tpr_warn(<span class=\"string\">\"OMAP-DMA: failed to register DMA controller\\n\"</span>);</span><br><span class=\"line\">\t\t\tdma_async_device_unregister(&amp;od-&gt;ddev);</span><br><span class=\"line\">\t\t\tomap_dma_free(od);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdev_info(&amp;pdev-&gt;dev, <span class=\"string\">\"OMAP DMA engine driver\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;edma驱动中涉及到edma-tptc和edma的注册，主体还是edma的probe函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">edma_probe</span><span class=\"params\">(struct platform_device *pdev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edma_soc_info</span>\t*<span class=\"title\">info</span> = <span class=\"title\">pdev</span>-&gt;<span class=\"title\">dev</span>.<span class=\"title\">platform_data</span>;</span></span><br><span class=\"line\">\ts8\t\t\t(*queue_priority_mapping)[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t\ti, off, ln;</span><br><span class=\"line\">\tconst s16\t\t(*rsv_slots)[2];</span><br><span class=\"line\">\tconst s16\t\t(*xbar_chans)[2];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t\tirq;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>\t\t\t*irq_name;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">resource</span>\t\t*<span class=\"title\">mem</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span>\t*<span class=\"title\">node</span> = <span class=\"title\">pdev</span>-&gt;<span class=\"title\">dev</span>.<span class=\"title\">of_node</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device</span>\t\t*<span class=\"title\">dev</span> = &amp;<span class=\"title\">pdev</span>-&gt;<span class=\"title\">dev</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edma_cc</span>\t\t*<span class=\"title\">ecc</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span>\t\t\tlegacy_mode = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> *<span class=\"title\">match</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmatch = of_match_node(edma_of_ids, node);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (match &amp;&amp; (u32)match-&gt;data == EDMA_BINDING_TPCC)</span><br><span class=\"line\">\t\t\tlegacy_mode = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tinfo = edma_setup_info_from_dt(dev, legacy_mode);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (IS_ERR(info)) &#123;</span><br><span class=\"line\">\t\t\tdev_err(dev, <span class=\"string\">\"failed to get DT data\\n\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> PTR_ERR(info);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpm_runtime_enable(dev);</span><br><span class=\"line\">\tret = pm_runtime_get_sync(dev);</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = dma_set_mask_and_coherent(dev, DMA_BIT_MASK(<span class=\"number\">32</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc = devm_kzalloc(dev, <span class=\"keyword\">sizeof</span>(*ecc), GFP_KERNEL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;dev = dev;</span><br><span class=\"line\">\tecc-&gt;id = pdev-&gt;id;</span><br><span class=\"line\">\tecc-&gt;legacy_mode = legacy_mode;</span><br><span class=\"line\">\t<span class=\"comment\">/* When booting with DT the pdev-&gt;id is -1 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ecc-&gt;id &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tecc-&gt;id = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 同样获取设备的内存资源 */</span></span><br><span class=\"line\">\tmem = platform_get_resource_byname(pdev, IORESOURCE_MEM, <span class=\"string\">\"edma3_cc\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;base = devm_ioremap_resource(dev, mem);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (IS_ERR(ecc-&gt;base))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PTR_ERR(ecc-&gt;base);</span><br><span class=\"line\"></span><br><span class=\"line\">\tplatform_set_drvdata(pdev, ecc);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 从硬件IP中获取edma的配置参数 */</span></span><br><span class=\"line\">\tret = edma_setup_from_hw(dev, info, ecc);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 基于硬件IP参数申请内存 */</span></span><br><span class=\"line\">\tecc-&gt;slave_chans = devm_kcalloc(dev, ecc-&gt;num_channels,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">sizeof</span>(*ecc-&gt;slave_chans), GFP_KERNEL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;slot_inuse = devm_kcalloc(dev, BITS_TO_LONGS(ecc-&gt;num_slots),</span><br><span class=\"line\">\t\t\t\t       <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>), GFP_KERNEL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;default_queue = info-&gt;default_queue;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ecc-&gt;num_slots; i++)</span><br><span class=\"line\">\t\tedma_write_slot(ecc, i, &amp;dummy_paramset);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (info-&gt;rsv) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Set the reserved slots in inuse list */</span></span><br><span class=\"line\">\t\trsv_slots = info-&gt;rsv-&gt;rsv_slots;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rsv_slots) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; rsv_slots[i][<span class=\"number\">0</span>] != <span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\toff = rsv_slots[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\tln = rsv_slots[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tset_bits(off, ln, ecc-&gt;slot_inuse);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 清除xbar在unused链表中的通道映射 */</span></span><br><span class=\"line\">\txbar_chans = info-&gt;xbar_chans;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (xbar_chans) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; xbar_chans[i][<span class=\"number\">1</span>] != <span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\toff = xbar_chans[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 获取中断 */</span></span><br><span class=\"line\">\tirq = platform_get_irq_byname(pdev, <span class=\"string\">\"edma3_ccint\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (irq &lt; <span class=\"number\">0</span> &amp;&amp; node)</span><br><span class=\"line\">\t\tirq = irq_of_parse_and_map(node, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tirq = platform_get_irq_byname(pdev, <span class=\"string\">\"edma3_ccerrint\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (irq &lt; <span class=\"number\">0</span> &amp;&amp; node)</span><br><span class=\"line\">\t\tirq = irq_of_parse_and_map(node, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (irq &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tirq_name = devm_kasprintf(dev, GFP_KERNEL, <span class=\"string\">\"%s_ccerrint\"</span>,</span><br><span class=\"line\">\t\t\t\t\t  dev_name(dev));</span><br><span class=\"line\">\t\tret = devm_request_irq(dev, irq, dma_ccerr_handler, <span class=\"number\">0</span>, irq_name,</span><br><span class=\"line\">\t\t\t\t       ecc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">\t\t\tdev_err(dev, <span class=\"string\">\"CCERRINT (%d) failed --&gt; %d\\n\"</span>, irq, ret);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;dummy_slot = edma_alloc_slot(ecc, EDMA_SLOT_ANY);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ecc-&gt;dummy_slot &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tdev_err(dev, <span class=\"string\">\"Can't allocate PaRAM dummy slot\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ecc-&gt;dummy_slot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tqueue_priority_mapping = info-&gt;queue_priority_mapping;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 事件队列优先映射 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; queue_priority_mapping[i][<span class=\"number\">0</span>] != <span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">\t\tedma_assign_priority_to_queue(ecc, queue_priority_mapping[i][<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t\t\t      queue_priority_mapping[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ecc-&gt;num_region; i++) &#123;</span><br><span class=\"line\">\t\tedma_write_array2(ecc, EDMA_DRAE, i, <span class=\"number\">0</span>, <span class=\"number\">0x0</span>);</span><br><span class=\"line\">\t\tedma_write_array2(ecc, EDMA_DRAE, i, <span class=\"number\">1</span>, <span class=\"number\">0x0</span>);</span><br><span class=\"line\">\t\tedma_write_array(ecc, EDMA_QRAE, i, <span class=\"number\">0x0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tecc-&gt;info = info;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 初始化dma设备和channels */</span></span><br><span class=\"line\">\tedma_dma_init(ecc, legacy_mode);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ecc-&gt;num_channels; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 分配所有的channels到默认的队列 */</span></span><br><span class=\"line\">\t\tedma_assign_channel_eventq(&amp;ecc-&gt;slave_chans[i],</span><br><span class=\"line\">\t\t\t\t\t   info-&gt;default_queue);</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 设置虚拟slot的入口位置 */</span></span><br><span class=\"line\">\t\tedma_set_chmap(&amp;ecc-&gt;slave_chans[i], ecc-&gt;dummy_slot);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;dma_slave.filter.<span class=\"built_in\">map</span> = info-&gt;slave_map;</span><br><span class=\"line\">\tecc-&gt;dma_slave.filter.mapcnt = info-&gt;slavecnt;</span><br><span class=\"line\">\tecc-&gt;dma_slave.filter.fn = edma_filter_fn;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = dma_async_device_register(&amp;ecc-&gt;dma_slave);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">\t\tdev_err(dev, <span class=\"string\">\"slave ddev registration failed (%d)\\n\"</span>, ret);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> err_reg1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ecc-&gt;dma_memcpy) &#123;</span><br><span class=\"line\">\t\tret = dma_async_device_register(ecc-&gt;dma_memcpy);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">\t\t\tdev_err(dev, <span class=\"string\">\"memcpy ddev registration failed (%d)\\n\"</span>,</span><br><span class=\"line\">\t\t\t\tret);</span><br><span class=\"line\">\t\t\tdma_async_device_unregister(&amp;ecc-&gt;dma_slave);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> err_reg1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node)</span><br><span class=\"line\">\t\tof_dma_controller_register(node, of_edma_xlate, ecc);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdev_info(dev, <span class=\"string\">\"TI EDMA DMA engine driver\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">err_reg1:</span><br><span class=\"line\">\tedma_free_slot(ecc, ecc-&gt;dummy_slot);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后是ti-dma-crossbar.c，负责dma事件映射</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ti_dra7_xbar_probe</span><span class=\"params\">(struct platform_device *pdev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span> *<span class=\"title\">node</span> = <span class=\"title\">pdev</span>-&gt;<span class=\"title\">dev</span>.<span class=\"title\">of_node</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> *<span class=\"title\">match</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span> *<span class=\"title\">dma_node</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ti_dra7_xbar_data</span> *<span class=\"title\">xbar</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">property</span> *<span class=\"title\">prop</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">resource</span> *<span class=\"title\">res</span>;</span></span><br><span class=\"line\">\tu32 safe_val;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> sz;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> __iomem *iomem;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!node)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENODEV;</span><br><span class=\"line\"></span><br><span class=\"line\">\txbar = devm_kzalloc(&amp;pdev-&gt;dev, <span class=\"keyword\">sizeof</span>(*xbar), GFP_KERNEL);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!xbar)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdma_node = of_parse_phandle(node, <span class=\"string\">\"dma-masters\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dma_node) &#123;</span><br><span class=\"line\">\t\tdev_err(&amp;pdev-&gt;dev, <span class=\"string\">\"Can't get DMA master node\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENODEV;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmatch = of_match_node(ti_dra7_master_match, dma_node);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!match) &#123;</span><br><span class=\"line\">\t\tdev_err(&amp;pdev-&gt;dev, <span class=\"string\">\"DMA master is not supported\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (of_property_read_u32(dma_node, <span class=\"string\">\"dma-requests\"</span>,</span><br><span class=\"line\">\t\t\t\t &amp;xbar-&gt;dma_requests)) &#123;</span><br><span class=\"line\">\t\tdev_info(&amp;pdev-&gt;dev,</span><br><span class=\"line\">\t\t\t <span class=\"string\">\"Missing XBAR output information, using %u.\\n\"</span>,</span><br><span class=\"line\">\t\t\t TI_DRA7_XBAR_OUTPUTS);</span><br><span class=\"line\">\t\txbar-&gt;dma_requests = TI_DRA7_XBAR_OUTPUTS;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tof_node_put(dma_node);</span><br><span class=\"line\"></span><br><span class=\"line\">\txbar-&gt;dma_inuse = devm_kcalloc(&amp;pdev-&gt;dev,</span><br><span class=\"line\">\t\t\t\t       BITS_TO_LONGS(xbar-&gt;dma_requests),</span><br><span class=\"line\">\t\t\t\t       <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>), GFP_KERNEL);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!xbar-&gt;dma_inuse)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (of_property_read_u32(node, <span class=\"string\">\"dma-requests\"</span>, &amp;xbar-&gt;xbar_requests)) &#123;</span><br><span class=\"line\">\t\tdev_info(&amp;pdev-&gt;dev,</span><br><span class=\"line\">\t\t\t <span class=\"string\">\"Missing XBAR input information, using %u.\\n\"</span>,</span><br><span class=\"line\">\t\t\t TI_DRA7_XBAR_INPUTS);</span><br><span class=\"line\">\t\txbar-&gt;xbar_requests = TI_DRA7_XBAR_INPUTS;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!of_property_read_u32(node, <span class=\"string\">\"ti,dma-safe-map\"</span>, &amp;safe_val))</span><br><span class=\"line\">\t\txbar-&gt;safe_val = (u16)safe_val;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tprop = of_find_property(node, <span class=\"string\">\"ti,reserved-dma-request-ranges\"</span>, &amp;sz);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (prop) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> pname[] = <span class=\"string\">\"ti,reserved-dma-request-ranges\"</span>;</span><br><span class=\"line\">\t\tu32 (*rsv_events)[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">size_t</span> nelm = sz / <span class=\"keyword\">sizeof</span>(*rsv_events);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!nelm)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trsv_events = kcalloc(nelm, <span class=\"keyword\">sizeof</span>(*rsv_events), GFP_KERNEL);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!rsv_events)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tret = of_property_read_u32_array(node, pname, (u32 *)rsv_events,</span><br><span class=\"line\">\t\t\t\t\t\t nelm * <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; nelm; i++) &#123;</span><br><span class=\"line\">\t\t\tti_dra7_xbar_reserve(rsv_events[i][<span class=\"number\">0</span>], rsv_events[i][<span class=\"number\">1</span>],</span><br><span class=\"line\">\t\t\t\t\t     xbar-&gt;dma_inuse);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tkfree(rsv_events);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres = platform_get_resource(pdev, IORESOURCE_MEM, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tiomem = devm_ioremap_resource(&amp;pdev-&gt;dev, res);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (IS_ERR(iomem))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PTR_ERR(iomem);</span><br><span class=\"line\"></span><br><span class=\"line\">\txbar-&gt;iomem = iomem;</span><br><span class=\"line\"></span><br><span class=\"line\">\txbar-&gt;dmarouter.dev = &amp;pdev-&gt;dev;</span><br><span class=\"line\">\txbar-&gt;dmarouter.route_free = ti_dra7_xbar_free;</span><br><span class=\"line\">\txbar-&gt;dma_offset = (u32)match-&gt;data;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmutex_init(&amp;xbar-&gt;mutex);</span><br><span class=\"line\">\tplatform_set_drvdata(pdev, xbar);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Reset the crossbar */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; xbar-&gt;dma_requests; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!test_bit(i, xbar-&gt;dma_inuse))</span><br><span class=\"line\">\t\t\tti_dra7_xbar_write(xbar-&gt;iomem, i, xbar-&gt;safe_val);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = of_dma_router_register(node, ti_dra7_xbar_route_allocate,</span><br><span class=\"line\">\t\t\t\t     &amp;xbar-&gt;dmarouter);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Restore the defaults for the crossbar */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; xbar-&gt;dma_requests; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!test_bit(i, xbar-&gt;dma_inuse))</span><br><span class=\"line\">\t\t\t\tti_dra7_xbar_write(xbar-&gt;iomem, i, i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;最后是虚拟channel，在virt-dma.c文件中实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">vchan_init</span><span class=\"params\">(struct virt_dma_chan *vc, struct dma_device *dmadev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tdma_cookie_init(&amp;vc-&gt;chan);</span><br><span class=\"line\"></span><br><span class=\"line\">\tspin_lock_init(&amp;vc-&gt;lock);</span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;vc-&gt;desc_allocated);</span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;vc-&gt;desc_submitted);</span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;vc-&gt;desc_issued);</span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;vc-&gt;desc_completed);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttasklet_init(&amp;vc-&gt;task, vchan_complete, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)vc);</span><br><span class=\"line\"></span><br><span class=\"line\">\tvc-&gt;chan.device = dmadev;</span><br><span class=\"line\">\tlist_add_tail(&amp;vc-&gt;chan.device_node, &amp;dmadev-&gt;channels);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-具体实例\"><a href=\"#5-3-具体实例\" class=\"headerlink\" title=\"5.3 具体实例\"></a>5.3 具体实例</h4><p>&emsp;&emsp;这里给出一个实际驱动中调用dma传输的一个例子，在cmem驱动中通过一致性dma接口分配了buffer，调用v7_dma_map_area函数实现cache的同步和dma传输</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200923091128578_w4xg1t.png\" alt=\"image-20200923091128578\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&emsp;&emsp;Linux中关于dma的操作非常常见，一些dma驱动独立到drivers/dma/目录下，架构相关的dma操作放在arch/arm/mm/目录下，还有在drivers/base/目录下也有关于dma的驱动，以及drivers/dma-buf/目录下所形成的dma-buf架构，因此有必要梳理一下dma的框架</p>","more":"<p>&emsp;&emsp;DMA（Direct Memory Access）用于在设备和内存之间直接进行数据传输而不经过CPU的一种方式，主要通过DMA控制器来实现，而DMA控制器也主要分为两种，一种是嵌入到SOC上的外部DMA控制器，另一种是设备自带的DMA控制器。</p>\n<p>&emsp;&emsp;首先是SOC上的DMA控制器，这个控制器主要是为了解决那些自身不带DMA控制器的设备也能进行DMA传输，其他的设备通过向这个总DMA控制器注册来实现DMA传输。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/DMA_ut94kz.png\" alt=\"DMA\"></p>\n<p>&emsp;&emsp;而对于那些自身携带DMA控制器的设备来说，他们可以独自实现DMA传输。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/DMA_device_oxv55a.png\" alt=\"DMA_device\" style=\"zoom: 25%;\"></p>\n<p>&emsp;&emsp;其中，Descriptor描述DMA传输过程中的各种属性。DMA传输使用的是物理地址，而且所处理的buffer必须是物理上连续的。且CPU访问内存都是通过cache，但DMA不能访问cache，所以需要注意cache一致性，ARM架构通过clean、invalid操作来完成。在进行内存到设备传输时，要确保已经将cache中的内容写到内存上；在进行设备到内存传输时，从内存上读取数据之前需要确保将cache中对应的数据无效。</p>\n<h3 id=\"一、总体分析\"><a href=\"#一、总体分析\" class=\"headerlink\" title=\"一、总体分析\"></a>一、总体分析</h3><p>&emsp;&emsp;内核通常使用的地址是虚拟地址。我们调用kmalloc()、vmalloc()或者类似的接口返回的地址都是虚拟地址，保存在”void *”的变量中。虚拟内存系统（TLB、页表等）将虚拟地址（程序角度）翻译成物理地址（CPU角度），物理地址保存在“phys_addr_t”或“resource_size_t”的变量中。对于一个硬件设备上的寄存器等设备资源，内核是按照物理地址来管理的。驱动并不能直接使用这些物理地址，必须首先通过ioremap()接口将这些物理地址映射到内核虚拟地址空间上去。</p>\n<p>&emsp;&emsp;I/O设备使用第三种地址：“总线地址”。如果设备在MMIO地址空间（MMIO是物理地址空间的子集）中有若干的寄存器，或者该设备足够的智能，可以通过DMA执行读写系统内存的操作，这些情况下，设备使用的地址就是总线地址。在某些系统中，总线地址与CPU物理地址相同，但一般来说不同。iommus和host bridge可以在物理地址和总线地址之间进行映射。</p>\n<p>&emsp;&emsp;下图中对应了驱动程序访问总线地址的两种方案：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/image-20200827101651829_ynif9a.png\" alt=\"image-20200827101651829\"></p>\n<ol>\n<li><p>在设备初始化过程中，内核了解了所有的IO device及其对应的MMIO地址空间，CPU并不能通过总线地址A直接访问总线上的设备，host bridge会在MMIO（即物理地址）和总线地址之间进行mapping，因此，对于CPU，它实际上是可以通过B地址（位于MMIO地址空间）访问设备。驱动程序通过ioremap()把物理地址B映射成虚拟地址C，这时候，驱动程序就可以通过虚拟地址C来访问总线上的地址A了。</p>\n</li>\n<li><p>如果设备支持DMA，那么在驱动中可以通过kmalloc或者其他类似接口分配一个DMA buffer，并且返回了虚拟地址X，MMU将X地址映射成了物理地址Y，从而定位了DMA buffer在系统内存中的位置，驱动可以通过访问地址X来操作DMA buffer。但是设备不能通过X地址来访问DMA buffer，因为MMU对设备不可见，而且系统内存所在的系统总线和PCI总线属于不同的地址空间。在一些简单的系统中，设备可以通过DMA直接访问物理地址Y，但是在大多数的系统中，有一个IOMMU的硬件用来将DMA可访问的总线地址翻译成物理地址，也就是把上图中的地址Z翻译成Y。驱动在调用dma_map_single这样的接口函数的时候会传递一个虚拟地址X，在这个函数中会设定IOMMU的页表，将地址X映射到Z，并且将返回z这个总线地址。驱动可以把Z这个总线地址设定到设备上的DMA相关的寄存器中。这样，当设备发起对地址Z开始的DMA操作的时候，IOMMU可以进行地址映射，并将DMA操作定位到Y地址开始的DMA buffer。</p>\n</li>\n</ol>\n<h3 id=\"二、DMA访问限制\"><a href=\"#二、DMA访问限制\" class=\"headerlink\" title=\"二、DMA访问限制\"></a>二、DMA访问限制</h3><p>&emsp;&emsp;如果驱动是通过伙伴系统的接口（例如__get_free_page*()）或者类似kmalloc() or kmem_cache_alloc()这样的通用内存分配的接口来分配DMA buffer，那么这些接口函数返回的虚拟地址可以直接用于DMA mapping接口API，并通过DMA操作在外设和dma buffer中交换数据。但vmalloc()接口分配的DMA buffer不能直接使用，因为其物理内存不连续。</p>\n<p>&emsp;&emsp;驱动中定义的全局变量如果编译到内核则可以用于DMA操作，因为全局变量位于内核的数据段或者bss段。在内核初始化的时候，会建立kernel image mapping，因此全局变量所占据的内存都是连续的，并且VA和PA是有固定偏移的线性关系，因此可以用于DMA操作。在定义这些全局变量的DMA buffer的时候，要小心的进行cacheline的对齐，并且要处理CPU和DMA controller之间的操作同步，以避免cache coherence问题。</p>\n<p>&emsp;&emsp;如果驱动编译成模块全局变量则不能用于DMA操作，因为驱动中全局定义的DMA buffer不在内核的线性映射区域，其虚拟地址是在模块加载的时候，通过vmalloc分配，这时候DMA buffer如果大于一个page frame，那么实际上是无法保证其底层物理地址的连续性，也无法保证VA和PA的线性关系。</p>\n<p>&emsp;&emsp;通过kmap接口返回的内存也是不可以做DMA buffer，其原理类似vmalloc。块设备I/O子系统和网络子系统在分配buffer的时候则会确保其内存是可以进行DMA操作的。</p>\n<p>&emsp;&emsp;根据DMA buffer的特性，DMA操作有两种：一种是streaming，DMA buffer是一次性的，用完就销毁。这种DMA buffer需要自己考虑cache一致性。另外一种是DMA buffer是cache coherent的，软件实现上比较简单，更重要的是这种DMA buffer往往是静态的、长时间存在的。有些设备有DMA寻址限制，不同的硬件平台有不同的配置方式，有的平台没有限制，外设可以访问系统内存的每一个Byte，有些则不可以。</p>\n<p>&emsp;&emsp;不同类型的DMA操作可能有有不同的寻址限制，也可能相同。如果相同，我们可以用第一组接口设定streaming和coherent两种DMA 操作的地址掩码。如果不同，可以使用第二组的接口进行设定：</p>\n<blockquote>\n<p>int dma_set_mask_and_coherent(struct device *dev, u64 mask);</p>\n</blockquote>\n<blockquote>\n<p>int dma_set_mask(struct device *dev, u64 mask);</p>\n<p>int dma_set_coherent_mask(struct device *dev, u64 mask);</p>\n</blockquote>\n<h3 id=\"三、DMA映射\"><a href=\"#三、DMA映射\" class=\"headerlink\" title=\"三、DMA映射\"></a>三、DMA映射</h3><p>&emsp;&emsp;DMA映射分为两种，一种是一致性DMA映射（Consistent DMA mappings），另一种则是流式DMA映射（Streaming DMA mapping）。</p>\n<ol>\n<li><p>一致性DMA映射</p>\n<p>一致性DMA映射有两种特点：</p>\n<p>（1）持续使用该DMA buffer，初始化的时候map，系统结束时unmap。</p>\n<p>（2）CPU和DMA controller在发起对DMA buffer的并行访问的时候不需要考虑cache操作，CPU和DMA controller都可以看到对方对DMA buffer的更新。</p>\n</li>\n<li><p>流式DMA映射</p>\n<p>流式DMA映射是一次性的，一般是在DMA传输的时候才进行map，一旦DMA传输完成就立刻unmap。</p>\n</li>\n</ol>\n<p>   <img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/image-20200829090605153_l6swsx.png\" alt=\"image-20200829090605153\"></p>\n<p>&emsp;&emsp;可以看到，cmem驱动中所采用的就是这种一致性DMA映射。通过dma_alloc_coherent()函数接口分配并映射了一个较大（page大小或类似）的coherent DMA memory。其中dev参数就是执行该设备的struct device对象的，size参数指明了需要分配DMA buffer的大小，以字节为单位，dma参数为返回的总线地址，最后一个参数为分配内存的标志，返回的参数为此块buffer的虚拟地址，供CPU使用。</p>\n<p>&emsp;&emsp;dma_alloc_coherent()函数所申请的内存是PAGE_SIZE对齐的，以PAGE_SIZE为单位申请buffer，而且此函数可以运行在进程上下文和中断上下文。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200829092028125_z3sk9c.png\" alt=\"image-20200829092028125\"></p>\n<p>&emsp;&emsp;当所申请的buffer已经使用完，需要取消映射并释放此块内存，dma_free_coherent()函数直接取消内存的映射并释放内存，其中第三个参数为内存的虚拟地址，第四个参数为bus addr，与dma_alloc_coherent()函数不同的是，dma_free_coherent()函数只能运行在进程上下文而不能运行在中断上下文，在某些平台释放DMAbuffer的时候会引发TLB维护的操作，从而引起cpu core之间的通信，如果关闭了IRQ会锁死在SMP IPI的代码中。</p>\n<p>&emsp;&emsp;在所申请的大块内存中还会分成很多个pool，这里是通过堆相关的函数来进行管理的，通过HeapMem_alloc()函数从大块内存中申请一个pool，HeapMem_free()则释放一个pool，具体不继续分析。</p>\n<p>&emsp;&emsp;这里继续分析流式DMA映射的接口函数，流式DMA映射有两个版本的接口函数，一种是用来map/umap单个dma buffer，另一种用来map/umap形成scatterlist的多个dma buffer。</p>\n<ol>\n<li><p>单个dma buffer映射</p>\n<p>&emsp;&emsp;映射单个dma buffer的接口函数为dma_map_single()，传入的参数为struct device设备结构，虚拟地址，内存大小以及DMA操作的方向。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dma_handle = dma_map_single(dev, addr, size, direction);</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;umap单个dma buffer使用dma_unmap_single()接口函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dma_unmap_single(dev, dma_handle, size, direction);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多个形成scatterlist的dma buffer</p>\n<p>&emsp;&emsp;在scatterlist的情况下，需要映射的对象是分散的若干段dma buffer，通过dma_map_sg将scatterlist结构中的多个dma buffer映射成一个大块的、连续的bus address region。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i, count = dma_map_sg(dev, sglist, nents, direction);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">scatterlist</span> *<span class=\"title\">sg</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">for_each_sg(sglist, sg, count, i) &#123; </span><br><span class=\"line\">    hw_address[i] = sg_dma_address(sg); </span><br><span class=\"line\">    hw_len[i] = sg_dma_len(sg); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;umap多个形成scatterlist的dma buffer是通过下面的接口实现的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dma_unmap_sg(dev, sglist, nents, direction);</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;调用dma_unmap_sg的时候要确保DMA操作已经完成，另外，传递给dma_unmap_sg的nents参数需要等于传递给dma_map_sg的nents参数，而不是该函数返回的count。</p>\n<p>&emsp;&emsp;执行流式DMA映射的时候需要考虑CPU和设备之间数据的同步问题，以保证设备看到的数据和CPU看到的数据是一样的。所以，在进行映射DMA映射，完成传输之后，需要调用相关的函数来进行同步</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dma_sync_single_for_cpu(dev, dma_handle, size, direction);</span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\">dma_sync_sg_for_cpu(dev, sglist, nents, direction);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>&emsp;&emsp;由于DMA地址空间在某些CPU架构上是有限的，因此分配并map可能会产生错误，所以需要判断过程中是否产生了错误以及出错之后的处理</p>\n<ul>\n<li><p>检查dma_map_single和dma_map_page返回的dma address</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dma_addr_t</span> dma_handle;</span><br><span class=\"line\"></span><br><span class=\"line\">dma_handle = dma_map_single(dev, addr, size, direction); </span><br><span class=\"line\"><span class=\"keyword\">if</span> (dma_mapping_error(dev, dma_handle)) &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> map_error_handling; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当在mapping多个page的时候，如果中间发生了mapping error，那么需要对那些已经mapped的page进行unmap的操作</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dma_addr_t</span> dma_handle1; </span><br><span class=\"line\"></span><br><span class=\"line\">dma_handle1 = dma_map_single(dev, addr, size, direction); </span><br><span class=\"line\"><span class=\"keyword\">if</span> (dma_mapping_error(dev, dma_handle1)) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">goto</span> map_error_handling1; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"四、DMA驱动分析以及初始化配置\"><a href=\"#四、DMA驱动分析以及初始化配置\" class=\"headerlink\" title=\"四、DMA驱动分析以及初始化配置\"></a>四、DMA驱动分析以及初始化配置</h3><p>&emsp;&emsp;上面只分析了DMA的执行流程，但是其初始化过程以及驱动的配置方案全都没有分析，接下来会继续分析剩下的部分。下图为DMA框架的大体流程：</p>\n<p>​        <img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma%E6%A1%86%E6%9E%B6_ogfn0e.svg\" alt=\"dma框架\"></p>\n<p>&emsp;&emsp;硬件环境为ARMv7架构，SOC为TI的AM5728，SOC上内置一个DMA控制器。Linux内核中对DMA的支持通过DMA ENGINE架构，具体的实现分为Provider、Consumer以及DMA Buffer三个方面。三种抽象为：</p>\n<p>&emsp;&emsp;Provider：就是指SOC上的DMA Controller</p>\n<p>&emsp;&emsp;Consumer：那些能利用DMA搬移数据的片上外设，例如MMC、USB Controller等</p>\n<p>&emsp;&emsp;DMA Buffer：DMA传输过程中需要用到的数据缓冲</p>\n<h4 id=\"4-1-Provider\"><a href=\"#4-1-Provider\" class=\"headerlink\" title=\"4.1 Provider\"></a>4.1 Provider</h4><p>&emsp;&emsp;Provider所抽象的是SOC上的DMA控制器，它的驱动实现是与具体架构相关，以及传输过程中cache同步问题都在架构相关的文件中，涉及到的文件主要有<code>arch/arm/mm/dma-mapping.c</code>、<code>arch/arm/kernel/dma.c</code>、<code>arch/arm/mach-omap2/dma.c</code>、<code>arch/arm/plat-omap/dma.c</code>、<code>drivers/base/dma-mapping.c</code>、<code>drivers/base/dma-coherent.c</code>、<code>drivers/base/*</code>、<code>drivers/dma/*</code>等文件</p>\n<p><strong>arch/arm/mm/dma-mapping.c：</strong>主要实现由上层传来的分配buffer、从CMA区域分配buffer、带cache操作的分配buffer等操作的具体实现</p>\n<p><strong>arch/arm/kernel/dma.c：</strong>主要实现dma channel以及channel的各种操作，包括分配channel、释放channel等，其中还包括在procfs中创建接口</p>\n<p><strong>arch/arm/mach-omap2/dma.c：</strong>为设备树文件解析出来的plat-form节点分配内存并映射到内存中，初始化其中的部分数据</p>\n<p><strong>arch/arm/plat-omap/dma.c：</strong>解析出来的plat-form节点驱动和设备节点的初始化以及注册到内核，还包括中断的处理和注册</p>\n<p><strong>drivers/base/dma-mapping.c：</strong>对base目录下的coherent和contiguous两个关于dma文件的抽象，相当于一个核心层</p>\n<p><strong>drivers/base/dma-coherent.c：</strong>对于CMA及其他关于连续内存的操作</p>\n<p><strong>drivers/dma/omap-dma.c：</strong>dma engine驱动的具体实现，根据具体硬件SOC上的DMA控制器实现相应的驱动，包括omap dma驱动、dma-crossbar驱动、virt-dma驱动等</p>\n<p><strong>drivers/dma/dmaengine.c：</strong>抽象出的dmaengine架构，在上层将各种dma控制器的驱动抽象到一起，构成一层核心层</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma_seq_dduobt.png\" alt=\"dma_seq\" style=\"zoom: 25%;\"></p>\n<h4 id=\"4-2-Consumer\"><a href=\"#4-2-Consumer\" class=\"headerlink\" title=\"4.2 Consumer\"></a>4.2 Consumer</h4><p>&emsp;&emsp;Consumer则是利用DMA进行传输的其他外设，他们通过dmaengine提供的统一的接口去调用更底层的DMA驱动，如上图中的最上层就是提供给Consumer使用的。Consumer作为slave端，需要遵守一定的规则去进行DMA传输：</p>\n<ol>\n<li><p>分配一个DMA slave channel</p>\n</li>\n<li><p>设置slave和DMA控制器特殊的参数</p>\n</li>\n<li><p>获取一个描述DMA传输的descriptor</p>\n</li>\n<li><p>提交传输</p>\n</li>\n<li><p>发出DMA请求并等待反馈信息</p>\n</li>\n</ol>\n<h4 id=\"4-3-DMA-Buffer\"><a href=\"#4-3-DMA-Buffer\" class=\"headerlink\" title=\"4.3 DMA Buffer\"></a>4.3 DMA Buffer</h4><p>&emsp;&emsp;DMA传输根据方向可以分为device to memory、memory to device、device to device、memory to memory四种，其中memory to memory有自己专有的一套API，以async_开头，最后，因为mem2mem的DMA传输有了比较简洁的API，没必要直接使用dma engine提供的API，最后就导致dma engine所提供的API就特指为Slave-DMA API（即其他三种DMA传输）</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875686/samples/DMA/dma_tx_i7hscd.png\" alt=\"dma_tx\" style=\"zoom: 33%;\"></p>\n<p>&emsp;&emsp;当传输的源或者目的地是memory的时候，为了提高效率，DMA controller不会每一次传输都访问memory，而是在内部开一个buffer，将数据缓存在自己buffer中：</p>\n<ul>\n<li><p>memory是源的时候，一次从memory读出一批数据保存在自己的buffer中，然后再一点点（以时钟为节拍）传输到目的地</p>\n</li>\n<li><p>memory是目的地的时候，先将源的数据传输到自己的buffer中，当累计到一定数量之后，再一次性写入memory</p>\n<p>DMA控制器内部可缓存的数据量的大小称作burst size</p>\n</li>\n</ul>\n<p>&emsp;&emsp; 一般的DMA控制器只能访问物理地址连续的内存，但在有些场景下，我们只有一些物理地址不连续的内存块，需要DMA把这些内存块的数据搬移到别处，这种场景称为scatter-gather。</p>\n<p>&emsp;&emsp;实现scatter-gather也有两种方式，一种是在DMA核心层提供scatter-gather的能力，用软件去模拟。这种方式需要先将内存块的数据搬移到一个连续的地址，然后让DMA从这个新地址开始搬移。另一种是DMA控制器本身支持scatter-gather，直接配置控制器即可，在软件上需要准备一个table或link-list，这里不继续深入分析。</p>\n<h3 id=\"五代码分析\"><a href=\"#五代码分析\" class=\"headerlink\" title=\"五代码分析\"></a>五代码分析</h3><p>&emsp;&emsp;linux内核版本4.4.19，分析的方向为自底向上，从最底层架构相关到DMA驱动最后到其他驱动调用DMA接口</p>\n<h4 id=\"5-1-架构相关\"><a href=\"#5-1-架构相关\" class=\"headerlink\" title=\"5.1 架构相关\"></a>5.1 架构相关</h4><p>&emsp;&emsp;在DMA相关的操作中，有关架构的操作和系统初始化是先于设备初始化的，系统初始化阶段会完成底层架构操作与base层的绑定，具体流程大致为</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875687/samples/DMA/dma_seq_arch_gse1vd.png\" alt=\"dma_seq_arch\" style=\"zoom: 25%;\"></p>\n<p>&emsp;&emsp;其中，在初始化过程中就会完成DMA操作的定义，主要是完成DMA控制器与架构相关操作的实现，通过上层的调用能够执行最底层的DMA操作，当在驱动中去调用DMA的接口函数时，则直接调用与底层架构相关的函数接口，完成所需动作，具体函数调用流程为：</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875688/samples/DMA/func_seq_xkxvvq.png\" alt=\"func_seq\"></p>\n<p>&emsp;&emsp;这个过程主要是实现最底层的DMA操作，其中最主要的就是arm_dma_ops结构体的实现和注册</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921145912242_hhyelf.png\" alt=\"image-20200921145912242\"></p>\n<p>&emsp;&emsp;先分析arm_dma_alloc函数，它主要是获取DMA所需的buffer，这里需要先声明一些关于页表的类型和操作，所有的物理页面都是4k对齐的，因此所有表项的地址只需要高20位，而低12位则用于记录页面的状态信息和访问权限，即pgprot_t类型。</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921150114291_nijvbe.png\" alt=\"image-20200921150114291\"></p>\n<p>&emsp;&emsp;这里主要是执行第二个函数__dma_alloc，根据设备的不同，所分配的页面位置和页面类型也是不同的，如果只是普通的分配页面则执行simple_buffer的分配，如果是CMA内存区域则直接从所保留的内存区域分配页面，CMA的分析参考上一篇，如果是流式DMA buffer则和普通的页面分配是一样的，还有一种从pool中分配页面和remap页面，暂不分析其用途</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921155220167_vziqns.png\" alt=\"image-20200921155220167\"></p>\n<p>&emsp;&emsp;我们这里是流式DMA，所以所分配的buffer是通过__alloc_simple_buffer函数，传入的参数分别为设备节点、buffer大小、页面标志，__alloc_simple_buffer则继续向下调用__dma_alloc_buffer，其最终通过底层页分配器的接口–alloc_pages实现buffer的分配</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200921161715546_oett5j.png\" alt=\"image-20200921161715546\"></p>\n<p>&emsp;&emsp;页分配器的工作原理后续再分析，其他函数的实现也暂不继续分析</p>\n<h4 id=\"5-2-DMA驱动\"><a href=\"#5-2-DMA驱动\" class=\"headerlink\" title=\"5.2 DMA驱动\"></a>5.2 DMA驱动</h4><p>&emsp;&emsp;首先看DMA对应在设备树中的节点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">\t\t\tsdma_xbar: dma-router@b78 &#123;</span><br><span class=\"line\">\t\t\t\tcompatible = <span class=\"string\">\"ti,dra7-dma-crossbar\"</span>;</span><br><span class=\"line\">\t\t\t\treg = &lt;<span class=\"number\">0xb78</span> <span class=\"number\">0xfc</span>&gt;;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">#dma-cells = <span class=\"meta-string\">&lt;1&gt;;</span></span></span><br><span class=\"line\">\t\t\t\tdma-requests = &lt;<span class=\"number\">205</span>&gt;;</span><br><span class=\"line\">\t\t\t\tti,dma-safe-<span class=\"built_in\">map</span> = &lt;<span class=\"number\">0</span>&gt;;</span><br><span class=\"line\">\t\t\t\tdma-masters = &lt;&amp;sdma&gt;;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tedma_xbar: dma-router@c78 &#123;</span><br><span class=\"line\">\t\t\t\tcompatible = <span class=\"string\">\"ti,dra7-dma-crossbar\"</span>;</span><br><span class=\"line\">\t\t\t\treg = &lt;<span class=\"number\">0xc78</span> <span class=\"number\">0x7c</span>&gt;;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">#dma-cells = <span class=\"meta-string\">&lt;2&gt;;</span></span></span><br><span class=\"line\">\t\t\t\tdma-requests = &lt;<span class=\"number\">204</span>&gt;;</span><br><span class=\"line\">\t\t\t\tti,dma-safe-<span class=\"built_in\">map</span> = &lt;<span class=\"number\">0</span>&gt;;</span><br><span class=\"line\">\t\t\t\tdma-masters = &lt;&amp;edma&gt;;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\">\tsdma: dma-controller@<span class=\"number\">4</span>a056000 &#123;</span><br><span class=\"line\">\t\tcompatible = <span class=\"string\">\"ti,omap4430-sdma\"</span>;</span><br><span class=\"line\">\t\treg = &lt;<span class=\"number\">0x4a056000</span> <span class=\"number\">0x1000</span>&gt;;</span><br><span class=\"line\">\t\tinterrupts = &lt;GIC_SPI <span class=\"number\">7</span> IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class=\"line\">\t\t\t     &lt;GIC_SPI <span class=\"number\">8</span> IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class=\"line\">\t\t\t     &lt;GIC_SPI <span class=\"number\">9</span> IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class=\"line\">\t\t\t     &lt;GIC_SPI <span class=\"number\">10</span> IRQ_TYPE_LEVEL_HIGH&gt;;</span><br><span class=\"line\">\t\t<span class=\"meta\">#dma-cells = <span class=\"meta-string\">&lt;1&gt;;</span></span></span><br><span class=\"line\">\t\tdma-channels = &lt;<span class=\"number\">32</span>&gt;;</span><br><span class=\"line\">\t\tdma-requests = &lt;<span class=\"number\">127</span>&gt;;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tedma: edma@<span class=\"number\">43300000</span> &#123;</span><br><span class=\"line\">\t\tcompatible = <span class=\"string\">\"ti,edma3-tpcc\"</span>;</span><br><span class=\"line\">\t\tti,hwmods = <span class=\"string\">\"tpcc\"</span>;</span><br><span class=\"line\">\t\treg = &lt;<span class=\"number\">0x43300000</span> <span class=\"number\">0x100000</span>&gt;;</span><br><span class=\"line\">\t\treg-names = <span class=\"string\">\"edma3_cc\"</span>;</span><br><span class=\"line\">\t\tinterrupts = &lt;GIC_SPI <span class=\"number\">361</span> IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class=\"line\">\t\t\t     &lt;GIC_SPI <span class=\"number\">360</span> IRQ_TYPE_LEVEL_HIGH&gt;,</span><br><span class=\"line\">\t\t\t     &lt;GIC_SPI <span class=\"number\">359</span> IRQ_TYPE_LEVEL_HIGH&gt;;</span><br><span class=\"line\">\t\tinterrupt-names = <span class=\"string\">\"edma3_ccint\"</span>, <span class=\"string\">\"emda3_mperr\"</span>,</span><br><span class=\"line\">\t\t\t\t  <span class=\"string\">\"edma3_ccerrint\"</span>;</span><br><span class=\"line\">\t\tdma-requests = &lt;<span class=\"number\">64</span>&gt;;</span><br><span class=\"line\">\t\t<span class=\"meta\">#dma-cells = <span class=\"meta-string\">&lt;2&gt;;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tti,tptcs = &lt;&amp;edma_tptc0 <span class=\"number\">7</span>&gt;, &lt;&amp;edma_tptc1 <span class=\"number\">0</span>&gt;;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">...</span><br><span class=\"line\">       uart1: serial@<span class=\"number\">4806</span>a000 &#123;</span><br><span class=\"line\">\t\tcompatible = <span class=\"string\">\"ti,dra742-uart\"</span>, <span class=\"string\">\"ti,omap4-uart\"</span>;</span><br><span class=\"line\">\t\treg = &lt;<span class=\"number\">0x4806a000</span> <span class=\"number\">0x100</span>&gt;;</span><br><span class=\"line\">\t\tinterrupts-extended = &lt;&amp;crossbar_mpu GIC_SPI <span class=\"number\">67</span> IRQ_TYPE_LEVEL_HIGH&gt;;</span><br><span class=\"line\">\t\tti,hwmods = <span class=\"string\">\"uart1\"</span>;</span><br><span class=\"line\">\t\tclock-frequency = &lt;<span class=\"number\">48000000</span>&gt;;</span><br><span class=\"line\">\t\tstatus = <span class=\"string\">\"disabled\"</span>;</span><br><span class=\"line\">\t\tdmas = &lt;&amp;edma_xbar <span class=\"number\">49</span> <span class=\"number\">0</span>&gt;, &lt;&amp;edma_xbar <span class=\"number\">50</span> <span class=\"number\">0</span>&gt;;</span><br><span class=\"line\">\t\tdma-names = <span class=\"string\">\"tx\"</span>, <span class=\"string\">\"rx\"</span>;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在设备树中如果一个设备可以利用DMA传输，只需要在设备节点中加入dmas属性，并声明所使用的DMA控制器以及channel编号，例如uart1中所使用的edma 49和50号channel。</p>\n<p>&emsp;&emsp;使用DMA设备有很多，为了方便管理和使用，同时也是为了利用内核中现有的驱动框架，DMA驱动的实现也是标准的总线-设备-驱动模型，在设备驱动模型中还有隐藏在幕后的kobject、class和kset，每一个kobject对应sys文件系统里的一个目录，其parent指针将形成一个树状分层结构，class则是抽象设备的高层视图，描述的是设备的集合，不包含同类型的设备的底层实现细节，kset则是kobject的顶层容器类</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/device_model-1600679671585_rn5dts.png\" alt=\"device_model\"></p>\n<p>&emsp;&emsp;在drivers/dma/目录中与DMA驱动相关的文件主要有dmaengine.c、edma.c、of-dma.c、omap-dma.c、ti-dma-crossbar.c、virt-dma.c，dmaengine.c是整个DMA驱动的最上层入口，在这里实现了DMA驱动模型，即上面的一些结构，还抽象了一个dma_bus总线，初始化了一个pool。omap-dma.c和edma.c分别对应SOC上面的System DMA和Enhanced DMA的驱动程序，of-dma.c实现了基于DMA的一些设备树操作，ti-dma-crossbar.c则是dma-crossbar的驱动程序，virt-dma.c对应虚拟channel。</p>\n<p>&emsp;&emsp;首先是dmaengine.c，主要是去注册创建一个pool，这个pool是通过slab分配器实现的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">dmaengine_init_unmap_pool</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ARRAY_SIZE(unmap_pool); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dmaengine_unmap_pool</span> *<span class=\"title\">p</span> = &amp;<span class=\"title\">unmap_pool</span>[<span class=\"title\">i</span>];</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">size_t</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsize = <span class=\"keyword\">sizeof</span>(struct dmaengine_unmap_data) +</span><br><span class=\"line\">\t\t       <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">dma_addr_t</span>) * p-&gt;size;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* slab分配器接口，以后分析 */</span></span><br><span class=\"line\">\t\tp-&gt;cache = kmem_cache_create(p-&gt;name, size, <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\t\t     SLAB_HWCACHE_ALIGN, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!p-&gt;cache)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">/* slab分配器接口，以后分析 */</span></span><br><span class=\"line\">\t\tp-&gt;pool = mempool_create_slab_pool(<span class=\"number\">1</span>, p-&gt;cache);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!p-&gt;pool)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (i == ARRAY_SIZE(unmap_pool))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdmaengine_destroy_unmap_pool();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后是omap-dma.c，这里是dma驱动的具体实现，其中主要是probe函数，当在dma-bus总线上匹配到dma设备就会执行probe函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">omap_dma_probe</span><span class=\"params\">(struct platform_device *pdev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">omap_dmadev</span> *<span class=\"title\">od</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">resource</span> *<span class=\"title\">res</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> rc, i, irq;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 为omap_dmadev结构体申请内存 */</span></span><br><span class=\"line\">\tod = devm_kzalloc(&amp;pdev-&gt;dev, <span class=\"keyword\">sizeof</span>(*od), GFP_KERNEL);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!od)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 获取内存资源 */</span></span><br><span class=\"line\">\tres = platform_get_resource(pdev, IORESOURCE_MEM, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tod-&gt;base = devm_ioremap_resource(&amp;pdev-&gt;dev, res);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (IS_ERR(od-&gt;base))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PTR_ERR(od-&gt;base);</span><br><span class=\"line\"></span><br><span class=\"line\">\tod-&gt;plat = omap_get_plat_info();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!od-&gt;plat)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -EPROBE_DEFER;</span><br><span class=\"line\">\t<span class=\"comment\">/* 这里都是配置od对象 */</span></span><br><span class=\"line\">\tod-&gt;reg_map = od-&gt;plat-&gt;reg_map;</span><br><span class=\"line\">\tdma_cap_set(DMA_SLAVE, od-&gt;ddev.cap_mask);</span><br><span class=\"line\">\tdma_cap_set(DMA_CYCLIC, od-&gt;ddev.cap_mask);</span><br><span class=\"line\">\tdma_cap_set(DMA_MEMCPY, od-&gt;ddev.cap_mask);</span><br><span class=\"line\">\tod-&gt;ddev.device_alloc_chan_resources = omap_dma_alloc_chan_resources;</span><br><span class=\"line\">\tod-&gt;ddev.device_free_chan_resources = omap_dma_free_chan_resources;</span><br><span class=\"line\">\tod-&gt;ddev.device_tx_status = omap_dma_tx_status;</span><br><span class=\"line\">\tod-&gt;ddev.device_issue_pending = omap_dma_issue_pending;</span><br><span class=\"line\">\tod-&gt;ddev.device_prep_slave_sg = omap_dma_prep_slave_sg;</span><br><span class=\"line\">\tod-&gt;ddev.device_prep_dma_cyclic = omap_dma_prep_dma_cyclic;</span><br><span class=\"line\">\tod-&gt;ddev.device_prep_dma_memcpy = omap_dma_prep_dma_memcpy;</span><br><span class=\"line\">\tod-&gt;ddev.device_config = omap_dma_slave_config;</span><br><span class=\"line\">\tod-&gt;ddev.device_pause = omap_dma_pause;</span><br><span class=\"line\">\tod-&gt;ddev.device_resume = omap_dma_resume;</span><br><span class=\"line\">\tod-&gt;ddev.device_terminate_all = omap_dma_terminate_all;</span><br><span class=\"line\">\tod-&gt;ddev.device_synchronize = omap_dma_synchronize;</span><br><span class=\"line\">\tod-&gt;ddev.src_addr_widths = OMAP_DMA_BUSWIDTHS;</span><br><span class=\"line\">\tod-&gt;ddev.dst_addr_widths = OMAP_DMA_BUSWIDTHS;</span><br><span class=\"line\">\tod-&gt;ddev.directions = BIT(DMA_DEV_TO_MEM) | BIT(DMA_MEM_TO_DEV);</span><br><span class=\"line\">\tod-&gt;ddev.residue_granularity = DMA_RESIDUE_GRANULARITY_BURST;</span><br><span class=\"line\">\tod-&gt;ddev.dev = &amp;pdev-&gt;dev;</span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;od-&gt;ddev.channels);</span><br><span class=\"line\">\tspin_lock_init(&amp;od-&gt;lock);</span><br><span class=\"line\">\tspin_lock_init(&amp;od-&gt;irq_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">\tod-&gt;dma_requests = OMAP_SDMA_REQUESTS;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pdev-&gt;dev.of_node &amp;&amp; of_property_read_u32(pdev-&gt;dev.of_node,</span><br><span class=\"line\">\t\t\t\t\t\t      <span class=\"string\">\"dma-requests\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t      &amp;od-&gt;dma_requests)) &#123;</span><br><span class=\"line\">\t\tdev_info(&amp;pdev-&gt;dev,</span><br><span class=\"line\">\t\t\t <span class=\"string\">\"Missing dma-requests property, using %u.\\n\"</span>,</span><br><span class=\"line\">\t\t\t OMAP_SDMA_REQUESTS);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; OMAP_SDMA_CHANNELS; i++) &#123;</span><br><span class=\"line\">\t\trc = omap_dma_chan_init(od);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rc) &#123;</span><br><span class=\"line\">\t\t\tomap_dma_free(od);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rc;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 从设备树中获取中断 */</span></span><br><span class=\"line\">\tirq = platform_get_irq(pdev, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (irq &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tdev_info(&amp;pdev-&gt;dev, <span class=\"string\">\"failed to get L1 IRQ: %d\\n\"</span>, irq);</span><br><span class=\"line\">\t\tod-&gt;legacy = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Disable all interrupts */</span></span><br><span class=\"line\">\t\tod-&gt;irq_enable_mask = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tomap_dma_glbl_write(od, IRQENABLE_L1, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trc = devm_request_irq(&amp;pdev-&gt;dev, irq, omap_dma_irq,</span><br><span class=\"line\">\t\t\t\t      IRQF_SHARED, <span class=\"string\">\"omap-dma-engine\"</span>, od);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rc)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> rc;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tod-&gt;ddev.filter.<span class=\"built_in\">map</span> = od-&gt;plat-&gt;slave_map;</span><br><span class=\"line\">\tod-&gt;ddev.filter.mapcnt = od-&gt;plat-&gt;slavecnt;</span><br><span class=\"line\">\tod-&gt;ddev.filter.fn = omap_dma_filter_fn;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 注册OMAP-DMA设备 */</span></span><br><span class=\"line\">\trc = dma_async_device_register(&amp;od-&gt;ddev);</span><br><span class=\"line\"></span><br><span class=\"line\">\tplatform_set_drvdata(pdev, od);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pdev-&gt;dev.of_node) &#123;</span><br><span class=\"line\">\t\tomap_dma_info.dma_cap = od-&gt;ddev.cap_mask;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* Device-tree DMA controller registration */</span></span><br><span class=\"line\">\t\trc = of_dma_controller_register(pdev-&gt;dev.of_node,</span><br><span class=\"line\">\t\t\t\tof_dma_simple_xlate, &amp;omap_dma_info);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rc) &#123;</span><br><span class=\"line\">\t\t\tpr_warn(<span class=\"string\">\"OMAP-DMA: failed to register DMA controller\\n\"</span>);</span><br><span class=\"line\">\t\t\tdma_async_device_unregister(&amp;od-&gt;ddev);</span><br><span class=\"line\">\t\t\tomap_dma_free(od);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdev_info(&amp;pdev-&gt;dev, <span class=\"string\">\"OMAP DMA engine driver\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;edma驱动中涉及到edma-tptc和edma的注册，主体还是edma的probe函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">edma_probe</span><span class=\"params\">(struct platform_device *pdev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edma_soc_info</span>\t*<span class=\"title\">info</span> = <span class=\"title\">pdev</span>-&gt;<span class=\"title\">dev</span>.<span class=\"title\">platform_data</span>;</span></span><br><span class=\"line\">\ts8\t\t\t(*queue_priority_mapping)[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t\ti, off, ln;</span><br><span class=\"line\">\tconst s16\t\t(*rsv_slots)[2];</span><br><span class=\"line\">\tconst s16\t\t(*xbar_chans)[2];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>\t\t\tirq;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>\t\t\t*irq_name;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">resource</span>\t\t*<span class=\"title\">mem</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span>\t*<span class=\"title\">node</span> = <span class=\"title\">pdev</span>-&gt;<span class=\"title\">dev</span>.<span class=\"title\">of_node</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device</span>\t\t*<span class=\"title\">dev</span> = &amp;<span class=\"title\">pdev</span>-&gt;<span class=\"title\">dev</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edma_cc</span>\t\t*<span class=\"title\">ecc</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">bool</span>\t\t\tlegacy_mode = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> *<span class=\"title\">match</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmatch = of_match_node(edma_of_ids, node);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (match &amp;&amp; (u32)match-&gt;data == EDMA_BINDING_TPCC)</span><br><span class=\"line\">\t\t\tlegacy_mode = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tinfo = edma_setup_info_from_dt(dev, legacy_mode);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (IS_ERR(info)) &#123;</span><br><span class=\"line\">\t\t\tdev_err(dev, <span class=\"string\">\"failed to get DT data\\n\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> PTR_ERR(info);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpm_runtime_enable(dev);</span><br><span class=\"line\">\tret = pm_runtime_get_sync(dev);</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = dma_set_mask_and_coherent(dev, DMA_BIT_MASK(<span class=\"number\">32</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc = devm_kzalloc(dev, <span class=\"keyword\">sizeof</span>(*ecc), GFP_KERNEL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;dev = dev;</span><br><span class=\"line\">\tecc-&gt;id = pdev-&gt;id;</span><br><span class=\"line\">\tecc-&gt;legacy_mode = legacy_mode;</span><br><span class=\"line\">\t<span class=\"comment\">/* When booting with DT the pdev-&gt;id is -1 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ecc-&gt;id &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tecc-&gt;id = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 同样获取设备的内存资源 */</span></span><br><span class=\"line\">\tmem = platform_get_resource_byname(pdev, IORESOURCE_MEM, <span class=\"string\">\"edma3_cc\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;base = devm_ioremap_resource(dev, mem);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (IS_ERR(ecc-&gt;base))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PTR_ERR(ecc-&gt;base);</span><br><span class=\"line\"></span><br><span class=\"line\">\tplatform_set_drvdata(pdev, ecc);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 从硬件IP中获取edma的配置参数 */</span></span><br><span class=\"line\">\tret = edma_setup_from_hw(dev, info, ecc);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 基于硬件IP参数申请内存 */</span></span><br><span class=\"line\">\tecc-&gt;slave_chans = devm_kcalloc(dev, ecc-&gt;num_channels,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">sizeof</span>(*ecc-&gt;slave_chans), GFP_KERNEL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;slot_inuse = devm_kcalloc(dev, BITS_TO_LONGS(ecc-&gt;num_slots),</span><br><span class=\"line\">\t\t\t\t       <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>), GFP_KERNEL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;default_queue = info-&gt;default_queue;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ecc-&gt;num_slots; i++)</span><br><span class=\"line\">\t\tedma_write_slot(ecc, i, &amp;dummy_paramset);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (info-&gt;rsv) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Set the reserved slots in inuse list */</span></span><br><span class=\"line\">\t\trsv_slots = info-&gt;rsv-&gt;rsv_slots;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rsv_slots) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; rsv_slots[i][<span class=\"number\">0</span>] != <span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\toff = rsv_slots[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\tln = rsv_slots[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tset_bits(off, ln, ecc-&gt;slot_inuse);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 清除xbar在unused链表中的通道映射 */</span></span><br><span class=\"line\">\txbar_chans = info-&gt;xbar_chans;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (xbar_chans) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; xbar_chans[i][<span class=\"number\">1</span>] != <span class=\"number\">-1</span>; i++) &#123;</span><br><span class=\"line\">\t\t\toff = xbar_chans[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 获取中断 */</span></span><br><span class=\"line\">\tirq = platform_get_irq_byname(pdev, <span class=\"string\">\"edma3_ccint\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (irq &lt; <span class=\"number\">0</span> &amp;&amp; node)</span><br><span class=\"line\">\t\tirq = irq_of_parse_and_map(node, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tirq = platform_get_irq_byname(pdev, <span class=\"string\">\"edma3_ccerrint\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (irq &lt; <span class=\"number\">0</span> &amp;&amp; node)</span><br><span class=\"line\">\t\tirq = irq_of_parse_and_map(node, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (irq &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tirq_name = devm_kasprintf(dev, GFP_KERNEL, <span class=\"string\">\"%s_ccerrint\"</span>,</span><br><span class=\"line\">\t\t\t\t\t  dev_name(dev));</span><br><span class=\"line\">\t\tret = devm_request_irq(dev, irq, dma_ccerr_handler, <span class=\"number\">0</span>, irq_name,</span><br><span class=\"line\">\t\t\t\t       ecc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">\t\t\tdev_err(dev, <span class=\"string\">\"CCERRINT (%d) failed --&gt; %d\\n\"</span>, irq, ret);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;dummy_slot = edma_alloc_slot(ecc, EDMA_SLOT_ANY);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ecc-&gt;dummy_slot &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tdev_err(dev, <span class=\"string\">\"Can't allocate PaRAM dummy slot\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ecc-&gt;dummy_slot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tqueue_priority_mapping = info-&gt;queue_priority_mapping;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 事件队列优先映射 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; queue_priority_mapping[i][<span class=\"number\">0</span>] != <span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">\t\tedma_assign_priority_to_queue(ecc, queue_priority_mapping[i][<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\t\t\t      queue_priority_mapping[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ecc-&gt;num_region; i++) &#123;</span><br><span class=\"line\">\t\tedma_write_array2(ecc, EDMA_DRAE, i, <span class=\"number\">0</span>, <span class=\"number\">0x0</span>);</span><br><span class=\"line\">\t\tedma_write_array2(ecc, EDMA_DRAE, i, <span class=\"number\">1</span>, <span class=\"number\">0x0</span>);</span><br><span class=\"line\">\t\tedma_write_array(ecc, EDMA_QRAE, i, <span class=\"number\">0x0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tecc-&gt;info = info;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 初始化dma设备和channels */</span></span><br><span class=\"line\">\tedma_dma_init(ecc, legacy_mode);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; ecc-&gt;num_channels; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 分配所有的channels到默认的队列 */</span></span><br><span class=\"line\">\t\tedma_assign_channel_eventq(&amp;ecc-&gt;slave_chans[i],</span><br><span class=\"line\">\t\t\t\t\t   info-&gt;default_queue);</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 设置虚拟slot的入口位置 */</span></span><br><span class=\"line\">\t\tedma_set_chmap(&amp;ecc-&gt;slave_chans[i], ecc-&gt;dummy_slot);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tecc-&gt;dma_slave.filter.<span class=\"built_in\">map</span> = info-&gt;slave_map;</span><br><span class=\"line\">\tecc-&gt;dma_slave.filter.mapcnt = info-&gt;slavecnt;</span><br><span class=\"line\">\tecc-&gt;dma_slave.filter.fn = edma_filter_fn;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = dma_async_device_register(&amp;ecc-&gt;dma_slave);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">\t\tdev_err(dev, <span class=\"string\">\"slave ddev registration failed (%d)\\n\"</span>, ret);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> err_reg1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ecc-&gt;dma_memcpy) &#123;</span><br><span class=\"line\">\t\tret = dma_async_device_register(ecc-&gt;dma_memcpy);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">\t\t\tdev_err(dev, <span class=\"string\">\"memcpy ddev registration failed (%d)\\n\"</span>,</span><br><span class=\"line\">\t\t\t\tret);</span><br><span class=\"line\">\t\t\tdma_async_device_unregister(&amp;ecc-&gt;dma_slave);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> err_reg1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node)</span><br><span class=\"line\">\t\tof_dma_controller_register(node, of_edma_xlate, ecc);</span><br><span class=\"line\"></span><br><span class=\"line\">\tdev_info(dev, <span class=\"string\">\"TI EDMA DMA engine driver\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">err_reg1:</span><br><span class=\"line\">\tedma_free_slot(ecc, ecc-&gt;dummy_slot);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;然后是ti-dma-crossbar.c，负责dma事件映射</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ti_dra7_xbar_probe</span><span class=\"params\">(struct platform_device *pdev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span> *<span class=\"title\">node</span> = <span class=\"title\">pdev</span>-&gt;<span class=\"title\">dev</span>.<span class=\"title\">of_node</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">of_device_id</span> *<span class=\"title\">match</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">device_node</span> *<span class=\"title\">dma_node</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ti_dra7_xbar_data</span> *<span class=\"title\">xbar</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">property</span> *<span class=\"title\">prop</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">resource</span> *<span class=\"title\">res</span>;</span></span><br><span class=\"line\">\tu32 safe_val;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> sz;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> __iomem *iomem;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!node)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENODEV;</span><br><span class=\"line\"></span><br><span class=\"line\">\txbar = devm_kzalloc(&amp;pdev-&gt;dev, <span class=\"keyword\">sizeof</span>(*xbar), GFP_KERNEL);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!xbar)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdma_node = of_parse_phandle(node, <span class=\"string\">\"dma-masters\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dma_node) &#123;</span><br><span class=\"line\">\t\tdev_err(&amp;pdev-&gt;dev, <span class=\"string\">\"Can't get DMA master node\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENODEV;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmatch = of_match_node(ti_dra7_master_match, dma_node);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!match) &#123;</span><br><span class=\"line\">\t\tdev_err(&amp;pdev-&gt;dev, <span class=\"string\">\"DMA master is not supported\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (of_property_read_u32(dma_node, <span class=\"string\">\"dma-requests\"</span>,</span><br><span class=\"line\">\t\t\t\t &amp;xbar-&gt;dma_requests)) &#123;</span><br><span class=\"line\">\t\tdev_info(&amp;pdev-&gt;dev,</span><br><span class=\"line\">\t\t\t <span class=\"string\">\"Missing XBAR output information, using %u.\\n\"</span>,</span><br><span class=\"line\">\t\t\t TI_DRA7_XBAR_OUTPUTS);</span><br><span class=\"line\">\t\txbar-&gt;dma_requests = TI_DRA7_XBAR_OUTPUTS;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tof_node_put(dma_node);</span><br><span class=\"line\"></span><br><span class=\"line\">\txbar-&gt;dma_inuse = devm_kcalloc(&amp;pdev-&gt;dev,</span><br><span class=\"line\">\t\t\t\t       BITS_TO_LONGS(xbar-&gt;dma_requests),</span><br><span class=\"line\">\t\t\t\t       <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>), GFP_KERNEL);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!xbar-&gt;dma_inuse)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (of_property_read_u32(node, <span class=\"string\">\"dma-requests\"</span>, &amp;xbar-&gt;xbar_requests)) &#123;</span><br><span class=\"line\">\t\tdev_info(&amp;pdev-&gt;dev,</span><br><span class=\"line\">\t\t\t <span class=\"string\">\"Missing XBAR input information, using %u.\\n\"</span>,</span><br><span class=\"line\">\t\t\t TI_DRA7_XBAR_INPUTS);</span><br><span class=\"line\">\t\txbar-&gt;xbar_requests = TI_DRA7_XBAR_INPUTS;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!of_property_read_u32(node, <span class=\"string\">\"ti,dma-safe-map\"</span>, &amp;safe_val))</span><br><span class=\"line\">\t\txbar-&gt;safe_val = (u16)safe_val;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tprop = of_find_property(node, <span class=\"string\">\"ti,reserved-dma-request-ranges\"</span>, &amp;sz);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (prop) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> pname[] = <span class=\"string\">\"ti,reserved-dma-request-ranges\"</span>;</span><br><span class=\"line\">\t\tu32 (*rsv_events)[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">size_t</span> nelm = sz / <span class=\"keyword\">sizeof</span>(*rsv_events);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!nelm)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trsv_events = kcalloc(nelm, <span class=\"keyword\">sizeof</span>(*rsv_events), GFP_KERNEL);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!rsv_events)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tret = of_property_read_u32_array(node, pname, (u32 *)rsv_events,</span><br><span class=\"line\">\t\t\t\t\t\t nelm * <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; nelm; i++) &#123;</span><br><span class=\"line\">\t\t\tti_dra7_xbar_reserve(rsv_events[i][<span class=\"number\">0</span>], rsv_events[i][<span class=\"number\">1</span>],</span><br><span class=\"line\">\t\t\t\t\t     xbar-&gt;dma_inuse);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tkfree(rsv_events);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres = platform_get_resource(pdev, IORESOURCE_MEM, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tiomem = devm_ioremap_resource(&amp;pdev-&gt;dev, res);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (IS_ERR(iomem))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> PTR_ERR(iomem);</span><br><span class=\"line\"></span><br><span class=\"line\">\txbar-&gt;iomem = iomem;</span><br><span class=\"line\"></span><br><span class=\"line\">\txbar-&gt;dmarouter.dev = &amp;pdev-&gt;dev;</span><br><span class=\"line\">\txbar-&gt;dmarouter.route_free = ti_dra7_xbar_free;</span><br><span class=\"line\">\txbar-&gt;dma_offset = (u32)match-&gt;data;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmutex_init(&amp;xbar-&gt;mutex);</span><br><span class=\"line\">\tplatform_set_drvdata(pdev, xbar);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Reset the crossbar */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; xbar-&gt;dma_requests; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!test_bit(i, xbar-&gt;dma_inuse))</span><br><span class=\"line\">\t\t\tti_dra7_xbar_write(xbar-&gt;iomem, i, xbar-&gt;safe_val);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = of_dma_router_register(node, ti_dra7_xbar_route_allocate,</span><br><span class=\"line\">\t\t\t\t     &amp;xbar-&gt;dmarouter);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Restore the defaults for the crossbar */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; xbar-&gt;dma_requests; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!test_bit(i, xbar-&gt;dma_inuse))</span><br><span class=\"line\">\t\t\t\tti_dra7_xbar_write(xbar-&gt;iomem, i, i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;最后是虚拟channel，在virt-dma.c文件中实现</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">vchan_init</span><span class=\"params\">(struct virt_dma_chan *vc, struct dma_device *dmadev)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tdma_cookie_init(&amp;vc-&gt;chan);</span><br><span class=\"line\"></span><br><span class=\"line\">\tspin_lock_init(&amp;vc-&gt;lock);</span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;vc-&gt;desc_allocated);</span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;vc-&gt;desc_submitted);</span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;vc-&gt;desc_issued);</span><br><span class=\"line\">\tINIT_LIST_HEAD(&amp;vc-&gt;desc_completed);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttasklet_init(&amp;vc-&gt;task, vchan_complete, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>)vc);</span><br><span class=\"line\"></span><br><span class=\"line\">\tvc-&gt;chan.device = dmadev;</span><br><span class=\"line\">\tlist_add_tail(&amp;vc-&gt;chan.device_node, &amp;dmadev-&gt;channels);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3-具体实例\"><a href=\"#5-3-具体实例\" class=\"headerlink\" title=\"5.3 具体实例\"></a>5.3 具体实例</h4><p>&emsp;&emsp;这里给出一个实际驱动中调用dma传输的一个例子，在cmem驱动中通过一致性dma接口分配了buffer，调用v7_dma_map_area函数实现cache的同步和dma传输</p>\n<p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1614875689/samples/DMA/image-20200923091128578_w4xg1t.png\" alt=\"image-20200923091128578\"></p>"},{"title":"hexo+Github搭建个人博客网站","date":"2019-04-16T11:23:22.000Z","_content":"### 搭建自己的博客网站\n\n<!-- more -->\n\n>准备阶段\n\n​\t\t首先，需要准备一个Github账号，直接注册即可。\n\n​\t\t安装好node.js 和 npm（只需到官网下载安装包即可，不同平台安装方法不一样），npm 会捆绑nodejs一起安装，具体看手册。\n\n​\t\t如果需要重定向域名，还需要去买一个域名，腾讯云阿里云都行，不需要可以不买，准备阶段就这些\n\n>Github创建博客站点仓库，用于存储网页相关文件\n\n​\t\t进入Github个人仓库，新建一个repo，注：不能随意命名，仓库名必须是  `Github账号的名字.github.io`，因为这是GitHub的一个开源项目，这样命名就是说明这个仓库用于保存你的网站文件（详情请自行参考GitHub），其他可不填\n\n>新建文件夹，安装hexo\n\n​\t\t新建一个文件夹并进入文件夹，用于本地网站文件存储，这里安装[hexo](https://hexo.io/docs/index.html)（开源博客框架）依赖上面安装的npm和node.js，右键打开power shell 或 Git Bash 或 cmd，`npm install -g hexo-cli\n`,等待安装成功，接着`hexo init`,`npm install`，一个博客网站就完成了（这里可能就是框架的作用，一个命令就搞定所有所需文件）\n\n>配置文件\n\n​\t\t打开文件根目录下的 _config.yml 文件，修改网站的信息，在power shell 或 Git Bash 或 cmd 中输入 `hexo g` 生成网站文件，`hexo s` 启动本地服务器可以在不联网的情况下查看网站。/themes/xxx这里的文件是主题相关的，修改之后需要将之前生成的网站文件清除掉，执行`hexo clean`，改完之后`hexo g`，一般主题都在GitHub上有说明怎么使用，具体配置参考其他博客，参考[主題](https://hexo.io/zh-tw/docs/themes.html)\n\n>部署网站\n\n​\t\t网站文件生成之后需要将网站文件传到GitHub那个刚刚建好的仓库之中，需要将本地的网站文件与Github仓库关联起来，需要将网站配置文件 _config.yml 中的deploy，修改为：\n```\ndeploy:\n  type: git\n  repo: git@github.com:GitHub账户名字/GitHub账户名字.github.io.git\n  branch: master\n```\n​\t\t注：这里repo的链接决定上传到GitHub的方式，ssh方式更快且不需要每次都输入ID和密码，然后在主目录中输入 `npm install hexo-deployer-git --save` ，重新执行 `hexo clean` ， `hexo g` ，然后执行 `hexo d`部署网站文件，hexo会自动将网文件上传到GitHub中，然后访问`GitHub账户名字.github.io.git`这个站点就能访问自己的网站\n\n>更改域名\n\n​\t\t域名更改需要在/source/目录下新建一个名为 CNAME 的文件（是CNAME不是GNAME），输入你的域名（最好不带www.，这样无论带不带www.博客都能访问），并将域名解析与你的GitHub库关联起来（域名解析需要到一些平台，本人使用的[腾讯云](https://cloud.tencent.com/document/product/302/3446)，这里不过多赘述），保存即可\n\n>写博客\n\n​\t\t主目录执行`hexo n \"博客名字\"`，新建了一篇博客，在`顶层目录/source/_posts/`目录下就会生成你的博客文件，之后才真正进行你的创作，一个好用的Markdown编辑器（我用的是Typora）可以提升体验（Markdowm语法请自行Google），博客书写遵循Markdown语法，是一种很高效的东东，可以学习一下，写完重新生成，部署，大功告成\n\n>后续可以自定义主题样式以及一些功能\n\n\n​\t\t笔者博客：[My Blog](https://www.jian1024.cn/)\n","source":"_posts/hexo-Github搭建个人博客.md","raw":"---\ntitle: hexo+Github搭建个人博客网站\ndate: 2019-04-16 19:23:22\ncategories: [博客]\ntags: [hexo,Github,博客]\n---\n### 搭建自己的博客网站\n\n<!-- more -->\n\n>准备阶段\n\n​\t\t首先，需要准备一个Github账号，直接注册即可。\n\n​\t\t安装好node.js 和 npm（只需到官网下载安装包即可，不同平台安装方法不一样），npm 会捆绑nodejs一起安装，具体看手册。\n\n​\t\t如果需要重定向域名，还需要去买一个域名，腾讯云阿里云都行，不需要可以不买，准备阶段就这些\n\n>Github创建博客站点仓库，用于存储网页相关文件\n\n​\t\t进入Github个人仓库，新建一个repo，注：不能随意命名，仓库名必须是  `Github账号的名字.github.io`，因为这是GitHub的一个开源项目，这样命名就是说明这个仓库用于保存你的网站文件（详情请自行参考GitHub），其他可不填\n\n>新建文件夹，安装hexo\n\n​\t\t新建一个文件夹并进入文件夹，用于本地网站文件存储，这里安装[hexo](https://hexo.io/docs/index.html)（开源博客框架）依赖上面安装的npm和node.js，右键打开power shell 或 Git Bash 或 cmd，`npm install -g hexo-cli\n`,等待安装成功，接着`hexo init`,`npm install`，一个博客网站就完成了（这里可能就是框架的作用，一个命令就搞定所有所需文件）\n\n>配置文件\n\n​\t\t打开文件根目录下的 _config.yml 文件，修改网站的信息，在power shell 或 Git Bash 或 cmd 中输入 `hexo g` 生成网站文件，`hexo s` 启动本地服务器可以在不联网的情况下查看网站。/themes/xxx这里的文件是主题相关的，修改之后需要将之前生成的网站文件清除掉，执行`hexo clean`，改完之后`hexo g`，一般主题都在GitHub上有说明怎么使用，具体配置参考其他博客，参考[主題](https://hexo.io/zh-tw/docs/themes.html)\n\n>部署网站\n\n​\t\t网站文件生成之后需要将网站文件传到GitHub那个刚刚建好的仓库之中，需要将本地的网站文件与Github仓库关联起来，需要将网站配置文件 _config.yml 中的deploy，修改为：\n```\ndeploy:\n  type: git\n  repo: git@github.com:GitHub账户名字/GitHub账户名字.github.io.git\n  branch: master\n```\n​\t\t注：这里repo的链接决定上传到GitHub的方式，ssh方式更快且不需要每次都输入ID和密码，然后在主目录中输入 `npm install hexo-deployer-git --save` ，重新执行 `hexo clean` ， `hexo g` ，然后执行 `hexo d`部署网站文件，hexo会自动将网文件上传到GitHub中，然后访问`GitHub账户名字.github.io.git`这个站点就能访问自己的网站\n\n>更改域名\n\n​\t\t域名更改需要在/source/目录下新建一个名为 CNAME 的文件（是CNAME不是GNAME），输入你的域名（最好不带www.，这样无论带不带www.博客都能访问），并将域名解析与你的GitHub库关联起来（域名解析需要到一些平台，本人使用的[腾讯云](https://cloud.tencent.com/document/product/302/3446)，这里不过多赘述），保存即可\n\n>写博客\n\n​\t\t主目录执行`hexo n \"博客名字\"`，新建了一篇博客，在`顶层目录/source/_posts/`目录下就会生成你的博客文件，之后才真正进行你的创作，一个好用的Markdown编辑器（我用的是Typora）可以提升体验（Markdowm语法请自行Google），博客书写遵循Markdown语法，是一种很高效的东东，可以学习一下，写完重新生成，部署，大功告成\n\n>后续可以自定义主题样式以及一些功能\n\n\n​\t\t笔者博客：[My Blog](https://www.jian1024.cn/)\n","slug":"hexo-Github搭建个人博客","published":1,"updated":"2021-01-21T14:50:56.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8yb0009q5dif0klx7bn","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h3 id=\"搭建自己的博客网站\"><a href=\"#搭建自己的博客网站\" class=\"headerlink\" title=\"搭建自己的博客网站\"></a>搭建自己的博客网站</h3><a id=\"more\"></a>\n<blockquote>\n<p>准备阶段</p>\n</blockquote>\n<p>​        首先，需要准备一个Github账号，直接注册即可。</p>\n<p>​        安装好node.js 和 npm（只需到官网下载安装包即可，不同平台安装方法不一样），npm 会捆绑nodejs一起安装，具体看手册。</p>\n<p>​        如果需要重定向域名，还需要去买一个域名，腾讯云阿里云都行，不需要可以不买，准备阶段就这些</p>\n<blockquote>\n<p>Github创建博客站点仓库，用于存储网页相关文件</p>\n</blockquote>\n<p>​        进入Github个人仓库，新建一个repo，注：不能随意命名，仓库名必须是  <code>Github账号的名字.github.io</code>，因为这是GitHub的一个开源项目，这样命名就是说明这个仓库用于保存你的网站文件（详情请自行参考GitHub），其他可不填</p>\n<blockquote>\n<p>新建文件夹，安装hexo</p>\n</blockquote>\n<p>​        新建一个文件夹并进入文件夹，用于本地网站文件存储，这里安装<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo</a>（开源博客框架）依赖上面安装的npm和node.js，右键打开power shell 或 Git Bash 或 cmd，<code>npm install -g hexo-cli</code>,等待安装成功，接着<code>hexo init</code>,<code>npm install</code>，一个博客网站就完成了（这里可能就是框架的作用，一个命令就搞定所有所需文件）</p>\n<blockquote>\n<p>配置文件</p>\n</blockquote>\n<p>​        打开文件根目录下的 _config.yml 文件，修改网站的信息，在power shell 或 Git Bash 或 cmd 中输入 <code>hexo g</code> 生成网站文件，<code>hexo s</code> 启动本地服务器可以在不联网的情况下查看网站。/themes/xxx这里的文件是主题相关的，修改之后需要将之前生成的网站文件清除掉，执行<code>hexo clean</code>，改完之后<code>hexo g</code>，一般主题都在GitHub上有说明怎么使用，具体配置参考其他博客，参考<a href=\"https://hexo.io/zh-tw/docs/themes.html\" target=\"_blank\" rel=\"noopener\">主題</a></p>\n<blockquote>\n<p>部署网站</p>\n</blockquote>\n<p>​        网站文件生成之后需要将网站文件传到GitHub那个刚刚建好的仓库之中，需要将本地的网站文件与Github仓库关联起来，需要将网站配置文件 _config.yml 中的deploy，修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:GitHub账户名字/GitHub账户名字.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>​        注：这里repo的链接决定上传到GitHub的方式，ssh方式更快且不需要每次都输入ID和密码，然后在主目录中输入 <code>npm install hexo-deployer-git --save</code> ，重新执行 <code>hexo clean</code> ， <code>hexo g</code> ，然后执行 <code>hexo d</code>部署网站文件，hexo会自动将网文件上传到GitHub中，然后访问<code>GitHub账户名字.github.io.git</code>这个站点就能访问自己的网站</p>\n<blockquote>\n<p>更改域名</p>\n</blockquote>\n<p>​        域名更改需要在/source/目录下新建一个名为 CNAME 的文件（是CNAME不是GNAME），输入你的域名（最好不带www.，这样无论带不带www.博客都能访问），并将域名解析与你的GitHub库关联起来（域名解析需要到一些平台，本人使用的<a href=\"https://cloud.tencent.com/document/product/302/3446\" target=\"_blank\" rel=\"noopener\">腾讯云</a>，这里不过多赘述），保存即可</p>\n<blockquote>\n<p>写博客</p>\n</blockquote>\n<p>​        主目录执行<code>hexo n &quot;博客名字&quot;</code>，新建了一篇博客，在<code>顶层目录/source/_posts/</code>目录下就会生成你的博客文件，之后才真正进行你的创作，一个好用的Markdown编辑器（我用的是Typora）可以提升体验（Markdowm语法请自行Google），博客书写遵循Markdown语法，是一种很高效的东东，可以学习一下，写完重新生成，部署，大功告成</p>\n<blockquote>\n<p>后续可以自定义主题样式以及一些功能</p>\n</blockquote>\n<p>​        笔者博客：<a href=\"https://www.jian1024.cn/\" target=\"_blank\" rel=\"noopener\">My Blog</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"搭建自己的博客网站\"><a href=\"#搭建自己的博客网站\" class=\"headerlink\" title=\"搭建自己的博客网站\"></a>搭建自己的博客网站</h3>","more":"<blockquote>\n<p>准备阶段</p>\n</blockquote>\n<p>​        首先，需要准备一个Github账号，直接注册即可。</p>\n<p>​        安装好node.js 和 npm（只需到官网下载安装包即可，不同平台安装方法不一样），npm 会捆绑nodejs一起安装，具体看手册。</p>\n<p>​        如果需要重定向域名，还需要去买一个域名，腾讯云阿里云都行，不需要可以不买，准备阶段就这些</p>\n<blockquote>\n<p>Github创建博客站点仓库，用于存储网页相关文件</p>\n</blockquote>\n<p>​        进入Github个人仓库，新建一个repo，注：不能随意命名，仓库名必须是  <code>Github账号的名字.github.io</code>，因为这是GitHub的一个开源项目，这样命名就是说明这个仓库用于保存你的网站文件（详情请自行参考GitHub），其他可不填</p>\n<blockquote>\n<p>新建文件夹，安装hexo</p>\n</blockquote>\n<p>​        新建一个文件夹并进入文件夹，用于本地网站文件存储，这里安装<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">hexo</a>（开源博客框架）依赖上面安装的npm和node.js，右键打开power shell 或 Git Bash 或 cmd，<code>npm install -g hexo-cli</code>,等待安装成功，接着<code>hexo init</code>,<code>npm install</code>，一个博客网站就完成了（这里可能就是框架的作用，一个命令就搞定所有所需文件）</p>\n<blockquote>\n<p>配置文件</p>\n</blockquote>\n<p>​        打开文件根目录下的 _config.yml 文件，修改网站的信息，在power shell 或 Git Bash 或 cmd 中输入 <code>hexo g</code> 生成网站文件，<code>hexo s</code> 启动本地服务器可以在不联网的情况下查看网站。/themes/xxx这里的文件是主题相关的，修改之后需要将之前生成的网站文件清除掉，执行<code>hexo clean</code>，改完之后<code>hexo g</code>，一般主题都在GitHub上有说明怎么使用，具体配置参考其他博客，参考<a href=\"https://hexo.io/zh-tw/docs/themes.html\" target=\"_blank\" rel=\"noopener\">主題</a></p>\n<blockquote>\n<p>部署网站</p>\n</blockquote>\n<p>​        网站文件生成之后需要将网站文件传到GitHub那个刚刚建好的仓库之中，需要将本地的网站文件与Github仓库关联起来，需要将网站配置文件 _config.yml 中的deploy，修改为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:GitHub账户名字/GitHub账户名字.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>​        注：这里repo的链接决定上传到GitHub的方式，ssh方式更快且不需要每次都输入ID和密码，然后在主目录中输入 <code>npm install hexo-deployer-git --save</code> ，重新执行 <code>hexo clean</code> ， <code>hexo g</code> ，然后执行 <code>hexo d</code>部署网站文件，hexo会自动将网文件上传到GitHub中，然后访问<code>GitHub账户名字.github.io.git</code>这个站点就能访问自己的网站</p>\n<blockquote>\n<p>更改域名</p>\n</blockquote>\n<p>​        域名更改需要在/source/目录下新建一个名为 CNAME 的文件（是CNAME不是GNAME），输入你的域名（最好不带www.，这样无论带不带www.博客都能访问），并将域名解析与你的GitHub库关联起来（域名解析需要到一些平台，本人使用的<a href=\"https://cloud.tencent.com/document/product/302/3446\" target=\"_blank\" rel=\"noopener\">腾讯云</a>，这里不过多赘述），保存即可</p>\n<blockquote>\n<p>写博客</p>\n</blockquote>\n<p>​        主目录执行<code>hexo n &quot;博客名字&quot;</code>，新建了一篇博客，在<code>顶层目录/source/_posts/</code>目录下就会生成你的博客文件，之后才真正进行你的创作，一个好用的Markdown编辑器（我用的是Typora）可以提升体验（Markdowm语法请自行Google），博客书写遵循Markdown语法，是一种很高效的东东，可以学习一下，写完重新生成，部署，大功告成</p>\n<blockquote>\n<p>后续可以自定义主题样式以及一些功能</p>\n</blockquote>\n<p>​        笔者博客：<a href=\"https://www.jian1024.cn/\" target=\"_blank\" rel=\"noopener\">My Blog</a></p>"},{"title":"vim & terminator使用","date":"2021-02-13T08:13:22.000Z","_content":"\n\n\n### 前言\n\n​\t\t使用SourceInsight查看源代码虽然很方便，但有时也会遇到无法跳转的情况，而且修改之后还要将文件上传到linux端才能进行编译，很不方便，于是乎全面转向vim的使用\n\n<!-- more -->\n\n### 一、配置\n\n#### 1.1 vim\n\n​\t\t使用`vim --version`查看vim版本，我的是8.2版本，为了兼容一些插件的使用，配置文件为~/.vimrc，我的文件链接[vimrc](https://github.com/FlyingCatZ/tools/tree/main/vim)，vim因为增加了插件才会如此强大，而插件也是用vim的一些语法写的，究其原因还是因为设计的灵活，使其能够扩展\n\n​\t\t我使用的插件都在文件中有说明，我是用[vim-plug](https://github.com/junegunn/vim-plug)管理插件，主要是为了能够使用`asyncrun`和`YouCompleteMe`，所有插件如下\n\n| 插件            | 作用                                     |\n| --------------- | ---------------------------------------- |\n| autoload_cscope | 自动加载cscope相关文件                   |\n| NERD_tree       | 文件列表，F3开关                         |\n| taglist         | 符号列表，F2开关                         |\n| asyncrun        | 在vim中异步操作，F7编译，F10开关状态窗口 |\n| YouCompleteMe   | 自动补全                                 |\n\n​\t\t前三个直接将文件放到.vim/plugin/目录中即可，后两个需要用vim-plug下载，文件全部在我的[Github](https://github.com/FlyingCatZ/tools)\n\n\n\n#### 1.2 terminator\n\n​\t\tterminator的分屏特别好用，目前是我使用的主要终端工具，配置文件[config](https://github.com/FlyingCatZ/tools/tree/main/terminator)，将其放到~/.config/terminator/中即可\n\n\n\n### 二、效果\n\n#### 2.1 vim\n\n![vim](https://res.cloudinary.com/flyingcatz/image/upload/v1613207569/vim%E5%B1%95%E7%A4%BA_ai9qy4.png \"效果图\")\n\n\n\n#### 2.2 terminator\n\n![terminator](https://res.cloudinary.com/flyingcatz/image/upload/v1613208483/terminator%E5%B1%95%E7%A4%BA_r81awe.png \"效果图\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/tools.md","raw":"---\ntitle: vim & terminator使用\ndate: 2021-02-13 16:13:22\ncategories: [tools]\ntags: [vim,terminator]\n---\n\n\n\n### 前言\n\n​\t\t使用SourceInsight查看源代码虽然很方便，但有时也会遇到无法跳转的情况，而且修改之后还要将文件上传到linux端才能进行编译，很不方便，于是乎全面转向vim的使用\n\n<!-- more -->\n\n### 一、配置\n\n#### 1.1 vim\n\n​\t\t使用`vim --version`查看vim版本，我的是8.2版本，为了兼容一些插件的使用，配置文件为~/.vimrc，我的文件链接[vimrc](https://github.com/FlyingCatZ/tools/tree/main/vim)，vim因为增加了插件才会如此强大，而插件也是用vim的一些语法写的，究其原因还是因为设计的灵活，使其能够扩展\n\n​\t\t我使用的插件都在文件中有说明，我是用[vim-plug](https://github.com/junegunn/vim-plug)管理插件，主要是为了能够使用`asyncrun`和`YouCompleteMe`，所有插件如下\n\n| 插件            | 作用                                     |\n| --------------- | ---------------------------------------- |\n| autoload_cscope | 自动加载cscope相关文件                   |\n| NERD_tree       | 文件列表，F3开关                         |\n| taglist         | 符号列表，F2开关                         |\n| asyncrun        | 在vim中异步操作，F7编译，F10开关状态窗口 |\n| YouCompleteMe   | 自动补全                                 |\n\n​\t\t前三个直接将文件放到.vim/plugin/目录中即可，后两个需要用vim-plug下载，文件全部在我的[Github](https://github.com/FlyingCatZ/tools)\n\n\n\n#### 1.2 terminator\n\n​\t\tterminator的分屏特别好用，目前是我使用的主要终端工具，配置文件[config](https://github.com/FlyingCatZ/tools/tree/main/terminator)，将其放到~/.config/terminator/中即可\n\n\n\n### 二、效果\n\n#### 2.1 vim\n\n![vim](https://res.cloudinary.com/flyingcatz/image/upload/v1613207569/vim%E5%B1%95%E7%A4%BA_ai9qy4.png \"效果图\")\n\n\n\n#### 2.2 terminator\n\n![terminator](https://res.cloudinary.com/flyingcatz/image/upload/v1613208483/terminator%E5%B1%95%E7%A4%BA_r81awe.png \"效果图\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"tools","published":1,"updated":"2021-02-13T02:48:31.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8yh000cq5dit3rv9rwr","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>​        使用SourceInsight查看源代码虽然很方便，但有时也会遇到无法跳转的情况，而且修改之后还要将文件上传到linux端才能进行编译，很不方便，于是乎全面转向vim的使用</p>\n<a id=\"more\"></a>\n<h3 id=\"一、配置\"><a href=\"#一、配置\" class=\"headerlink\" title=\"一、配置\"></a>一、配置</h3><h4 id=\"1-1-vim\"><a href=\"#1-1-vim\" class=\"headerlink\" title=\"1.1 vim\"></a>1.1 vim</h4><p>​        使用<code>vim --version</code>查看vim版本，我的是8.2版本，为了兼容一些插件的使用，配置文件为~/.vimrc，我的文件链接<a href=\"https://github.com/FlyingCatZ/tools/tree/main/vim\" target=\"_blank\" rel=\"noopener\">vimrc</a>，vim因为增加了插件才会如此强大，而插件也是用vim的一些语法写的，究其原因还是因为设计的灵活，使其能够扩展</p>\n<p>​        我使用的插件都在文件中有说明，我是用<a href=\"https://github.com/junegunn/vim-plug\" target=\"_blank\" rel=\"noopener\">vim-plug</a>管理插件，主要是为了能够使用<code>asyncrun</code>和<code>YouCompleteMe</code>，所有插件如下</p>\n<table>\n<thead>\n<tr>\n<th>插件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>autoload_cscope</td>\n<td>自动加载cscope相关文件</td>\n</tr>\n<tr>\n<td>NERD_tree</td>\n<td>文件列表，F3开关</td>\n</tr>\n<tr>\n<td>taglist</td>\n<td>符号列表，F2开关</td>\n</tr>\n<tr>\n<td>asyncrun</td>\n<td>在vim中异步操作，F7编译，F10开关状态窗口</td>\n</tr>\n<tr>\n<td>YouCompleteMe</td>\n<td>自动补全</td>\n</tr>\n</tbody>\n</table>\n<p>​        前三个直接将文件放到.vim/plugin/目录中即可，后两个需要用vim-plug下载，文件全部在我的<a href=\"https://github.com/FlyingCatZ/tools\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<h4 id=\"1-2-terminator\"><a href=\"#1-2-terminator\" class=\"headerlink\" title=\"1.2 terminator\"></a>1.2 terminator</h4><p>​        terminator的分屏特别好用，目前是我使用的主要终端工具，配置文件<a href=\"https://github.com/FlyingCatZ/tools/tree/main/terminator\" target=\"_blank\" rel=\"noopener\">config</a>，将其放到~/.config/terminator/中即可</p>\n<h3 id=\"二、效果\"><a href=\"#二、效果\" class=\"headerlink\" title=\"二、效果\"></a>二、效果</h3><h4 id=\"2-1-vim\"><a href=\"#2-1-vim\" class=\"headerlink\" title=\"2.1 vim\"></a>2.1 vim</h4><p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613207569/vim%E5%B1%95%E7%A4%BA_ai9qy4.png\" alt=\"vim\" title=\"效果图\"></p>\n<h4 id=\"2-2-terminator\"><a href=\"#2-2-terminator\" class=\"headerlink\" title=\"2.2 terminator\"></a>2.2 terminator</h4><p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613208483/terminator%E5%B1%95%E7%A4%BA_r81awe.png\" alt=\"terminator\" title=\"效果图\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>​        使用SourceInsight查看源代码虽然很方便，但有时也会遇到无法跳转的情况，而且修改之后还要将文件上传到linux端才能进行编译，很不方便，于是乎全面转向vim的使用</p>","more":"<h3 id=\"一、配置\"><a href=\"#一、配置\" class=\"headerlink\" title=\"一、配置\"></a>一、配置</h3><h4 id=\"1-1-vim\"><a href=\"#1-1-vim\" class=\"headerlink\" title=\"1.1 vim\"></a>1.1 vim</h4><p>​        使用<code>vim --version</code>查看vim版本，我的是8.2版本，为了兼容一些插件的使用，配置文件为~/.vimrc，我的文件链接<a href=\"https://github.com/FlyingCatZ/tools/tree/main/vim\" target=\"_blank\" rel=\"noopener\">vimrc</a>，vim因为增加了插件才会如此强大，而插件也是用vim的一些语法写的，究其原因还是因为设计的灵活，使其能够扩展</p>\n<p>​        我使用的插件都在文件中有说明，我是用<a href=\"https://github.com/junegunn/vim-plug\" target=\"_blank\" rel=\"noopener\">vim-plug</a>管理插件，主要是为了能够使用<code>asyncrun</code>和<code>YouCompleteMe</code>，所有插件如下</p>\n<table>\n<thead>\n<tr>\n<th>插件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>autoload_cscope</td>\n<td>自动加载cscope相关文件</td>\n</tr>\n<tr>\n<td>NERD_tree</td>\n<td>文件列表，F3开关</td>\n</tr>\n<tr>\n<td>taglist</td>\n<td>符号列表，F2开关</td>\n</tr>\n<tr>\n<td>asyncrun</td>\n<td>在vim中异步操作，F7编译，F10开关状态窗口</td>\n</tr>\n<tr>\n<td>YouCompleteMe</td>\n<td>自动补全</td>\n</tr>\n</tbody>\n</table>\n<p>​        前三个直接将文件放到.vim/plugin/目录中即可，后两个需要用vim-plug下载，文件全部在我的<a href=\"https://github.com/FlyingCatZ/tools\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<h4 id=\"1-2-terminator\"><a href=\"#1-2-terminator\" class=\"headerlink\" title=\"1.2 terminator\"></a>1.2 terminator</h4><p>​        terminator的分屏特别好用，目前是我使用的主要终端工具，配置文件<a href=\"https://github.com/FlyingCatZ/tools/tree/main/terminator\" target=\"_blank\" rel=\"noopener\">config</a>，将其放到~/.config/terminator/中即可</p>\n<h3 id=\"二、效果\"><a href=\"#二、效果\" class=\"headerlink\" title=\"二、效果\"></a>二、效果</h3><h4 id=\"2-1-vim\"><a href=\"#2-1-vim\" class=\"headerlink\" title=\"2.1 vim\"></a>2.1 vim</h4><p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613207569/vim%E5%B1%95%E7%A4%BA_ai9qy4.png\" alt=\"vim\" title=\"效果图\"></p>\n<h4 id=\"2-2-terminator\"><a href=\"#2-2-terminator\" class=\"headerlink\" title=\"2.2 terminator\"></a>2.2 terminator</h4><p><img src=\"https://res.cloudinary.com/flyingcatz/image/upload/v1613208483/terminator%E5%B1%95%E7%A4%BA_r81awe.png\" alt=\"terminator\" title=\"效果图\"></p>"},{"title":"从学校到职场","date":"2020-01-06T12:48:05.000Z","_content":">以前总是期待外面的世界，可是当走出来之后才发现，最美好的地方已经回不去了。\n\n<!-- more -->\n\n不知不觉就过去了近六个月，也终于快迎来了自己的转正。在几个月的时间中发生了好多事情，不过还好2019年已经过去了，希望2020年继续加油。\n\n在工作中体会还蛮多的，可能是因为自己还是太菜了，不断地努力才可以啊。这半年写了一些基于arm-a15处理器、Linux系统的代码，我知道这并不是我想要的。进入社会，就必须一刻不停地向前走。\n\n这半年也算对产品的开发有了大致的框架，底层操作系统，应用层逻辑，上层Qt开发，arm处理器+Linux似乎是快速实现产品的必由之路。而我就是负责应用层逻辑，需要跟DSP通过IPC通信，底层大佬跟我讲IPC都是通过共享内存加中断来实现的，大佬就是大佬，言简意赅。DSP是负责控制器算法的实现和伺服驱动器的控制，主控芯片是TI的am335x，两个arm核加DSP核。还有上面的示教器，Linux加Qt，用C++实现可视化界面。每天的工作就是跟DSP端和示教器端沟通，虽然有一些进步，可是没有达到自己满意的程度。\n\n春节过后就可以做底层开发了，这应该是这几个月最开心的事情了。加油！\n","source":"_posts/从学校到职场.md","raw":"---\ntitle: 从学校到职场\ndate: 2020-01-06 20:48:05\ntags: [工作,技能,程序员]\ncategories: [总结]\n---\n>以前总是期待外面的世界，可是当走出来之后才发现，最美好的地方已经回不去了。\n\n<!-- more -->\n\n不知不觉就过去了近六个月，也终于快迎来了自己的转正。在几个月的时间中发生了好多事情，不过还好2019年已经过去了，希望2020年继续加油。\n\n在工作中体会还蛮多的，可能是因为自己还是太菜了，不断地努力才可以啊。这半年写了一些基于arm-a15处理器、Linux系统的代码，我知道这并不是我想要的。进入社会，就必须一刻不停地向前走。\n\n这半年也算对产品的开发有了大致的框架，底层操作系统，应用层逻辑，上层Qt开发，arm处理器+Linux似乎是快速实现产品的必由之路。而我就是负责应用层逻辑，需要跟DSP通过IPC通信，底层大佬跟我讲IPC都是通过共享内存加中断来实现的，大佬就是大佬，言简意赅。DSP是负责控制器算法的实现和伺服驱动器的控制，主控芯片是TI的am335x，两个arm核加DSP核。还有上面的示教器，Linux加Qt，用C++实现可视化界面。每天的工作就是跟DSP端和示教器端沟通，虽然有一些进步，可是没有达到自己满意的程度。\n\n春节过后就可以做底层开发了，这应该是这几个月最开心的事情了。加油！\n","slug":"从学校到职场","published":1,"updated":"2020-01-06T13:23:46.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8yk000dq5dibrufccdq","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>以前总是期待外面的世界，可是当走出来之后才发现，最美好的地方已经回不去了。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>不知不觉就过去了近六个月，也终于快迎来了自己的转正。在几个月的时间中发生了好多事情，不过还好2019年已经过去了，希望2020年继续加油。</p>\n<p>在工作中体会还蛮多的，可能是因为自己还是太菜了，不断地努力才可以啊。这半年写了一些基于arm-a15处理器、Linux系统的代码，我知道这并不是我想要的。进入社会，就必须一刻不停地向前走。</p>\n<p>这半年也算对产品的开发有了大致的框架，底层操作系统，应用层逻辑，上层Qt开发，arm处理器+Linux似乎是快速实现产品的必由之路。而我就是负责应用层逻辑，需要跟DSP通过IPC通信，底层大佬跟我讲IPC都是通过共享内存加中断来实现的，大佬就是大佬，言简意赅。DSP是负责控制器算法的实现和伺服驱动器的控制，主控芯片是TI的am335x，两个arm核加DSP核。还有上面的示教器，Linux加Qt，用C++实现可视化界面。每天的工作就是跟DSP端和示教器端沟通，虽然有一些进步，可是没有达到自己满意的程度。</p>\n<p>春节过后就可以做底层开发了，这应该是这几个月最开心的事情了。加油！</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>以前总是期待外面的世界，可是当走出来之后才发现，最美好的地方已经回不去了。</p>\n</blockquote>","more":"<p>不知不觉就过去了近六个月，也终于快迎来了自己的转正。在几个月的时间中发生了好多事情，不过还好2019年已经过去了，希望2020年继续加油。</p>\n<p>在工作中体会还蛮多的，可能是因为自己还是太菜了，不断地努力才可以啊。这半年写了一些基于arm-a15处理器、Linux系统的代码，我知道这并不是我想要的。进入社会，就必须一刻不停地向前走。</p>\n<p>这半年也算对产品的开发有了大致的框架，底层操作系统，应用层逻辑，上层Qt开发，arm处理器+Linux似乎是快速实现产品的必由之路。而我就是负责应用层逻辑，需要跟DSP通过IPC通信，底层大佬跟我讲IPC都是通过共享内存加中断来实现的，大佬就是大佬，言简意赅。DSP是负责控制器算法的实现和伺服驱动器的控制，主控芯片是TI的am335x，两个arm核加DSP核。还有上面的示教器，Linux加Qt，用C++实现可视化界面。每天的工作就是跟DSP端和示教器端沟通，虽然有一些进步，可是没有达到自己满意的程度。</p>\n<p>春节过后就可以做底层开发了，这应该是这几个月最开心的事情了。加油！</p>"},{"title":"博客注意事项","date":"2019-06-20T06:19:09.000Z","_content":"\n>刚想更新一下博客，发现好多问题，以这篇博客记录一些问题\n\n<!-- more -->\n\n 1 首先是 markdown 语法，好记性不如烂笔头\n\n  # 一级标题\n\n  ## 二级标题\n\n  **加粗**\n\n  *斜体*\n\n  *** 斜体加粗 ***\n\n  ~~删除线~~\n\n  >引用\n\n  分割线- - -\n\n  ![图片解释](图片地址 \"图片说明\")\n\n  ![图片解释](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg \"图片说明，可不加\")\n\n  [超链接名](超链接地址 \"超链接说明，可不加\")\n\n  [百度](www.baidu.com \"说明\")\n\n  无序列表*_标题\n\n  有序列表1._说明 2._说明\n\n      列表说明\n\n  表头|表头|表头\n    -|:-:|-:\n  内容|内容|内容\n  内容|内容|内容\n\n  >第二行分割表头和内容, - 有一个就行,文字默认居左, - 两边加：表示文字居中, - 右边加：表示文字居右\n\n  `单行代码`\n\n  ```javescript\n  代\n  码\n  块\n  ```\n  ---\n\n 2 其次是hexo和atom的一些问题\n\n  * xxx command not found\n\n  hexo的命令行需要使用cmd或者powershell打开，gitbash权限不够\n\n  * atom的即时演示窗口快捷键\n\n  ctrl + shift + m\n\n  * 音乐更换文件位置\n\n  E:\\Blog\\themes\\next\\source\\dist\\music.js\n\n待续\n","source":"_posts/博客注意事项.md","raw":"---\ntitle: 博客注意事项\ndate: 2019-06-20 14:19:09\ntags: [博客,hexo]\ncategories: [博客]\n---\n\n>刚想更新一下博客，发现好多问题，以这篇博客记录一些问题\n\n<!-- more -->\n\n 1 首先是 markdown 语法，好记性不如烂笔头\n\n  # 一级标题\n\n  ## 二级标题\n\n  **加粗**\n\n  *斜体*\n\n  *** 斜体加粗 ***\n\n  ~~删除线~~\n\n  >引用\n\n  分割线- - -\n\n  ![图片解释](图片地址 \"图片说明\")\n\n  ![图片解释](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg \"图片说明，可不加\")\n\n  [超链接名](超链接地址 \"超链接说明，可不加\")\n\n  [百度](www.baidu.com \"说明\")\n\n  无序列表*_标题\n\n  有序列表1._说明 2._说明\n\n      列表说明\n\n  表头|表头|表头\n    -|:-:|-:\n  内容|内容|内容\n  内容|内容|内容\n\n  >第二行分割表头和内容, - 有一个就行,文字默认居左, - 两边加：表示文字居中, - 右边加：表示文字居右\n\n  `单行代码`\n\n  ```javescript\n  代\n  码\n  块\n  ```\n  ---\n\n 2 其次是hexo和atom的一些问题\n\n  * xxx command not found\n\n  hexo的命令行需要使用cmd或者powershell打开，gitbash权限不够\n\n  * atom的即时演示窗口快捷键\n\n  ctrl + shift + m\n\n  * 音乐更换文件位置\n\n  E:\\Blog\\themes\\next\\source\\dist\\music.js\n\n待续\n","slug":"博客注意事项","published":1,"updated":"2019-07-12T06:41:56.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8yn000hq5di1p7j85hj","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>刚想更新一下博客，发现好多问题，以这篇博客记录一些问题</p>\n</blockquote>\n<a id=\"more\"></a>\n<p> 1 首先是 markdown 语法，好记性不如烂笔头</p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><p>  <strong>加粗</strong></p>\n<p>  <em>斜体</em></p>\n<p>  <strong><em> 斜体加粗 </em></strong></p>\n<p>  <del>删除线</del></p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<p>  分割线- - -</p>\n<p>  <img src=\"图片地址\" alt=\"图片解释\" title=\"图片说明\"></p>\n<p>  <img src=\"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg\" alt=\"图片解释\" title=\"图片说明，可不加\"></p>\n<p>  <a href=\"超链接地址\" title=\"超链接说明，可不加\">超链接名</a></p>\n<p>  <a href=\"www.baidu.com\" title=\"说明\">百度</a></p>\n<p>  无序列表*_标题</p>\n<p>  有序列表1.<em>说明 2.</em>说明</p>\n<pre><code>列表说明\n</code></pre><table>\n<thead>\n<tr>\n<th>表头</th>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:right\">表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>  内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:right\">内容</td>\n</tr>\n<tr>\n<td>  内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:right\">内容</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>第二行分割表头和内容, - 有一个就行,文字默认居左, - 两边加：表示文字居中, - 右边加：表示文字居右</p>\n</blockquote>\n<p>  <code>单行代码</code></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代</span><br><span class=\"line\">码</span><br><span class=\"line\">块</span><br></pre></td></tr></table></figure>\n<hr>\n<p> 2 其次是hexo和atom的一些问题</p>\n<ul>\n<li><p>xxx command not found</p>\n<p>hexo的命令行需要使用cmd或者powershell打开，gitbash权限不够</p>\n</li>\n<li><p>atom的即时演示窗口快捷键</p>\n<p>ctrl + shift + m</p>\n</li>\n<li><p>音乐更换文件位置</p>\n<p>E:\\Blog\\themes\\next\\source\\dist\\music.js</p>\n</li>\n</ul>\n<p>待续</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>刚想更新一下博客，发现好多问题，以这篇博客记录一些问题</p>\n</blockquote>","more":"<p> 1 首先是 markdown 语法，好记性不如烂笔头</p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><p>  <strong>加粗</strong></p>\n<p>  <em>斜体</em></p>\n<p>  <strong><em> 斜体加粗 </em></strong></p>\n<p>  <del>删除线</del></p>\n<blockquote>\n<p>引用</p>\n</blockquote>\n<p>  分割线- - -</p>\n<p>  <img src=\"图片地址\" alt=\"图片解释\" title=\"图片说明\"></p>\n<p>  <img src=\"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg\" alt=\"图片解释\" title=\"图片说明，可不加\"></p>\n<p>  <a href=\"超链接地址\" title=\"超链接说明，可不加\">超链接名</a></p>\n<p>  <a href=\"www.baidu.com\" title=\"说明\">百度</a></p>\n<p>  无序列表*_标题</p>\n<p>  有序列表1.<em>说明 2.</em>说明</p>\n<pre><code>列表说明\n</code></pre><table>\n<thead>\n<tr>\n<th>表头</th>\n<th style=\"text-align:center\">表头</th>\n<th style=\"text-align:right\">表头</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>  内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:right\">内容</td>\n</tr>\n<tr>\n<td>  内容</td>\n<td style=\"text-align:center\">内容</td>\n<td style=\"text-align:right\">内容</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>第二行分割表头和内容, - 有一个就行,文字默认居左, - 两边加：表示文字居中, - 右边加：表示文字居右</p>\n</blockquote>\n<p>  <code>单行代码</code></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代</span><br><span class=\"line\">码</span><br><span class=\"line\">块</span><br></pre></td></tr></table></figure>\n<hr>\n<p> 2 其次是hexo和atom的一些问题</p>\n<ul>\n<li><p>xxx command not found</p>\n<p>hexo的命令行需要使用cmd或者powershell打开，gitbash权限不够</p>\n</li>\n<li><p>atom的即时演示窗口快捷键</p>\n<p>ctrl + shift + m</p>\n</li>\n<li><p>音乐更换文件位置</p>\n<p>E:\\Blog\\themes\\next\\source\\dist\\music.js</p>\n</li>\n</ul>\n<p>待续</p>"},{"title":"大学总结","date":"2019-06-20T07:54:08.000Z","_content":">起初打算完成毕业论文之后写一篇总结，算是给自己大学的四年一个交代。希望以后自己的执行力能更强一点。\n\n<!-- more -->\n\n### 前言\n\n  Writer就读的大学只是一所普通的二本院校。四年的学习让我真正找到了自己人生的方向，也知道了自己想要成为什么样的人。生活很美好，加油。\n\n### 学习\n\n  最近几个月为了完成毕业论文，第一次认真了解了word这个软件，各种格式要求被安排的明明白白。幸亏我们的导师对我们比较了解，提前让我们写论文，后期相比其他组，我们是最轻松的。通过两个月的接触，也深深感受到了黄老师身上严谨的作风，还有就是作为一名教育工作者深深的人格魅力。\n\n  四年过的很快，依稀记得当年高考结束时的情景。而如今大学也结束了，接下来是在社会中学习。大学里的学习不再是只有课本上的知识，还有实践，生活中都需要学习。\n\n### 生活\n\n  大学四年的生活有苦也有甜，有失落也有开心，这些都是成长的印记。相处了四年的室友，一起笑过，一起拼过，闹过矛盾，吵过架，依然感谢与你们相遇，现在，只能希望你们都好。\n\n### 总结\n\n  最大的感受就是不会说话了。。。。。。四年更多的是与机器打交道，但我依旧怀着一颗真诚的心。学会了思考，学会了吃苦，学会了包容，学会了理解，原明天更加美好。\n","source":"_posts/大学总结.md","raw":"---\ntitle: 大学总结\ndate: 2019-06-20 15:54:08\ntags: [总结]\ncategories: [总结]\n---\n>起初打算完成毕业论文之后写一篇总结，算是给自己大学的四年一个交代。希望以后自己的执行力能更强一点。\n\n<!-- more -->\n\n### 前言\n\n  Writer就读的大学只是一所普通的二本院校。四年的学习让我真正找到了自己人生的方向，也知道了自己想要成为什么样的人。生活很美好，加油。\n\n### 学习\n\n  最近几个月为了完成毕业论文，第一次认真了解了word这个软件，各种格式要求被安排的明明白白。幸亏我们的导师对我们比较了解，提前让我们写论文，后期相比其他组，我们是最轻松的。通过两个月的接触，也深深感受到了黄老师身上严谨的作风，还有就是作为一名教育工作者深深的人格魅力。\n\n  四年过的很快，依稀记得当年高考结束时的情景。而如今大学也结束了，接下来是在社会中学习。大学里的学习不再是只有课本上的知识，还有实践，生活中都需要学习。\n\n### 生活\n\n  大学四年的生活有苦也有甜，有失落也有开心，这些都是成长的印记。相处了四年的室友，一起笑过，一起拼过，闹过矛盾，吵过架，依然感谢与你们相遇，现在，只能希望你们都好。\n\n### 总结\n\n  最大的感受就是不会说话了。。。。。。四年更多的是与机器打交道，但我依旧怀着一颗真诚的心。学会了思考，学会了吃苦，学会了包容，学会了理解，原明天更加美好。\n","slug":"大学总结","published":1,"updated":"2021-02-13T06:53:22.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8yp000kq5diht2srl3l","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>起初打算完成毕业论文之后写一篇总结，算是给自己大学的四年一个交代。希望以后自己的执行力能更强一点。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  Writer就读的大学只是一所普通的二本院校。四年的学习让我真正找到了自己人生的方向，也知道了自己想要成为什么样的人。生活很美好，加油。</p>\n<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><p>  最近几个月为了完成毕业论文，第一次认真了解了word这个软件，各种格式要求被安排的明明白白。幸亏我们的导师对我们比较了解，提前让我们写论文，后期相比其他组，我们是最轻松的。通过两个月的接触，也深深感受到了黄老师身上严谨的作风，还有就是作为一名教育工作者深深的人格魅力。</p>\n<p>  四年过的很快，依稀记得当年高考结束时的情景。而如今大学也结束了，接下来是在社会中学习。大学里的学习不再是只有课本上的知识，还有实践，生活中都需要学习。</p>\n<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>  大学四年的生活有苦也有甜，有失落也有开心，这些都是成长的印记。相处了四年的室友，一起笑过，一起拼过，闹过矛盾，吵过架，依然感谢与你们相遇，现在，只能希望你们都好。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>  最大的感受就是不会说话了。。。。。。四年更多的是与机器打交道，但我依旧怀着一颗真诚的心。学会了思考，学会了吃苦，学会了包容，学会了理解，原明天更加美好。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>起初打算完成毕业论文之后写一篇总结，算是给自己大学的四年一个交代。希望以后自己的执行力能更强一点。</p>\n</blockquote>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  Writer就读的大学只是一所普通的二本院校。四年的学习让我真正找到了自己人生的方向，也知道了自己想要成为什么样的人。生活很美好，加油。</p>\n<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><p>  最近几个月为了完成毕业论文，第一次认真了解了word这个软件，各种格式要求被安排的明明白白。幸亏我们的导师对我们比较了解，提前让我们写论文，后期相比其他组，我们是最轻松的。通过两个月的接触，也深深感受到了黄老师身上严谨的作风，还有就是作为一名教育工作者深深的人格魅力。</p>\n<p>  四年过的很快，依稀记得当年高考结束时的情景。而如今大学也结束了，接下来是在社会中学习。大学里的学习不再是只有课本上的知识，还有实践，生活中都需要学习。</p>\n<h3 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h3><p>  大学四年的生活有苦也有甜，有失落也有开心，这些都是成长的印记。相处了四年的室友，一起笑过，一起拼过，闹过矛盾，吵过架，依然感谢与你们相遇，现在，只能希望你们都好。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>  最大的感受就是不会说话了。。。。。。四年更多的是与机器打交道，但我依旧怀着一颗真诚的心。学会了思考，学会了吃苦，学会了包容，学会了理解，原明天更加美好。</p>"},{"title":"嵌入式Linux_存储管理器基础","date":"2019-06-26T12:55:09.000Z","_content":"\n>从这篇开始正式进入嵌入式Linux的学习，跟着韦大神脚步，任重而道远。总结一下各种存储器。\n\n<!-- more -->\n\n* RAM--随机存取存储器  \n  特点：易失性存储器，掉电无法使用，但写入读取速度非常快。\n\n* ROM--只读存储器  \n  特点：非易失性存储器掉电仍可使用，容量大，但写入读取速度相对没有那么快。\n\n* SRAM--静态存储器  \n  一般用于CPU的缓存，特点：写入读取速度非常快，是目前最快的存储器，但造价非常昂贵。\n\n* DRAM--动态存储器  \n  特点：保留数据的时间很短，速度也比SRAM慢，不过还是比任何的ROM都要快，从价格上来看DRAM相比SRAM要便宜很多，计算机内存就是DRAM的。\n\n* SDRAM--同步动态存储器  \n  一般用于嵌入式系统的内存，特点：利用一个单一的系统时钟同步所有的地址数据和控制信号。\n\n* DDR RAM--Double Data Rate SDRAM  \n  一般用于计算机内存，特点：在一个时钟读写两次数据，使数据传输速度加倍。\n\n* EEPROM--电擦除编程ROM  \n  特点：容量大，掉电数据不丢失，但写入速度非常慢。\n\n* FLASH--闪存  \n  U盘，MP3等存储，特点：非易失性存储器，擦写方便，访问速度快，常用来存储bootloader，操作系统，程序代码，或者直接当作硬盘。\n\n* NOR FLASH  \n  开机引导程序的载体，NOR FLASH的读取与SDRAM的读取一样，代码可以直接在NOR FLASH上执行。特点：可随机访问，容量小，读取速度快，写入和擦除速度慢（多数写入之前需要进行擦除）\n\n* NAND FLASH  \n  各种存储卡，U盘，SSD（固态硬盘）等大容量设备，以page为单位读写，以block为单位擦除，代码不能直接在NAND FLASH上执行。特点：容量大，读取、写入和擦除速度都很快（多数写入之前需要进行擦除）\n","source":"_posts/嵌入式Linux-存储管理器基础.md","raw":"---\ntitle: 嵌入式Linux_存储管理器基础\ndate: 2019-06-26 20:55:09\ntags: [Linux,Arm]\ncategories: [Linux]\n---\n\n>从这篇开始正式进入嵌入式Linux的学习，跟着韦大神脚步，任重而道远。总结一下各种存储器。\n\n<!-- more -->\n\n* RAM--随机存取存储器  \n  特点：易失性存储器，掉电无法使用，但写入读取速度非常快。\n\n* ROM--只读存储器  \n  特点：非易失性存储器掉电仍可使用，容量大，但写入读取速度相对没有那么快。\n\n* SRAM--静态存储器  \n  一般用于CPU的缓存，特点：写入读取速度非常快，是目前最快的存储器，但造价非常昂贵。\n\n* DRAM--动态存储器  \n  特点：保留数据的时间很短，速度也比SRAM慢，不过还是比任何的ROM都要快，从价格上来看DRAM相比SRAM要便宜很多，计算机内存就是DRAM的。\n\n* SDRAM--同步动态存储器  \n  一般用于嵌入式系统的内存，特点：利用一个单一的系统时钟同步所有的地址数据和控制信号。\n\n* DDR RAM--Double Data Rate SDRAM  \n  一般用于计算机内存，特点：在一个时钟读写两次数据，使数据传输速度加倍。\n\n* EEPROM--电擦除编程ROM  \n  特点：容量大，掉电数据不丢失，但写入速度非常慢。\n\n* FLASH--闪存  \n  U盘，MP3等存储，特点：非易失性存储器，擦写方便，访问速度快，常用来存储bootloader，操作系统，程序代码，或者直接当作硬盘。\n\n* NOR FLASH  \n  开机引导程序的载体，NOR FLASH的读取与SDRAM的读取一样，代码可以直接在NOR FLASH上执行。特点：可随机访问，容量小，读取速度快，写入和擦除速度慢（多数写入之前需要进行擦除）\n\n* NAND FLASH  \n  各种存储卡，U盘，SSD（固态硬盘）等大容量设备，以page为单位读写，以block为单位擦除，代码不能直接在NAND FLASH上执行。特点：容量大，读取、写入和擦除速度都很快（多数写入之前需要进行擦除）\n","slug":"嵌入式Linux-存储管理器基础","published":1,"updated":"2021-02-13T06:58:05.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8yr000pq5dixqc7wlpk","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>从这篇开始正式进入嵌入式Linux的学习，跟着韦大神脚步，任重而道远。总结一下各种存储器。</p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li><p>RAM–随机存取存储器<br>特点：易失性存储器，掉电无法使用，但写入读取速度非常快。</p>\n</li>\n<li><p>ROM–只读存储器<br>特点：非易失性存储器掉电仍可使用，容量大，但写入读取速度相对没有那么快。</p>\n</li>\n<li><p>SRAM–静态存储器<br>一般用于CPU的缓存，特点：写入读取速度非常快，是目前最快的存储器，但造价非常昂贵。</p>\n</li>\n<li><p>DRAM–动态存储器<br>特点：保留数据的时间很短，速度也比SRAM慢，不过还是比任何的ROM都要快，从价格上来看DRAM相比SRAM要便宜很多，计算机内存就是DRAM的。</p>\n</li>\n<li><p>SDRAM–同步动态存储器<br>一般用于嵌入式系统的内存，特点：利用一个单一的系统时钟同步所有的地址数据和控制信号。</p>\n</li>\n<li><p>DDR RAM–Double Data Rate SDRAM<br>一般用于计算机内存，特点：在一个时钟读写两次数据，使数据传输速度加倍。</p>\n</li>\n<li><p>EEPROM–电擦除编程ROM<br>特点：容量大，掉电数据不丢失，但写入速度非常慢。</p>\n</li>\n<li><p>FLASH–闪存<br>U盘，MP3等存储，特点：非易失性存储器，擦写方便，访问速度快，常用来存储bootloader，操作系统，程序代码，或者直接当作硬盘。</p>\n</li>\n<li><p>NOR FLASH<br>开机引导程序的载体，NOR FLASH的读取与SDRAM的读取一样，代码可以直接在NOR FLASH上执行。特点：可随机访问，容量小，读取速度快，写入和擦除速度慢（多数写入之前需要进行擦除）</p>\n</li>\n<li><p>NAND FLASH<br>各种存储卡，U盘，SSD（固态硬盘）等大容量设备，以page为单位读写，以block为单位擦除，代码不能直接在NAND FLASH上执行。特点：容量大，读取、写入和擦除速度都很快（多数写入之前需要进行擦除）</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>从这篇开始正式进入嵌入式Linux的学习，跟着韦大神脚步，任重而道远。总结一下各种存储器。</p>\n</blockquote>","more":"<ul>\n<li><p>RAM–随机存取存储器<br>特点：易失性存储器，掉电无法使用，但写入读取速度非常快。</p>\n</li>\n<li><p>ROM–只读存储器<br>特点：非易失性存储器掉电仍可使用，容量大，但写入读取速度相对没有那么快。</p>\n</li>\n<li><p>SRAM–静态存储器<br>一般用于CPU的缓存，特点：写入读取速度非常快，是目前最快的存储器，但造价非常昂贵。</p>\n</li>\n<li><p>DRAM–动态存储器<br>特点：保留数据的时间很短，速度也比SRAM慢，不过还是比任何的ROM都要快，从价格上来看DRAM相比SRAM要便宜很多，计算机内存就是DRAM的。</p>\n</li>\n<li><p>SDRAM–同步动态存储器<br>一般用于嵌入式系统的内存，特点：利用一个单一的系统时钟同步所有的地址数据和控制信号。</p>\n</li>\n<li><p>DDR RAM–Double Data Rate SDRAM<br>一般用于计算机内存，特点：在一个时钟读写两次数据，使数据传输速度加倍。</p>\n</li>\n<li><p>EEPROM–电擦除编程ROM<br>特点：容量大，掉电数据不丢失，但写入速度非常慢。</p>\n</li>\n<li><p>FLASH–闪存<br>U盘，MP3等存储，特点：非易失性存储器，擦写方便，访问速度快，常用来存储bootloader，操作系统，程序代码，或者直接当作硬盘。</p>\n</li>\n<li><p>NOR FLASH<br>开机引导程序的载体，NOR FLASH的读取与SDRAM的读取一样，代码可以直接在NOR FLASH上执行。特点：可随机访问，容量小，读取速度快，写入和擦除速度慢（多数写入之前需要进行擦除）</p>\n</li>\n<li><p>NAND FLASH<br>各种存储卡，U盘，SSD（固态硬盘）等大容量设备，以page为单位读写，以block为单位擦除，代码不能直接在NAND FLASH上执行。特点：容量大，读取、写入和擦除速度都很快（多数写入之前需要进行擦除）</p>\n</li>\n</ul>"},{"title":"我的第一篇博客","date":"2019-04-14T09:13:29.000Z","_content":">增加菜单项\n\n1. ` hexo new page 项目名 `\n2. 编辑文件 /source/项目名/index.md   \n在date下添加 `type: \"项目名\"`\n3. 重新执行命令 hexo g , hexo d 或 hexo s  \n---\n>测试\n","source":"_posts/我的第一篇博客.md","raw":"---\ntitle: 我的第一篇博客\ndate: 2019-04-14 17:13:29\ntags:\n    - hexo\n    - markdown\n---\n>增加菜单项\n\n1. ` hexo new page 项目名 `\n2. 编辑文件 /source/项目名/index.md   \n在date下添加 `type: \"项目名\"`\n3. 重新执行命令 hexo g , hexo d 或 hexo s  \n---\n>测试\n","slug":"我的第一篇博客","published":1,"updated":"2019-04-16T13:03:28.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8yt000qq5di1nsdq66v","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>增加菜单项</p>\n</blockquote>\n<ol>\n<li><code>hexo new page 项目名</code></li>\n<li>编辑文件 /source/项目名/index.md<br>在date下添加 <code>type: &quot;项目名&quot;</code></li>\n<li>重新执行命令 hexo g , hexo d 或 hexo s  </li>\n</ol>\n<hr>\n<blockquote>\n<p>测试</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>增加菜单项</p>\n</blockquote>\n<ol>\n<li><code>hexo new page 项目名</code></li>\n<li>编辑文件 /source/项目名/index.md<br>在date下添加 <code>type: &quot;项目名&quot;</code></li>\n<li>重新执行命令 hexo g , hexo d 或 hexo s  </li>\n</ol>\n<hr>\n<blockquote>\n<p>测试</p>\n</blockquote>\n"},{"title":"科学上网","date":"2019-06-20T08:38:05.000Z","_content":">最近喜欢听下一站茶山刘，可能是因为经历相似的原因。弄科学上网也弄了几个月了，也终于摸索出了几种方法实现科学上网。（即翻墙）\n\n#### 引言\n\n我觉得做一件事首先是考虑一下自己的需求，如果没有需求大可不必浪费时间。\n\n---\n\n<!-- more -->\n\n#### 1. 软件或插件\n\n* windows： 如果只是想使用Google搜索和维基百科，可以去下载一个Chrome浏览器，安装一个叫谷歌上网助手的浏览器插件，具体安装不说了。特点非常简单，而且稳定快速。\n* windows： 真正的翻墙，各种vpn软件Porton，Google浏览器插件Setup，可以实现真正意义上的翻墙。特点是简单，但速度没保障。\n* iPhone和iPad： 软件Porton，但需要更改Appstore里appleID的地区。特点也是简单，但速度也没保障。\n* Android： Porton或Turbo，下载需要寻找网站或安装Google框架。\n\n#### 2. vps\n\n* 代理服务器，基于vps可以使用ss、ssr、v2ray方式翻墙，各个平台都一样，在客户端安装shadowsocks等其他软件（我使用的是ssr），代理服务器端安装好各种方式的软件，设置好各参数（网上有一键安装脚本）即可。特点是复杂，但速度非常快。\n\n通过vps，可以使用一些可以刷固件的路由器，在路由器上使用插件进行翻墙，只需要连接到路由器，并将dns设置一下即可，一劳永逸。俗称软路由。\n","source":"_posts/科学上网.md","raw":"---\ntitle: 科学上网\ndate: 2019-06-20 16:38:05\ntags: [科学上网,翻墙]\ncategories: [科学上网]\n---\n>最近喜欢听下一站茶山刘，可能是因为经历相似的原因。弄科学上网也弄了几个月了，也终于摸索出了几种方法实现科学上网。（即翻墙）\n\n#### 引言\n\n我觉得做一件事首先是考虑一下自己的需求，如果没有需求大可不必浪费时间。\n\n---\n\n<!-- more -->\n\n#### 1. 软件或插件\n\n* windows： 如果只是想使用Google搜索和维基百科，可以去下载一个Chrome浏览器，安装一个叫谷歌上网助手的浏览器插件，具体安装不说了。特点非常简单，而且稳定快速。\n* windows： 真正的翻墙，各种vpn软件Porton，Google浏览器插件Setup，可以实现真正意义上的翻墙。特点是简单，但速度没保障。\n* iPhone和iPad： 软件Porton，但需要更改Appstore里appleID的地区。特点也是简单，但速度也没保障。\n* Android： Porton或Turbo，下载需要寻找网站或安装Google框架。\n\n#### 2. vps\n\n* 代理服务器，基于vps可以使用ss、ssr、v2ray方式翻墙，各个平台都一样，在客户端安装shadowsocks等其他软件（我使用的是ssr），代理服务器端安装好各种方式的软件，设置好各参数（网上有一键安装脚本）即可。特点是复杂，但速度非常快。\n\n通过vps，可以使用一些可以刷固件的路由器，在路由器上使用插件进行翻墙，只需要连接到路由器，并将dns设置一下即可，一劳永逸。俗称软路由。\n","slug":"科学上网","published":1,"updated":"2019-07-12T06:27:49.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknhrs8yv000uq5ditdwxpka8","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><blockquote>\n<p>最近喜欢听下一站茶山刘，可能是因为经历相似的原因。弄科学上网也弄了几个月了，也终于摸索出了几种方法实现科学上网。（即翻墙）</p>\n</blockquote>\n<h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>我觉得做一件事首先是考虑一下自己的需求，如果没有需求大可不必浪费时间。</p>\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"1-软件或插件\"><a href=\"#1-软件或插件\" class=\"headerlink\" title=\"1. 软件或插件\"></a>1. 软件或插件</h4><ul>\n<li>windows： 如果只是想使用Google搜索和维基百科，可以去下载一个Chrome浏览器，安装一个叫谷歌上网助手的浏览器插件，具体安装不说了。特点非常简单，而且稳定快速。</li>\n<li>windows： 真正的翻墙，各种vpn软件Porton，Google浏览器插件Setup，可以实现真正意义上的翻墙。特点是简单，但速度没保障。</li>\n<li>iPhone和iPad： 软件Porton，但需要更改Appstore里appleID的地区。特点也是简单，但速度也没保障。</li>\n<li>Android： Porton或Turbo，下载需要寻找网站或安装Google框架。</li>\n</ul>\n<h4 id=\"2-vps\"><a href=\"#2-vps\" class=\"headerlink\" title=\"2. vps\"></a>2. vps</h4><ul>\n<li>代理服务器，基于vps可以使用ss、ssr、v2ray方式翻墙，各个平台都一样，在客户端安装shadowsocks等其他软件（我使用的是ssr），代理服务器端安装好各种方式的软件，设置好各参数（网上有一键安装脚本）即可。特点是复杂，但速度非常快。</li>\n</ul>\n<p>通过vps，可以使用一些可以刷固件的路由器，在路由器上使用插件进行翻墙，只需要连接到路由器，并将dns设置一下即可，一劳永逸。俗称软路由。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近喜欢听下一站茶山刘，可能是因为经历相似的原因。弄科学上网也弄了几个月了，也终于摸索出了几种方法实现科学上网。（即翻墙）</p>\n</blockquote>\n<h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>我觉得做一件事首先是考虑一下自己的需求，如果没有需求大可不必浪费时间。</p>\n<hr>","more":"<h4 id=\"1-软件或插件\"><a href=\"#1-软件或插件\" class=\"headerlink\" title=\"1. 软件或插件\"></a>1. 软件或插件</h4><ul>\n<li>windows： 如果只是想使用Google搜索和维基百科，可以去下载一个Chrome浏览器，安装一个叫谷歌上网助手的浏览器插件，具体安装不说了。特点非常简单，而且稳定快速。</li>\n<li>windows： 真正的翻墙，各种vpn软件Porton，Google浏览器插件Setup，可以实现真正意义上的翻墙。特点是简单，但速度没保障。</li>\n<li>iPhone和iPad： 软件Porton，但需要更改Appstore里appleID的地区。特点也是简单，但速度也没保障。</li>\n<li>Android： Porton或Turbo，下载需要寻找网站或安装Google框架。</li>\n</ul>\n<h4 id=\"2-vps\"><a href=\"#2-vps\" class=\"headerlink\" title=\"2. vps\"></a>2. vps</h4><ul>\n<li>代理服务器，基于vps可以使用ss、ssr、v2ray方式翻墙，各个平台都一样，在客户端安装shadowsocks等其他软件（我使用的是ssr），代理服务器端安装好各种方式的软件，设置好各参数（网上有一键安装脚本）即可。特点是复杂，但速度非常快。</li>\n</ul>\n<p>通过vps，可以使用一些可以刷固件的路由器，在路由器上使用插件进行翻墙，只需要连接到路由器，并将dns设置一下即可，一劳永逸。俗称软路由。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cknhrs8ya0008q5dicfibfo4j","category_id":"cknhrs8y50004q5di9ll4ei9a","_id":"cknhrs8yl000eq5di29e0kje1"},{"post_id":"cknhrs8xu0000q5dimbxinyuc","category_id":"cknhrs8y50004q5di9ll4ei9a","_id":"cknhrs8yo000iq5diyt5wfzk4"},{"post_id":"cknhrs8y20002q5dip5655jtq","category_id":"cknhrs8y50004q5di9ll4ei9a","_id":"cknhrs8yq000lq5dic472mytj"},{"post_id":"cknhrs8yn000hq5di1p7j85hj","category_id":"cknhrs8ym000fq5digmxwdmjq","_id":"cknhrs8yu000rq5dia7ktgaup"},{"post_id":"cknhrs8y70006q5di14rpgend","category_id":"cknhrs8ym000fq5digmxwdmjq","_id":"cknhrs8yw000vq5divx8cuau3"},{"post_id":"cknhrs8yr000pq5dixqc7wlpk","category_id":"cknhrs8y50004q5di9ll4ei9a","_id":"cknhrs8yw000wq5dilpfcwrvq"},{"post_id":"cknhrs8yb0009q5dif0klx7bn","category_id":"cknhrs8ym000fq5digmxwdmjq","_id":"cknhrs8yx000yq5di3snqvyvb"},{"post_id":"cknhrs8yh000cq5dit3rv9rwr","category_id":"cknhrs8yv000sq5dilt9bov11","_id":"cknhrs8yy0010q5div87lkral"},{"post_id":"cknhrs8yk000dq5dibrufccdq","category_id":"cknhrs8yx000xq5di92ttuzwg","_id":"cknhrs8yz0015q5di5o7cyw1h"},{"post_id":"cknhrs8yp000kq5diht2srl3l","category_id":"cknhrs8yx000xq5di92ttuzwg","_id":"cknhrs8z00019q5di591mukr6"},{"post_id":"cknhrs8yv000uq5ditdwxpka8","category_id":"cknhrs8yz0014q5di5lnx1mu3","_id":"cknhrs8z1001dq5diues7trr1"}],"PostTag":[{"post_id":"cknhrs8xu0000q5dimbxinyuc","tag_id":"cknhrs8y70005q5dirmrqq9lg","_id":"cknhrs8yo000jq5diq08o00og"},{"post_id":"cknhrs8xu0000q5dimbxinyuc","tag_id":"cknhrs8yd000bq5dibus029yb","_id":"cknhrs8yq000mq5dibqcdqt3k"},{"post_id":"cknhrs8y20002q5dip5655jtq","tag_id":"cknhrs8ym000gq5dim43bl0ir","_id":"cknhrs8yz0013q5div6d16ggy"},{"post_id":"cknhrs8y20002q5dip5655jtq","tag_id":"cknhrs8yr000oq5dig89ob58u","_id":"cknhrs8yz0016q5dip520bb3h"},{"post_id":"cknhrs8y20002q5dip5655jtq","tag_id":"cknhrs8yv000tq5di4k22l0hk","_id":"cknhrs8z00018q5ditn51nzsi"},{"post_id":"cknhrs8y20002q5dip5655jtq","tag_id":"cknhrs8yx000zq5disatnqzu8","_id":"cknhrs8z0001aq5diaytkebz2"},{"post_id":"cknhrs8y70006q5di14rpgend","tag_id":"cknhrs8yy0012q5dirmwk3erm","_id":"cknhrs8z1001cq5diekf1edlv"},{"post_id":"cknhrs8y70006q5di14rpgend","tag_id":"cknhrs8yz0017q5dio4lgxjmu","_id":"cknhrs8z1001eq5di5vgrmz8m"},{"post_id":"cknhrs8ya0008q5dicfibfo4j","tag_id":"cknhrs8y70005q5dirmrqq9lg","_id":"cknhrs8z3001hq5diubj4s4p3"},{"post_id":"cknhrs8ya0008q5dicfibfo4j","tag_id":"cknhrs8z0001bq5di0pxzev8z","_id":"cknhrs8z3001iq5dicy4pq95s"},{"post_id":"cknhrs8ya0008q5dicfibfo4j","tag_id":"cknhrs8yx000zq5disatnqzu8","_id":"cknhrs8z4001kq5div7s3k64b"},{"post_id":"cknhrs8yb0009q5dif0klx7bn","tag_id":"cknhrs8yy0012q5dirmwk3erm","_id":"cknhrs8z5001nq5di9tj2ex4c"},{"post_id":"cknhrs8yb0009q5dif0klx7bn","tag_id":"cknhrs8z3001jq5dik00gfn0z","_id":"cknhrs8z5001oq5dibo57henq"},{"post_id":"cknhrs8yb0009q5dif0klx7bn","tag_id":"cknhrs8yz0017q5dio4lgxjmu","_id":"cknhrs8z6001qq5dipz3ktleu"},{"post_id":"cknhrs8yh000cq5dit3rv9rwr","tag_id":"cknhrs8z5001mq5di78zg0o3d","_id":"cknhrs8z7001sq5diuu716c7e"},{"post_id":"cknhrs8yh000cq5dit3rv9rwr","tag_id":"cknhrs8z6001pq5disd3j72bg","_id":"cknhrs8z7001tq5dikjy7l87x"},{"post_id":"cknhrs8yk000dq5dibrufccdq","tag_id":"cknhrs8z6001rq5diqkqsdn0m","_id":"cknhrs8z9001xq5dicqk8r4gc"},{"post_id":"cknhrs8yk000dq5dibrufccdq","tag_id":"cknhrs8z7001uq5di8ej246eu","_id":"cknhrs8z9001yq5diktsy1tpr"},{"post_id":"cknhrs8yk000dq5dibrufccdq","tag_id":"cknhrs8z8001vq5di32y680x9","_id":"cknhrs8za0020q5dihbeg8la3"},{"post_id":"cknhrs8yn000hq5di1p7j85hj","tag_id":"cknhrs8yz0017q5dio4lgxjmu","_id":"cknhrs8zb0022q5dickgx6y2q"},{"post_id":"cknhrs8yn000hq5di1p7j85hj","tag_id":"cknhrs8yy0012q5dirmwk3erm","_id":"cknhrs8zb0023q5di21o1gs02"},{"post_id":"cknhrs8yp000kq5diht2srl3l","tag_id":"cknhrs8za0021q5did07q6pql","_id":"cknhrs8zb0025q5dicfj2uxcy"},{"post_id":"cknhrs8yr000pq5dixqc7wlpk","tag_id":"cknhrs8y70005q5dirmrqq9lg","_id":"cknhrs8zc0027q5digg1os54b"},{"post_id":"cknhrs8yr000pq5dixqc7wlpk","tag_id":"cknhrs8zb0024q5di3qpot7sd","_id":"cknhrs8zd0028q5dinh0u04n0"},{"post_id":"cknhrs8yt000qq5di1nsdq66v","tag_id":"cknhrs8yy0012q5dirmwk3erm","_id":"cknhrs8ze002bq5diud5qh39x"},{"post_id":"cknhrs8yt000qq5di1nsdq66v","tag_id":"cknhrs8zd0029q5dihspcpqa6","_id":"cknhrs8ze002cq5div45so40z"},{"post_id":"cknhrs8yv000uq5ditdwxpka8","tag_id":"cknhrs8zd002aq5di1741cosh","_id":"cknhrs8zf002eq5dinuak9hz9"},{"post_id":"cknhrs8yv000uq5ditdwxpka8","tag_id":"cknhrs8ze002dq5dizrspaadw","_id":"cknhrs8zf002fq5diydv6mgrm"}],"Tag":[{"name":"Linux","_id":"cknhrs8y70005q5dirmrqq9lg"},{"name":"内存","_id":"cknhrs8yd000bq5dibus029yb"},{"name":"显示驱动","_id":"cknhrs8ym000gq5dim43bl0ir"},{"name":"display","_id":"cknhrs8yr000oq5dig89ob58u"},{"name":"LCD","_id":"cknhrs8yv000tq5di4k22l0hk"},{"name":"驱动","_id":"cknhrs8yx000zq5disatnqzu8"},{"name":"hexo","_id":"cknhrs8yy0012q5dirmwk3erm"},{"name":"博客","_id":"cknhrs8yz0017q5dio4lgxjmu"},{"name":"dma","_id":"cknhrs8z0001bq5di0pxzev8z"},{"name":"Github","_id":"cknhrs8z3001jq5dik00gfn0z"},{"name":"vim","_id":"cknhrs8z5001mq5di78zg0o3d"},{"name":"terminator","_id":"cknhrs8z6001pq5disd3j72bg"},{"name":"工作","_id":"cknhrs8z6001rq5diqkqsdn0m"},{"name":"技能","_id":"cknhrs8z7001uq5di8ej246eu"},{"name":"程序员","_id":"cknhrs8z8001vq5di32y680x9"},{"name":"总结","_id":"cknhrs8za0021q5did07q6pql"},{"name":"Arm","_id":"cknhrs8zb0024q5di3qpot7sd"},{"name":"markdown","_id":"cknhrs8zd0029q5dihspcpqa6"},{"name":"科学上网","_id":"cknhrs8zd002aq5di1741cosh"},{"name":"翻墙","_id":"cknhrs8ze002dq5dizrspaadw"}]}}